package org.epragati.reports.service.impl;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.sql.Date;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.NoSuchElementException;
import java.util.Optional;
import java.util.Set;
import java.util.regex.Pattern;
import java.util.stream.Collectors;

import org.apache.commons.codec.binary.Base64;
import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.io.IOUtils;
import org.apache.commons.lang3.StringUtils;
import org.epragati.breg.vo.BregisterFinaceVo;
import org.epragati.breg.vo.BregisterOwnerVo;
import org.epragati.breg.vo.BregisterServiceVo;
import org.epragati.breg.vo.BregisterTheiftVO;
import org.epragati.breg.vo.DetailsOfAuto;
import org.epragati.breg.vo.FamilyMembersVo;
import org.epragati.breg.vo.FinanceAssistvehDetailVo;
import org.epragati.cfst.vcr.dao.VcrOffencesAndIllicitsDAO;
import org.epragati.civilsupplies.dto.CardMemberDetails;
import org.epragati.common.dao.PropertiesDAO;
import org.epragati.common.dto.PropertiesDTO;
import org.epragati.constants.OwnerTypeEnum;
import org.epragati.constants.TransferType;
import org.epragati.dao.enclosure.CitizenEnclosuresDAO;
import org.epragati.dispatcher.dao.DispatcherSubmissionDAORepo;
import org.epragati.dispatcher.dto.DispatcherSubmissionDTO;
import org.epragati.dispatcher.mapper.DispatcherMapper;
import org.epragati.dto.enclosure.CitizenEnclosuresDTO;
import org.epragati.dto.enclosure.ImageEnclosureDTO;
import org.epragati.exception.BadRequestException;
import org.epragati.fa.dto.FinancialAssistanceDAO;
import org.epragati.fa.dto.FinancialAssistanceDTO;
import org.epragati.fa.dto.PersonalDetailsDTO;
import org.epragati.master.dao.AlterationDAO;
import org.epragati.master.dao.BileteralTaxDAO;
import org.epragati.master.dao.DealerRegDAO;
import org.epragati.master.dao.FcDetailsDAO;
import org.epragati.master.dao.FinanceDetailsDAO;
import org.epragati.master.dao.FinancialAssistanceMetaDAO;
import org.epragati.master.dao.MasterCovDAO;
import org.epragati.master.dao.MasterUsersDAO;
import org.epragati.master.dao.NonPaymentDetailsDAO;
import org.epragati.master.dao.OfficeDAO;
import org.epragati.master.dao.RegServiceDAO;
import org.epragati.master.dao.RegistrationDetailDAO;
import org.epragati.master.dao.StagingRegistrationDetailsDAO;
import org.epragati.master.dao.TaxDetailsDAO;
import org.epragati.master.dao.UserDAO;
import org.epragati.master.dto.DealerRegDTO;
import org.epragati.master.dto.FcDetailsDTO;
import org.epragati.master.dto.FinanceDetailsDTO;
import org.epragati.master.dto.FinancialAssistanceMetaDTO;
import org.epragati.master.dto.HarvestersDetailsDTO;
import org.epragati.master.dto.MasterCovDTO;
import org.epragati.master.dto.MasterUsersDTO;
import org.epragati.master.dto.NonPaymentDetailsDTO;
import org.epragati.master.dto.OffenceDTO;
import org.epragati.master.dto.OfficeDTO;
import org.epragati.master.dto.RegistrationDetailsDTO;
import org.epragati.master.dto.StagingRegistrationDetailsDTO;
import org.epragati.master.dto.TaxComponentDTO;
import org.epragati.master.dto.TaxDetailsDTO;
import org.epragati.master.dto.TrailerChassisDetailsDTO;
import org.epragati.master.dto.UserDTO;
import org.epragati.master.dto.VcrOffencesIllicitsDTO;
import org.epragati.master.mappers.FcDetailsMapper;
import org.epragati.master.mappers.RegistrationDetailsMapper;
import org.epragati.master.mappers.RegistrationMapper;
import org.epragati.master.service.CovService;
import org.epragati.master.vo.FcDetailsVO;
import org.epragati.master.vo.RegistrationDetailsVO;
import org.epragati.payment.dto.BreakPaymentsSaveDTO;
import org.epragati.payment.dto.FeeDetailsDTO;
import org.epragati.payment.dto.FeesDTO;
import org.epragati.payment.dto.PaymentTransactionDTO;
import org.epragati.payments.dao.PaymentTransactionDAO;
import org.epragati.payments.vo.BreakPayments;
import org.epragati.permits.dao.OtherStateTemporaryPermitDetailsDAO;
import org.epragati.permits.dao.PermitDetailsDAO;
import org.epragati.permits.dao.TemporaryPermitPassengerDetailsDAO;
import org.epragati.permits.dto.OtherStateTemporaryPermitDetailsDTO;
import org.epragati.permits.dto.PassengerDetailsDTO;
import org.epragati.permits.dto.PermitDetailsDTO;
import org.epragati.permits.dto.TemporaryPermitPassengerDetailsDTO;
import org.epragati.permits.mappers.PassengerDetailsMapper;
import org.epragati.permits.vo.PassengerDetailsVO;
import org.epragati.regservice.RegistrationService;
import org.epragati.regservice.dto.AlterationDTO;
import org.epragati.regservice.dto.BileteralTaxDTO;
import org.epragati.regservice.dto.RegServiceDTO;
import org.epragati.regservice.vo.ApplicationSearchVO;
import org.epragati.reports.service.ReportFiles;
import org.epragati.reports.service.ReportService;
import org.epragati.reports.service.ReportUrls;
import org.epragati.rta.reports.vo.CitizenSearchReportVO;
import org.epragati.service.enclosure.vo.CitizenEnclosersVO;
import org.epragati.service.enclosure.vo.SubmittedImagesVO;
import org.epragati.service.files.GridFsClient;
import org.epragati.sn.dao.SpecialNumberDetailsDAO;
import org.epragati.sn.dto.SpecialNumberDetailsDTO;
import org.epragati.sn.vo.SPReportOfficeInput;
import org.epragati.svs.vo.DispatchInputVo;
import org.epragati.svs.vo.DispatcherVO;
import org.epragati.tax.vo.TaxStatusEnum;
import org.epragati.tax.vo.TaxTypeEnum;
import org.epragati.util.BidStatus;
import org.epragati.util.FeeTypeDetails;
import org.epragati.util.NumberType;
import org.epragati.util.PermitTypeEnum;
import org.epragati.util.PermitsEnum;
import org.epragati.util.RoleEnum;
import org.epragati.util.SourceEnum;
import org.epragati.util.Status.RCActionStatus;
import org.epragati.util.StatusRegistration;
import org.epragati.util.document.KeyValue;
import org.epragati.util.payment.ClassOfVehicleEnum;
import org.epragati.util.payment.GatewayTypeEnum;
import org.epragati.util.payment.ModuleEnum;
import org.epragati.util.payment.ServiceCodeEnum;
import org.epragati.util.payment.ServiceEnum;
import org.epragati.vcr.service.VcrService;
import org.epragati.vcr.vo.OffenceReportForReleaseOrder;
import org.epragati.vcr.vo.OffenceReportVO;
import org.epragati.vcr.vo.VcrFinalServiceVO;
import org.epragati.vcr.vo.VoluntaryTaxVO;
import org.epragati.vcrImage.dao.VcrFinalServiceDAO;
import org.epragati.vcrImage.dao.VoluntaryTaxDAO;
import org.epragati.vcrImage.dto.OtherSectionDTO;
import org.epragati.vcrImage.dto.SpeedGunDTO;
import org.epragati.vcrImage.dto.VcrFinalServiceDTO;
import org.epragati.vcrImage.dto.VoluntaryTaxDTO;
import org.epragati.vcrImage.mapper.VcrFinalServiceMapper;
import org.epragati.vcrImage.mapper.VoluntaryTaxMapper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.io.Resource;
import org.springframework.core.io.ResourceLoader;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Component;
import org.springframework.web.client.RestTemplate;

import com.mongodb.gridfs.GridFSDBFile;

import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;

//import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;

@Component
public class ReportServiceImpl {
	private static final Logger logger = LoggerFactory.getLogger(ReportServiceImpl.class);
	private String DATEFORMAT = "dd-MM-yyyy";
	private String MANUDATEFORMAT = "DDYYYY";
	private String TIMEFORMAT = "HH:mm";
	@Autowired
	private ReportService qRCodeService;
	@Autowired
	private GridFsClient gridFsClient;
	@Autowired
	private StagingRegistrationDetailsDAO stagingRegistrationDetailsDAO;

	@Autowired
	private RegistrationDetailDAO registrationDetailDAO;

	@Autowired
	private RegistrationDetailsMapper regDetailsMapper;

	@Autowired
	private RegistrationMapper registrationMapper;

	@Autowired
	private MasterCovDAO masterCovDAO;

	@Autowired
	private PaymentTransactionDAO paymentTransactionDAO;

	@Autowired
	private MasterUsersDAO masterUsersDAO;

	@Autowired
	private ResourceLoader resourceLoader;

	@Autowired
	private SpecialNumberDetailsDAO specialNumberDetailsDAO;

	@Autowired
	private FcDetailsDAO fcDetailsDAO;

	@Autowired
	private FcDetailsMapper fcDetailsMapper;

	@Autowired
	private TaxDetailsDAO taxDetailsDAO;

	@Autowired
	private RegistrationService registrationService;

	@Autowired
	private PropertiesDAO propertiesDAO;

	@Autowired
	private OfficeDAO officeDAO;

	@Autowired
	private AlterationDAO alterationDAO;

	@Autowired
	private RegServiceDAO regServiceDAO;

	@Autowired
	private RestTemplate restTemplate;

	@Autowired
	private PermitDetailsDAO permitDetailsDAO;

	@Autowired
	private FinanceDetailsDAO financeDetailsDAO;

	@Autowired
	private UserDAO userDAO;

	@Autowired
	private DispatcherMapper mapper;

	@Autowired
	private DispatcherSubmissionDAORepo dispatcherSubmissionRepo;

	@Autowired
	private TemporaryPermitPassengerDetailsDAO temporaryPermitPassengerDetailsDAO;

	@Autowired
	private PassengerDetailsMapper passengerDetailsMapper;

	@Autowired
	private DealerRegDAO dealerDAO;

	@Value("${reg.service.serverUrl:}")
	private String serverURL;

	@Autowired
	private CovService covService;

	@Autowired
	private BileteralTaxDAO bileteralTaxDAO;

	@Autowired
	private VcrFinalServiceDAO finalServiceDAO;

	@Autowired
	private VcrService vcrService;

	@Autowired
	private VoluntaryTaxDAO voluntaryTaxDAO;

	@Autowired
	private NonPaymentDetailsDAO nonPaymentDetailsDAO;

	@Autowired
	private VcrOffencesAndIllicitsDAO vcrOffencesAndIllicitsDAO;

	@Autowired
	private VcrFinalServiceMapper vcrFinalServiceMapper;

	@Autowired
	private OtherStateTemporaryPermitDetailsDAO otherStateTemporaryPermitDetailsDAO;

	@Autowired
	private VcrFinalServiceDAO vcrFinalServiceDAO;

	@Autowired
	private FinancialAssistanceMetaDAO financialAssistanceMetaDAO;

	@Autowired
	private FinancialAssistanceDAO financialAssistanceDAO;

	@Autowired
	private VoluntaryTaxMapper voluntaryTaxMapper;

	@Autowired
	private CitizenEnclosuresDAO citizenEnclosuresDAO;

	public String getFile(String file) {
		return "jasper\\" + file;

	}

	public String getLogo(String value) {
		String apLogo = "";
		Resource resource = resourceLoader.getResource("classpath:" + "images\\" + value);
		String encodstring = null;
		try {
			encodstring = encodeFileToBase64Binary(resource.getFile());
			return apLogo = encodstring;
		} catch (IOException e) {
			e.printStackTrace();
			return apLogo;
		}
	}

	DateTimeFormatter formatter = DateTimeFormatter.ofPattern(DATEFORMAT);

	DateTimeFormatter timeFormatter = DateTimeFormatter.ofPattern(TIMEFORMAT);

	public Map<String, Object> getRegistrationDetails(String applicationNo) {

		Map<String, Object> parameters = new HashMap<>();
		// Note : Do not change below key, it will be binded with Jasper.

		Optional<RegistrationDetailsDTO> resultData = registrationDetailDAO.findByApplicationNo(applicationNo);

		RegistrationDetailsVO registrationDetailsVO = null;
		TaxDetailsDTO taxDetailDTO = null;
		if (resultData.isPresent()) {
			registrationDetailsVO = registrationMapper.convertEntity(resultData.get());
		}
		String PRESENT_ADDRESS = StringUtils.EMPTY;
		if (registrationDetailsVO.getApplicantDetails() != null
				&& registrationDetailsVO.getApplicantDetails().getPresentAddress() != null) {
			PRESENT_ADDRESS = replaceDefaults(
					registrationDetailsVO.getApplicantDetails().getPresentAddress().getDoorNo())
					+ ","
					+ replaceDefaults(registrationDetailsVO.getApplicantDetails().getPresentAddress().getStreetName()
							.toUpperCase())
					+ ","
					+ replaceDefaults(registrationDetailsVO.getApplicantDetails().getPresentAddress().getTownOrCity()
							.toUpperCase())
					+ "\n"
					+ replaceDefaults(
							(registrationDetailsVO.getApplicantDetails().getPresentAddress().getVillage() == null)
									|| registrationDetailsVO.getApplicantDetails().getPresentAddress().getVillage()
											.getVillageName() == null
													? StringUtils.EMPTY
													: registrationDetailsVO.getApplicantDetails().getPresentAddress()
															.getVillage().getVillageName().toUpperCase())
					+ ","
					+ replaceDefaults(
							((registrationDetailsVO.getApplicantDetails().getPresentAddress().getMandal() == null)
									|| null == registrationDetailsVO.getApplicantDetails().getPresentAddress()
											.getMandal().getMandalName())
													? ""
													: registrationDetailsVO.getApplicantDetails().getPresentAddress()
															.getMandal().getMandalName().toUpperCase())
					+ "\n"
					+ replaceDefaults(
							(registrationDetailsVO.getApplicantDetails().getPresentAddress().getDistrict() == null ? ""
									: registrationDetailsVO.getApplicantDetails().getPresentAddress().getDistrict()
											.getDistrictName().toUpperCase()))
					+ "\n"
					+ replaceDefaults(
							(registrationDetailsVO.getApplicantDetails().getPresentAddress().getState() == null ? ""

									: registrationDetailsVO.getApplicantDetails().getPresentAddress()

											.getState().getStateName().toUpperCase()))
					+ ","
					+ replaceDefaults(
							(registrationDetailsVO.getApplicantDetails().getPresentAddress().getCountry() == null ? ""
									: registrationDetailsVO.getApplicantDetails().getPresentAddress().getCountry()
											.getCountryName().toUpperCase()))

					+ ","
					+ replaceDefaults(
							(registrationDetailsVO.getApplicantDetails().getPresentAddress().getPostOffice() == null
									? ""

									: registrationDetailsVO.getApplicantDetails().getPresentAddress()

											.getPostOffice().getPostOfficeCode()));

		}

		String financeDetails = StringUtils.EMPTY;
		if (registrationDetailsVO.getIsFinancier() != null) {
			if (registrationDetailsVO.getFinanceDetails() != null) {
				if (registrationDetailsVO.getFinanceDetails().getFinancerName() != null) {
					financeDetails = replaceDefaults(
							registrationDetailsVO.getFinanceDetails().getFinancerName().toUpperCase()) + "/"
							+ replaceDefaults(
									registrationDetailsVO.getFinanceDetails().getLastUpdated().format(formatter));
				}
			}
		}
		String qrCode = StringUtils.EMPTY;
		try {
			qrCode = qRCodeService.sendPDF(getRegistrationQRCodeForPr((resultData.get().getApplicationNo())));
			if (qrCode == null)
				qrCode = StringUtils.EMPTY;
		} catch (Exception e) {
			logger.debug("Exception :[]", e);
			logger.error(" Exception :[] ", e.getMessage());
		}
		String sign = "";

		parameters.put("AP_LOGO", getLogo(ReportFiles.APLOGO));
		parameters.put("WATER_MARK", getLogo(ReportFiles.WATER_MARK));
		parameters.put("regNumber", replaceDefaults(registrationDetailsVO.getPrNo()));
		/*
		 * parameters.put("regOwner", replaceDefaults(
		 * registrationDetailsVO.getApplicantDetails().getAadharResponse().
		 * getName().toUpperCase()));
		 */
		if (registrationDetailsVO.getOwnerType().getCode().equals(OwnerTypeEnum.Individual.getCode())) {
			parameters.put("regOwner",
					replaceDefaults(registrationDetailsVO.getApplicantDetails().getAadharResponse().getName() != null
							? registrationDetailsVO.getApplicantDetails().getAadharResponse().getName().toUpperCase()
							: ""));
		} else {

			parameters.put("regOwner",
					replaceDefaults(registrationDetailsVO.getApplicantDetails().getEntityName() != null
							? registrationDetailsVO.getApplicantDetails().getEntityName().toUpperCase()
							: ""));
		}
		parameters.put("owntype",
				replaceDefaults(registrationDetailsVO.getOwnerType().name() != null
						? registrationDetailsVO.getOwnerType().name().toUpperCase()
						: ""));
		parameters.put("mobileNumber",
				replaceDefaults(registrationDetailsVO.getApplicantDetails().getContact().getMobile()));
		if (registrationDetailsVO.getOwnerType().getCode().equals(OwnerTypeEnum.Individual.getCode())) {
			parameters.put("fatherName",
					replaceDefaults(registrationDetailsVO.getApplicantDetails().getFatherName() != null
							? registrationDetailsVO.getApplicantDetails().getFatherName().toUpperCase()
							: ""));
		} else {
			parameters.put("fatherName",
					replaceDefaults(registrationDetailsVO.getApplicantDetails().getRepresentativeName() != null
							? registrationDetailsVO.getApplicantDetails().getRepresentativeName().toUpperCase()
							: ""));
		}
		parameters.put("address", PRESENT_ADDRESS);
		if (registrationDetailsVO.getVahanDetails() != null) {
			parameters.put("makersName", StringUtils.EMPTY);
			parameters.put("makersName",
					replaceDefaults(registrationDetailsVO.getVahanDetails().getMakersModel().toUpperCase()));
			parameters.put("makersClass", StringUtils.EMPTY);
			parameters.put("makersClass",
					replaceDefaults(registrationDetailsVO.getVahanDetails().getMakersDesc().toUpperCase()));
			parameters.put("bodyType", StringUtils.EMPTY);
			parameters.put("bodyType", replaceDefaults(registrationDetailsVO.getVahanDetails().getBodyTypeDesc()));
			parameters.put("mfgDate", StringUtils.EMPTY);
			parameters.put("mfgDate",
					replaceDefaults(registrationDetailsVO.getVahanDetails().getManufacturedMonthYear()));
			parameters.put("fuelType", StringUtils.EMPTY);
			parameters.put("fuelType", replaceDefaults(registrationDetailsVO.getVahanDetails().getFuelDesc()));
			parameters.put("chassisNumber", StringUtils.EMPTY);
			parameters.put("chassisNumber",
					replaceDefaults(registrationDetailsVO.getVahanDetails().getChassisNumber()));
			parameters.put("engineNumber", StringUtils.EMPTY);
			parameters.put("engineNumber", replaceDefaults(registrationDetailsVO.getVahanDetails().getEngineNumber()));
			parameters.put("seatCapacity", StringUtils.EMPTY);
			parameters.put("seatCapacity",
					replaceDefaults(registrationDetailsVO.getVahanDetails().getSeatingCapacity()));
			parameters.put("weight", StringUtils.EMPTY);
			parameters.put("weight",
					replaceDefaults(registrationDetailsVO.getVahanDetails().getUnladenWeight()).toString());
			parameters.put("colourType", StringUtils.EMPTY);
			parameters.put("colourType", replaceDefaults(registrationDetailsVO.getVahanDetails().getColor()));
			parameters.put("regDate", StringUtils.EMPTY);
			parameters.put("regDate", replaceDefaults(resultData.get().getCreatedDate().format(formatter)));
		}
		parameters.put("reg_Valid_Upto", StringUtils.EMPTY);
		if (resultData.get().getRegistrationValidity() != null) {
			parameters.put("reg_Valid_Upto", replaceDefaults(
					resultData.get().getRegistrationValidity().getRegistrationValidity().format(formatter)));
		}
		MasterCovDTO masterCovDTO = masterCovDAO.findByCovcode(registrationDetailsVO.getClassOfVehicle());
		parameters.put("vehicleClass", "");
		if (masterCovDTO != null) {
			parameters.put("vehicleClass", replaceDefaults(masterCovDTO.getCovdescription() == null ? StringUtils.EMPTY
					: masterCovDTO.getCovdescription().toUpperCase()));
		}
		parameters.put("invoiceAmount", StringUtils.EMPTY);
		if (registrationDetailsVO.getInvoiceDetails() != null) {
			parameters.put("invoiceAmount",
					replaceDefaults(registrationDetailsVO.getInvoiceDetails().getInvoiceValue()));
		}
		List<TaxDetailsDTO> listOfPaidTax = taxDetailsDAO.findFirst10ByApplicationNoAndTrNoOrderByCreatedDateDesc(
				registrationDetailsVO.getApplicationNo(), registrationDetailsVO.getTrNo());
		registrationService.updatePaidDateAsCreatedDate(listOfPaidTax);
		listOfPaidTax.sort((p1, p2) -> p2.getCreatedDate().compareTo(p1.getCreatedDate()));
		TaxDetailsDTO taxDetailsDto = listOfPaidTax.stream().findFirst().get();
		parameters.put("tax",
				replaceDefaults((taxDetailsDto == null || taxDetailsDto.getTaxAmount() == null) ? StringUtils.EMPTY
						: taxDetailsDto.getTaxAmount()));
		listOfPaidTax.clear();
		parameters.put("hypothecated_Agreement _Date", financeDetails);
		parameters.put("tdate", LocalDate.now().format(formatter));
		parameters.put("IMAGE_SCAN", qrCode);
		parameters.put("SIGNATURE", getLogo(ReportFiles.DIGITAL_SIGN));

		return parameters;

	}

	public Map<String, Object> getForm20Details(String applicationNo) {
		DateTimeFormatter formatter = DateTimeFormatter.ofPattern(DATEFORMAT);
		String grams = " Kgms";
		StagingRegistrationDetailsDTO staggingRegistrationDetailsDTO = null;
		Optional<StagingRegistrationDetailsDTO> registrationDetails = stagingRegistrationDetailsDAO
				.findByApplicationNo(applicationNo);
		if (registrationDetails.isPresent()) {
			staggingRegistrationDetailsDTO = registrationDetails.get();
		}
		String PERMENT_ADDRESS = StringUtils.EMPTY;
		if (staggingRegistrationDetailsDTO.getApplicantDetails().getAadharResponse() != null) {

			PERMENT_ADDRESS = replaceDefaults(
					staggingRegistrationDetailsDTO.getApplicantDetails().getAadharResponse().getHouse() == null
							? StringUtils.EMPTY
							: staggingRegistrationDetailsDTO.getApplicantDetails().getAadharResponse().getHouse())
					+ "\n"
					+ replaceDefaults(
							staggingRegistrationDetailsDTO.getApplicantDetails().getAadharResponse().getStreet() == null
									? StringUtils.EMPTY
									: staggingRegistrationDetailsDTO.getApplicantDetails().getAadharResponse()
											.getStreet())
					+ ","
					+ replaceDefaults((staggingRegistrationDetailsDTO.getApplicantDetails().getAadharResponse()
							.getVillage() == null
									? StringUtils.EMPTY
									: staggingRegistrationDetailsDTO.getApplicantDetails().getAadharResponse()
											.getVillage())
							+ ","
							+ replaceDefaults((staggingRegistrationDetailsDTO.getApplicantDetails().getAadharResponse()
									.getMandal_name() == null
											? ""
											: staggingRegistrationDetailsDTO.getApplicantDetails().getAadharResponse()
													.getMandal_name())
									+ "\n"
									+ replaceDefaults(staggingRegistrationDetailsDTO.getApplicantDetails()
											.getAadharResponse().getDistrict() == null
													? ""
													: staggingRegistrationDetailsDTO.getApplicantDetails()
															.getAadharResponse().getDistrict()))
							+ replaceDefaults((staggingRegistrationDetailsDTO.getApplicantDetails().getAadharResponse()
									.getStatecode() == null ? ""
											: staggingRegistrationDetailsDTO.getApplicantDetails().getAadharResponse()
													.getStatecode())));

		}

		String PRESENT_ADDRESS = StringUtils.EMPTY;
		if (staggingRegistrationDetailsDTO.getApplicantDetails().getPresentAddress() != null) {

			PRESENT_ADDRESS = replaceDefaults(
					staggingRegistrationDetailsDTO.getApplicantDetails().getPresentAddress().getDoorNo() == null
							? StringUtils.EMPTY
							: staggingRegistrationDetailsDTO.getApplicantDetails().getPresentAddress().getDoorNo())
					+ "\n"
					+ replaceDefaults(staggingRegistrationDetailsDTO.getApplicantDetails().getPresentAddress()
							.getStreetName() == null
									? StringUtils.EMPTY
									: staggingRegistrationDetailsDTO.getApplicantDetails().getPresentAddress()
											.getStreetName())
					+ ","
					+ replaceDefaults(
							(staggingRegistrationDetailsDTO.getApplicantDetails().getPresentAddress() == null
									|| staggingRegistrationDetailsDTO.getApplicantDetails().getPresentAddress()
											.getTownOrCity() == null)
													? StringUtils.EMPTY
													: staggingRegistrationDetailsDTO
															.getApplicantDetails().getPresentAddress().getTownOrCity())
					+ "\n"
					+ replaceDefaults((staggingRegistrationDetailsDTO.getApplicantDetails().getPresentAddress()
							.getVillage() == null
							|| staggingRegistrationDetailsDTO.getApplicantDetails().getPresentAddress().getVillage()
									.getVillageName() == null)
											? StringUtils.EMPTY
											: staggingRegistrationDetailsDTO.getApplicantDetails().getPresentAddress()
													.getVillage().getVillageName())
					+ ","
					+ replaceDefaults(((staggingRegistrationDetailsDTO.getApplicantDetails().getPresentAddress()
							.getMandal() == null
							|| staggingRegistrationDetailsDTO.getApplicantDetails().getPresentAddress().getMandal()
									.getMandalName() == null)
											? ""
											: staggingRegistrationDetailsDTO.getApplicantDetails().getPresentAddress()
													.getMandal().getMandalName())
							+ "\n"
							+ replaceDefaults(((staggingRegistrationDetailsDTO.getApplicantDetails().getPresentAddress()
									.getDistrict() == null
									|| staggingRegistrationDetailsDTO.getApplicantDetails().getPresentAddress()
											.getDistrict().getDistrictName() == null)
													? ""
													: staggingRegistrationDetailsDTO.getApplicantDetails()
															.getPresentAddress().getDistrict().getDistrictName()))
							+ ","
							+ replaceDefaults(((staggingRegistrationDetailsDTO.getApplicantDetails().getPresentAddress()
									.getState() == null
									|| staggingRegistrationDetailsDTO.getApplicantDetails().getPresentAddress()
											.getState().getStateName() == null) ? ""
													: staggingRegistrationDetailsDTO.getApplicantDetails()
															.getPresentAddress().getState().getStateName())));

		}

		String AADHAR_INFO = StringUtils.EMPTY;
		if (staggingRegistrationDetailsDTO.getApplicantDetails().getAadharResponse() != null) {

			AADHAR_INFO = replaceDefaults(replaceDefaults(
					(staggingRegistrationDetailsDTO.getApplicantDetails().getAadharResponse().getVillage() == null
							? StringUtils.EMPTY
							: staggingRegistrationDetailsDTO.getApplicantDetails().getAadharResponse().getVillage())
							+ "\n"
							+ replaceDefaults((staggingRegistrationDetailsDTO.getApplicantDetails().getAadharResponse()
									.getMandal_name() == null
											? ""
											: staggingRegistrationDetailsDTO.getApplicantDetails().getAadharResponse()
													.getMandal_name())
									+ "\n"
									+ replaceDefaults(staggingRegistrationDetailsDTO.getApplicantDetails()
											.getAadharResponse().getDistrict() == null
													? ""
													: staggingRegistrationDetailsDTO
															.getApplicantDetails().getAadharResponse().getDistrict()))
							+ "\n"
							+ replaceDefaults((staggingRegistrationDetailsDTO.getApplicantDetails().getAadharResponse()
									.getStatecode() == null
											? ""
											: staggingRegistrationDetailsDTO.getApplicantDetails().getAadharResponse()
													.getStatecode())))
					+ "\n"
					+ replaceDefaults(
							(staggingRegistrationDetailsDTO.getApplicantDetails().getAadharResponse().getDob() == null
									? ""
									: staggingRegistrationDetailsDTO.getApplicantDetails().getAadharResponse()
											.getDob())));

		}
		String dealerRegAddress = StringUtils.EMPTY;
		MasterUsersDTO masterUsersDTOdealer = null;
		if (staggingRegistrationDetailsDTO.getDealerDetails() != null) {
			masterUsersDTOdealer = masterUsersDAO
					.findByUserId(staggingRegistrationDetailsDTO.getDealerDetails().getDealerId());
			if (masterUsersDTOdealer != null) {
				dealerRegAddress = replaceDefaults(masterUsersDTOdealer.getFirstName() == null ? StringUtils.EMPTY
						: masterUsersDTOdealer.getFirstName().toUpperCase())
						+ "\n"
						+ replaceDefaults(
								(null == masterUsersDTOdealer.getDoorNo() || masterUsersDTOdealer.getDoorNo().isEmpty())
										? StringUtils.EMPTY
										: masterUsersDTOdealer.getDoorNo())
						+ ","
						+ replaceDefaults((null == masterUsersDTOdealer.getStreetName()
								|| masterUsersDTOdealer.getStreetName().isEmpty()) ? StringUtils.EMPTY
										: masterUsersDTOdealer.getStreetName())
						+ "\n"
						+ replaceDefaults(masterUsersDTOdealer.getMandal() == null ? StringUtils.EMPTY
								: masterUsersDTOdealer.getMandal().getMandalName())
						+ "," + replaceDefaults(masterUsersDTOdealer.getState() == null ? StringUtils.EMPTY
								: masterUsersDTOdealer.getState().getStateName());
			}
		}
		String axles = StringUtils.EMPTY;
		if (staggingRegistrationDetailsDTO.getVahanDetails() != null) {
			axles = "(a) Front axle="
					+ replaceDefaults(staggingRegistrationDetailsDTO.getVahanDetails().getFrontAxleDesc() == null
							? StringUtils.EMPTY
							: staggingRegistrationDetailsDTO.getVahanDetails().getFrontAxleDesc())
					+ "\n" + "(b) Rear axle="
					+ replaceDefaults(staggingRegistrationDetailsDTO.getVahanDetails().getRearAxleDesc() == null
							? StringUtils.EMPTY
							: staggingRegistrationDetailsDTO.getVahanDetails().getRearAxleDesc())
					+ "\n" + "(c) Any other axle="
					+ replaceDefaults(
							staggingRegistrationDetailsDTO.getVahanDetails().getO1AxleDesc() == null ? StringUtils.EMPTY
									: staggingRegistrationDetailsDTO.getVahanDetails().getO1AxleDesc())
					+ "\n" + "(d) Tandem axle="
					+ replaceDefaults(staggingRegistrationDetailsDTO.getVahanDetails().getTandemAxelDescp() == null
							? StringUtils.EMPTY
							: staggingRegistrationDetailsDTO.getVahanDetails().getTandemAxelDescp());
		}
		String rlw = StringUtils.EMPTY;
		if (staggingRegistrationDetailsDTO.getVahanDetails() != null) {
			rlw = "(a) as certified by manufacturer "
					+ replaceDefaults(
							(staggingRegistrationDetailsDTO.getVahanDetails().getGvw() == null) ? StringUtils.EMPTY
									: staggingRegistrationDetailsDTO.getVahanDetails().getGvw())
					+ grams + "\n" + "(b) To be registered "
					+ replaceDefaults(
							(staggingRegistrationDetailsDTO.getVahanDetails().getGvw() == null) ? StringUtils.EMPTY
									: staggingRegistrationDetailsDTO.getVahanDetails().getGvw() + grams);
		}
		String axleWeight = StringUtils.EMPTY;
		if (staggingRegistrationDetailsDTO.getVahanDetails() != null) {
			axleWeight = "(a) Front axle="
					+ replaceDefaults(staggingRegistrationDetailsDTO.getVahanDetails().getFrontAxleWeight() == null
							? StringUtils.EMPTY
							: staggingRegistrationDetailsDTO.getVahanDetails().getFrontAxleWeight())
					+ grams + "\n" + "(b) Rear axle="
					+ replaceDefaults(staggingRegistrationDetailsDTO.getVahanDetails().getRearAxleWeight() == null
							? StringUtils.EMPTY
							: staggingRegistrationDetailsDTO.getVahanDetails().getRearAxleWeight())
					+ grams + "\n" + "(c) Any other axle="
					+ replaceDefaults(staggingRegistrationDetailsDTO.getVahanDetails().getO1AxleWeight() == null
							? StringUtils.EMPTY
							: staggingRegistrationDetailsDTO.getVahanDetails().getO1AxleWeight())
					+ grams + "\n" + "(d) Tandem axle="
					+ replaceDefaults(staggingRegistrationDetailsDTO.getVahanDetails().getTandemAxelWeight() == null
							? StringUtils.EMPTY
							: staggingRegistrationDetailsDTO.getVahanDetails().getTandemAxelWeight() + grams);
		}
		String overAllDim = StringUtils.EMPTY;
		if (staggingRegistrationDetailsDTO.getVahanDetails() != null) {
			overAllDim = replaceDefaults(
					staggingRegistrationDetailsDTO.getVahanDetails().getLength() == null ? StringUtils.EMPTY
							: staggingRegistrationDetailsDTO.getVahanDetails().getLength())
					+ "\n"
					+ replaceDefaults(
							staggingRegistrationDetailsDTO.getVahanDetails().getWidth() == null ? StringUtils.EMPTY
									: staggingRegistrationDetailsDTO.getVahanDetails().getWidth())
					+ "\n"
					+ replaceDefaults(
							staggingRegistrationDetailsDTO.getVahanDetails().getHeight() == null ? StringUtils.EMPTY
									: staggingRegistrationDetailsDTO.getVahanDetails().getHeight())
					+ "\n" +
					// need to change for over hang
					replaceDefaults(staggingRegistrationDetailsDTO.getVahanDetails().getTandemAxelWeight() == null
							? StringUtils.EMPTY
							: staggingRegistrationDetailsDTO.getVahanDetails().getTandemAxelWeight() + grams);
		}
		String insuranceDetails = StringUtils.EMPTY;
		if (staggingRegistrationDetailsDTO.getInsuranceDetails() != null) {
			insuranceDetails = replaceDefaults(
					staggingRegistrationDetailsDTO.getInsuranceDetails().getCompany() == null ? StringUtils.EMPTY
							: staggingRegistrationDetailsDTO.getInsuranceDetails().getCompany().toUpperCase())
					+ "\n"
					+ replaceDefaults(staggingRegistrationDetailsDTO.getInsuranceDetails().getPolicyType() == null
							? StringUtils.EMPTY
							: staggingRegistrationDetailsDTO.getInsuranceDetails().getPolicyType().toUpperCase())
					+ "\n" + replaceDefaults(
							staggingRegistrationDetailsDTO.getInsuranceDetails().getValidTill().format(formatter));
		}
		StringBuilder officeDetails = new StringBuilder();
		Map<String, Object> parameters = new HashMap<>();
		// Note : Do not change below key, it will be binded with Jasper.
		if (staggingRegistrationDetailsDTO.getOwnerType().getCode().equals(OwnerTypeEnum.Individual.getCode())) {
			parameters.put("FULL_NAME",
					replaceDefaults((staggingRegistrationDetailsDTO.getApplicantDetails() == null
							|| staggingRegistrationDetailsDTO.getApplicantDetails().getFirstName() == null)
									? StringUtils.EMPTY
									: staggingRegistrationDetailsDTO.getApplicantDetails().getFirstName()));
			parameters.put("FATHER_NAME",
					replaceDefaults((staggingRegistrationDetailsDTO.getApplicantDetails() == null
							|| staggingRegistrationDetailsDTO.getApplicantDetails().getFatherName() == null)
									? StringUtils.EMPTY
									: staggingRegistrationDetailsDTO.getApplicantDetails().getFatherName()));
		} else {
			parameters.put("FULL_NAME",
					replaceDefaults((staggingRegistrationDetailsDTO.getApplicantDetails() == null
							|| staggingRegistrationDetailsDTO.getApplicantDetails().getEntityName() == null)
									? StringUtils.EMPTY
									: staggingRegistrationDetailsDTO.getApplicantDetails().getEntityName()));
			parameters.put("FATHER_NAME",
					replaceDefaults((staggingRegistrationDetailsDTO.getApplicantDetails() == null
							|| staggingRegistrationDetailsDTO.getApplicantDetails().getRepresentativeName() == null)
									? StringUtils.EMPTY
									: staggingRegistrationDetailsDTO.getApplicantDetails().getRepresentativeName()));
		}
		parameters.put("PERST_ADDER", PRESENT_ADDRESS);
		parameters.put("PERM_ADDR", PERMENT_ADDRESS);
		parameters.put("DURA_PERST", "");
		parameters.put("PAN_INC", "");
		parameters.put("FORN_INFO", "");
		parameters.put("EX_ARMY", "");
		parameters.put("CITIZEN", "");
		parameters.put("AADAR_INFO", AADHAR_INFO);
		parameters.put("DEALER_ADDR", dealerRegAddress.toString().replace(",", StringUtils.EMPTY));

		MasterCovDTO masterCovDTO = masterCovDAO.findByCovcode(staggingRegistrationDetailsDTO.getClassOfVehicle());
		parameters.put("COA", "");
		if (masterCovDTO != null) {
			parameters.put("COA", replaceDefaults(masterCovDTO.getCovdescription() == null ? StringUtils.EMPTY
					: masterCovDTO.getCovdescription().toUpperCase()));
		}
		parameters.put("TYPE_VEH", "");
		parameters.put("VEHICLE_TYPE", "");
		if (staggingRegistrationDetailsDTO.getVehicleType().equalsIgnoreCase("T")) {
			parameters.put("VEHICLE_TYPE", "Transport");
		} else {
			parameters.put("VEHICLE_TYPE", "Non Transport");
		}
		parameters.put("MAKERS_NAME",
				replaceDefaults((staggingRegistrationDetailsDTO.getVahanDetails() == null
						|| staggingRegistrationDetailsDTO.getVahanDetails().getMakersDesc() == null) ? StringUtils.EMPTY
								: staggingRegistrationDetailsDTO.getVahanDetails().getMakersDesc().toUpperCase()));
		parameters.put("BODY_TYPE",
				replaceDefaults((staggingRegistrationDetailsDTO.getVahanDetails() == null
						|| staggingRegistrationDetailsDTO.getVahanDetails().getBodyTypeDesc() == null)
								? StringUtils.EMPTY
								: staggingRegistrationDetailsDTO.getVahanDetails().getBodyTypeDesc()));

		parameters.put("MAN_DATE",
				replaceDefaults(staggingRegistrationDetailsDTO.getVahanDetails() == null
						|| staggingRegistrationDetailsDTO.getVahanDetails().getManufacturedMonthYear() == null
								? StringUtils.EMPTY
								: staggingRegistrationDetailsDTO.getVahanDetails().getManufacturedMonthYear()));
		parameters.put("NUM_OF_CYLD",
				replaceDefaults(staggingRegistrationDetailsDTO.getVahanDetails() == null
						|| staggingRegistrationDetailsDTO.getVahanDetails().getNoCyl() == null ? StringUtils.EMPTY
								: staggingRegistrationDetailsDTO.getVahanDetails().getNoCyl()));
		parameters.put("HORSE_POW",
				replaceDefaults(staggingRegistrationDetailsDTO.getVahanDetails() == null
						|| staggingRegistrationDetailsDTO.getVahanDetails().getEnginePower() == null ? StringUtils.EMPTY
								: staggingRegistrationDetailsDTO.getVahanDetails().getEnginePower()));

		parameters.put("CUBIC_CAP",
				replaceDefaults(staggingRegistrationDetailsDTO.getVahanDetails() == null
						|| staggingRegistrationDetailsDTO.getVahanDetails().getCubicCapacity() == null
								? StringUtils.EMPTY
								: staggingRegistrationDetailsDTO.getVahanDetails().getCubicCapacity()));
		parameters.put("WHEEL_BASE",
				replaceDefaults((staggingRegistrationDetailsDTO.getVahanDetails().getWheelbase() == null
						|| staggingRegistrationDetailsDTO.getVahanDetails() == null) ? StringUtils.EMPTY
								: staggingRegistrationDetailsDTO.getVahanDetails().getWheelbase()));
		parameters.put("CHASSIS",
				replaceDefaults((staggingRegistrationDetailsDTO.getVahanDetails().getChassisNumber() == null
						|| staggingRegistrationDetailsDTO.getVahanDetails() == null) ? StringUtils.EMPTY
								: staggingRegistrationDetailsDTO.getVahanDetails().getChassisNumber()));
		parameters.put("ENGINE",
				replaceDefaults((staggingRegistrationDetailsDTO.getVahanDetails() == null
						|| staggingRegistrationDetailsDTO.getVahanDetails().getEngineNumber() == null)
								? StringUtils.EMPTY
								: staggingRegistrationDetailsDTO.getVahanDetails().getEngineNumber()));
		parameters.put("SEAT_CAP",
				replaceDefaults((staggingRegistrationDetailsDTO.getVahanDetails() == null
						|| staggingRegistrationDetailsDTO.getVahanDetails().getSeatingCapacity() == null)
								? StringUtils.EMPTY
								: staggingRegistrationDetailsDTO.getVahanDetails().getSeatingCapacity()));
		parameters.put("FUEL",
				replaceDefaults((staggingRegistrationDetailsDTO.getVahanDetails() == null
						|| staggingRegistrationDetailsDTO.getVahanDetails().getFuelDesc() == null) ? StringUtils.EMPTY
								: staggingRegistrationDetailsDTO.getVahanDetails().getFuelDesc()));
		parameters.put("WEIGHT",
				replaceDefaults((staggingRegistrationDetailsDTO.getVahanDetails() == null
						|| staggingRegistrationDetailsDTO.getVahanDetails().getUnladenWeight() == null)
								? StringUtils.EMPTY
								: staggingRegistrationDetailsDTO.getVahanDetails().getUnladenWeight())
						+ grams);
		parameters.put("PREVIOUS_REG", "");
		parameters.put("COLOUR",
				replaceDefaults((staggingRegistrationDetailsDTO.getVahanDetails() == null
						|| staggingRegistrationDetailsDTO.getVahanDetails().getColor() == null) ? StringUtils.EMPTY
								: staggingRegistrationDetailsDTO.getVahanDetails().getColor()));
		parameters.put("AXLES", axles);
		parameters.put("RLW", rlw);
		parameters.put("AXLE_WEIGHT", axleWeight);
		parameters.put("OVERAL_DIM", overAllDim);
		parameters.put("INS_DETAILS", insuranceDetails);
		parameters.put("EXEM_INS_ENCL", "");
		parameters.put("PRESCRIBED_FEE", "");
		parameters.put("BODY_TYPE1", "");
		parameters.put("WEIGHT1", "");
		parameters.put("AXLES1", "");
		parameters.put("AXLES_WEIGHT1", "");
		parameters.put("DATE", LocalDate.now().format(formatter));
		parameters.put("REF_NO", "");
		parameters.put("OFFICE_DETAILS", "");
		if (staggingRegistrationDetailsDTO.getOfficeDetails() != null) {
			officeDetails
					.append(staggingRegistrationDetailsDTO.getOfficeDetails().getOfficeName() == null
							? StringUtils.EMPTY
							: staggingRegistrationDetailsDTO.getOfficeDetails().getOfficeName())
					.append(",")
					.append(staggingRegistrationDetailsDTO.getOfficeDetails().getType() == null ? StringUtils.EMPTY
							: staggingRegistrationDetailsDTO.getOfficeDetails().getType())
					.append(",")
					.append(staggingRegistrationDetailsDTO.getOfficeDetails().getOfficeAddress2() == null
							? StringUtils.EMPTY
							: staggingRegistrationDetailsDTO.getOfficeDetails().getOfficeAddress2());
			parameters.put("OFFICE_DETAILS", replaceDefaults(officeDetails));
		}

		parameters.put("RTA_NAME", "");
		if (staggingRegistrationDetailsDTO.getOfficeDetails() != null) {
			parameters.put("RTA_NAME",
					replaceDefaults((staggingRegistrationDetailsDTO.getOfficeDetails().getOfficeName() == null)
							? StringUtils.EMPTY
							: staggingRegistrationDetailsDTO.getOfficeDetails().getOfficeName()));
		}

		return parameters;

	}

	public Map<String, Object> getFCDetails(String applicationNo) {
		FcDetailsDTO fcDetailsDTO = null;
		RegistrationDetailsDTO registrationDetailsDTO = null;

		Optional<RegistrationDetailsDTO> registrationDetailsDTOOptional = registrationDetailDAO
				.findByApplicationNo(applicationNo);
		if (registrationDetailsDTOOptional.isPresent()) {
			registrationDetailsDTO = registrationDetailsDTOOptional.get();
		} else {
			logger.error("No record found");
			throw new BadRequestException("No record found");
		}
		List<FcDetailsDTO> resultData = fcDetailsDAO
				.findFirst5ByStatusIsTrueAndPrNoOrderByCreatedDateDesc(registrationDetailsDTO.getPrNo());
		FcDetailsVO fcDetailsVO = new FcDetailsVO();
		if (CollectionUtils.isEmpty(resultData)) {
			logger.error("fitness detail not present for:: [{}]", registrationDetailsDTO.getPrNo());
			throw new BadRequestException("fitness detail not present for::" + registrationDetailsDTO.getPrNo());
		}
		if (resultData.stream().findFirst().isPresent()) {
			fcDetailsDTO = resultData.stream().findFirst().get();
			fcDetailsVO = fcDetailsMapper.convertEntity(fcDetailsDTO);
		}

		String qrCode = StringUtils.EMPTY;
		try {
			qrCode = qRCodeService.sendPDF(getRegistrationQRCodeForFc(registrationDetailsDTO.getApplicationNo()));
			if (qrCode == null)
				qrCode = StringUtils.EMPTY;
		} catch (Exception e) {
			logger.debug(" Exception :[] ", e);
			logger.error(" Exception :[] ", e.getMessage());
		}
		Map<String, Object> parameters = new HashMap<>();
		// Note : Do not change below key, it will be binded with Jasper.

		parameters.put("AP_LOGO", getLogo(ReportFiles.APLOGO));
		parameters.put("otsilogo", getLogo(ReportFiles.OTSILOGO));
		parameters.put("WATER_MARK", getLogo(ReportFiles.WATER_MARK));
		parameters.put("FC_NUMBER",
				replaceDefaults(fcDetailsVO.getFcNumber()).isEmpty() ? StringUtils.EMPTY : fcDetailsVO.getFcNumber());

		parameters.put("issueDate",
				replaceDefaults(fcDetailsDTO.getCreatedDate().format(formatter)).isEmpty() ? StringUtils.EMPTY
						: fcDetailsDTO.getCreatedDate().format(formatter));

		parameters.put("vehicleNo",
				replaceDefaults(fcDetailsDTO.getPrNo()).isEmpty() ? StringUtils.EMPTY : fcDetailsDTO.getPrNo());

		parameters.put("expiredate", replaceDefaults(fcDetailsVO.getFcValidUpto()).isEmpty() ? StringUtils.EMPTY
				: fcDetailsVO.getFcValidUpto().format(formatter));

		parameters.put("chassisNumber", replaceDefaults(fcDetailsDTO.getChassisNo()).isEmpty() ? StringUtils.EMPTY
				: fcDetailsDTO.getChassisNo());

		parameters.put("engineNumber",
				replaceDefaults(fcDetailsDTO.getEngineNo()).isEmpty() ? StringUtils.EMPTY : fcDetailsDTO.getEngineNo());

		parameters.put("inspecteddate", replaceDefaults(fcDetailsDTO.getFcIssuedDate()).isEmpty() ? StringUtils.EMPTY
				: fcDetailsDTO.getFcIssuedDate().format(formatter));
		Optional<AlterationDTO> alterationDTO = alterationDAO.findByApplicationNo(applicationNo);
		parameters.put("cov", "");
		if (alterationDTO.isPresent()) {
			parameters.put("cov", replaceDefaults(alterationDTO.get().getCovDescription() == null ? StringUtils.EMPTY
					: alterationDTO.get().getCovDescription().toUpperCase()));
		} else {
			MasterCovDTO masterCovDTO = masterCovDAO.findByCovcode(fcDetailsDTO.getClassOfVehicle());
			parameters.put("cov", "");
			if (masterCovDTO != null) {
				parameters.put("cov", replaceDefaults(masterCovDTO.getCovdescription() == null ? StringUtils.EMPTY
						: masterCovDTO.getCovdescription().toUpperCase()));
			}

		}

		parameters.put("mviName", replaceDefaults(fcDetailsVO.getInspectedMviName()).isEmpty() ? StringUtils.EMPTY
				: fcDetailsVO.getInspectedMviName());
		if (StringUtils.isNoneBlank(fcDetailsVO.getInspectedMviOfficeName())) {
			parameters.put("officeName", replaceDefaults(fcDetailsVO.getInspectedMviOfficeName()));
		} else {
			parameters.put("officeName", replaceDefaults(fcDetailsVO.getOfficeName()).isEmpty() ? StringUtils.EMPTY
					: fcDetailsVO.getOfficeName());
		}

		parameters.put("mfgDate", replaceDefaults(fcDetailsVO.getFcIssuedDate()).isEmpty() ? StringUtils.EMPTY
				: fcDetailsVO.getFcIssuedDate().format(formatter));
		parameters.put("expiredate", replaceDefaults(fcDetailsVO.getFcValidUpto()).isEmpty() ? StringUtils.EMPTY
				: fcDetailsVO.getFcValidUpto().format(formatter));

		// Details from registration
		if (registrationDetailsDTO != null) {
			if (registrationDetailsDTO.getVahanDetails() != null) {
				parameters.put("SEAT_CAP",
						replaceDefaults((registrationDetailsDTO.getVahanDetails().getSeatingCapacity() == null)
								? StringUtils.EMPTY
								: registrationDetailsDTO.getVahanDetails().getSeatingCapacity() + "(IN ALL)"));
				parameters.put("ULW",
						replaceDefaults((registrationDetailsDTO.getVahanDetails().getUnladenWeight() == null)
								? StringUtils.EMPTY
								: registrationDetailsDTO.getVahanDetails().getUnladenWeight() + "Kgs"));
				if (CollectionUtils
						.isNotEmpty(registrationDetailsDTO.getVahanDetails().getTrailerChassisDetailsDTO())) {
					Integer max = registrationDetailsDTO.getVahanDetails().getTrailerChassisDetailsDTO().stream()
							.mapToInt(v -> v.getGtw()).max().orElseThrow(NoSuchElementException::new);
					Integer gcwTotal = max + registrationDetailsDTO.getVahanDetails().getGvw();
					parameters.put("GVW",
							replaceDefaults(
									(registrationDetailsDTO.getVahanDetails().getGvw() == null) ? StringUtils.EMPTY
											: (gcwTotal) + "Kgs"));
				} else {
					parameters.put("GVW",
							replaceDefaults(
									(registrationDetailsDTO.getVahanDetails().getGvw() == null) ? StringUtils.EMPTY
											: registrationDetailsDTO.getVahanDetails().getGvw() + "Kgs"));
				}

				parameters.put("COLOR",
						replaceDefaults(
								(registrationDetailsDTO.getVahanDetails().getColor() == null) ? StringUtils.EMPTY
										: registrationDetailsDTO.getVahanDetails().getColor()));
			}
		}
		parameters.put("IMAGE_SCAN", getLogo(ReportFiles.DIGITAL_SIGN));
		parameters.put("QR_SCAN", qrCode);
		parameters.put("DYNAMIC_DATA", "");
		if (fcDetailsDTO.getPrNo() != null) {
			parameters.put("DYNAMIC_DATA", (fcDetailsDTO.getPrNo() == null ? "_______" : fcDetailsDTO.getPrNo()));
		}
		return parameters;
	}

	public String getRegistrationQRCodeForPr(String applicationNo) {

		return serverURL + "getRegistrationDetails?applicationNo=" + applicationNo;
	}

	public String getBilateralPermitURL(String applicationNo) {

		return serverURL + "citizenServices/getBilateralPermitDetails?applicationNo=" + applicationNo;
	}

	public String getRegistrationQRCodeForTr(String applicationNo) {

		return serverURL + "getTrDetails?applicationNo=" + applicationNo;
	}

	public String getRegistrationQRCodeForcoa(String applicationNo) {

		return serverURL + "getCoaDetails?applicationNo=" + applicationNo;
	}

	public String getQRCodeForScpPermits(String prNo, String permitType) {

		return serverURL + "citizenServices/getpermitsforvcr?prNo=" + prNo + "permitType" + permitType;
	}

	private String getQRCodeForTempPermits(String prNo, String permitType) {

		return serverURL + "citizenServices/getpermitsforvcr?prNo=" + prNo + "permitType" + permitType;
	}

	public String getRegistrationQRCodeForBodyBuilderSlot(String applicationNo) {

		return serverURL + "citizenServices/getbodybuilderslotdetails?applicationNo=" + applicationNo;
	}

	public String getRegistrationQRCodeForRegService(String applicationNo) {

		return serverURL + "citizenServices/getregservicereceipt?applicationNo=" + applicationNo;
	}

	public String getRegistrationQRCodeForFitness(String applicationNo) {

		return serverURL + "/citizenServices/getfitnessrejectservice?applicationNo=" + applicationNo;
	}

	public String getRegistrationQRCodeForTransport(String applicationNo) {

		return serverURL + "getTranspPrData?applicationNo=" + applicationNo;
	}

	public String getRegistrationQRCodeForTransportCitizen(String applicationNo) {
		
		String encryptApplication = new String(Base64.encodeBase64URLSafeString(applicationNo.getBytes()));

		return serverURL + "citizenServices/getregcitizenprdetails?applicationNo=" + encryptApplication;
	}

	public String getRegistrationQRCodeForBreg(String applicationNo) {
		String applicationreg = new String(Base64.encodeBase64String(applicationNo.getBytes()));
		return serverURL + "citizenServices/gernateregisterreport?inputNumber=" + applicationreg;
	}

	public String getVCRreport(String applicationNo) {

		return serverURL + "citizenServices/getVehicleReleaseReport?inputNumber=" + applicationNo;
	}

	public String getVCRReleaseOrder(String applicationNo) {

		return serverURL + "citizenServices/getVcrReport?inputNumber=" + applicationNo;
	}

	public String getRegistrationQRCodeForFc(String applicationNo) {

		return serverURL + "getFCDetails?applicationNo=" + applicationNo;
	}

	public String getRegistrationQRCodeForFinance(String applicationNo) {

		return serverURL + "getfinancesactionletter?applicationNo=" + applicationNo;
	}

	public String getHptFormURL(String applicationNo) {

		return serverURL + "citizenServices/hptForm?applicationNo=" + applicationNo;
	}

	public String getVolentaryTax(String applicationNo) {

		return serverURL + "citizenServices/gettaxandgreentaxfc?chassisNumber=&moduleType=VOLUNTARYTAX&inputNumber="
				+ applicationNo;
	}

	public String getRecommendedURL(String applicationNo, String prNo) {

		return serverURL + "citizenServices/getrecommendationletter?id=" + applicationNo + "&prNo=" + prNo;
	}

	public String getCCFormURL(String applicationNo) {

		return serverURL + "citizenServices/getccform?applicationNo=" + applicationNo;
	}

	public String getRegistrationQRCodeForOtherstate(String applicationNo) {

		return serverURL + "citizenServices/getOtherStateConfirmReceipt?applicationNo=" + applicationNo;
	}

	public String getRegistrationQRCodeForOtherstateForCitizen(String applicationNo) {

		return serverURL + "citizenServices/getotherstatereceiptforcitizen?applicationNo=" + applicationNo;
	}

	public String getRegistrationQRCodeForNoc(String applicationNo) {

		return serverURL + "getNocTemplDetails?applicationNo=" + applicationNo;
	}

	public String getRegistrationQRCodeForSpecialNumber(String applicationNo) {

		return serverURL + "getSpecialNumReport?applicationNo=" + applicationNo;
	}

	public String getRegistrationQRCodeForPermitssbp(String applicationNo) {

		return serverURL + ReportUrls.P_SBP + applicationNo;
	}

	public String getRegistrationQRCodeForPermitstvp(String applicationNo) {

		return serverURL + ReportUrls.P_TVP + applicationNo;
	}

	public String getRegistrationQRCodeForPermitspc(String applicationNo) {

		return serverURL + ReportUrls.P_PC + applicationNo;
	}

	public String getRegistrationQRCodeForPermitsnppuc(String applicationNo) {

		return serverURL + ReportUrls.P_NPPUC + applicationNo;
	}

	public String getRegistrationQRCodeForPermitspvt(String applicationNo) {

		return serverURL + ReportUrls.P_PVT + applicationNo;
	}

	public String getRegistrationQRCodeForPermitseib(String applicationNo) {

		return serverURL + ReportUrls.P_EIP + applicationNo;
	}

	public String getBase64Image(String appImageDocId) {

		String imageStr = StringUtils.EMPTY;
		try {
			Optional<GridFSDBFile> imageOptional = gridFsClient.findFilesInGridFsById(appImageDocId);

			if (imageOptional.isPresent()) {
				InputStream finput = imageOptional.get().getInputStream();
				final byte[] bytes64bytes = Base64.encodeBase64(IOUtils.toByteArray(finput));
				imageStr = new String(bytes64bytes);
				finput.close();
			}
		} catch (Exception e) {
			logger.debug("Unable to Read Image , Exception [{}]", e);

			logger.error("Unable to Read Image , Exception [{}]", e.getMessage());
		}
		return imageStr;
	}

	private String replaceDefaults(String input) {

		if (StringUtils.isBlank(input) || input == null) {
			return StringUtils.EMPTY;
		}
		return input;
	}

	private String replaceDefaultsWithOutNewLine(String input) {

		if (StringUtils.isBlank(input)) {
			return StringUtils.EMPTY;
		}
		return input + "\n";
	}

	private String replaceDefaults(Object input) {

		if (null == input) {
			return StringUtils.EMPTY;
		}
		return input.toString();
	}

	private static String encodeFileToBase64Binary(File file) {
		String encodedfile = null;
		FileInputStream fileInputStreamReader = null;
		try {
			fileInputStreamReader = new FileInputStream(file);
			byte bytes[] = new byte[(int) file.length()];
			fileInputStreamReader.read(bytes);
			encodedfile = Base64.encodeBase64URLSafeString(bytes);
			return encodedfile;
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			logger.debug("Exception [{}]", e);
			logger.error("Exception [{}]", e.getMessage());

			e.printStackTrace();

		} catch (IOException e) {
			// TODO Auto-generated catch block
			logger.debug("Exception [{}]", e);
			logger.error("Exception [{}]", e.getMessage());

			e.printStackTrace();
		} finally {
			try {
				fileInputStreamReader.close();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				logger.debug("Exception [{}]", e);
				logger.error("Exception [{}]", e.getMessage());

				e.printStackTrace();
			}
		}
		return encodedfile;
	}

	public Map<String, Object> getTrDetails(String applicationNo) {

		String notAplicable = "NA";
		DateTimeFormatter formatter = DateTimeFormatter.ofPattern(DATEFORMAT);
		PaymentTransactionDTO paymentTransactionDTO = null;
		BreakPaymentsSaveDTO breakPaymentsSaveDTO = null;
		TaxDetailsDTO taxDetailDTO = null;
		FinanceDetailsDTO financeDetailsDTO = null;
		Optional<StagingRegistrationDetailsDTO> resultData = stagingRegistrationDetailsDAO
				.findByApplicationNo(applicationNo);
		RegistrationDetailsVO registrationDetailsVO = null;
		StagingRegistrationDetailsDTO stagingDTO = null;
		RegistrationDetailsDTO regDTO = null;
		if (resultData.isPresent()) {
			registrationDetailsVO = regDetailsMapper.convertEntity(resultData.get());
			stagingDTO = resultData.get();
		} else {
			Optional<RegistrationDetailsDTO> regData = registrationDetailDAO.findByApplicationNo(applicationNo);
			regDTO = regData.get();
			stagingDTO = (StagingRegistrationDetailsDTO) regDTO;
			if (!regData.isPresent()) {
				logger.error("Record not found");
				throw new BadRequestException("Record not found");
			}
			registrationDetailsVO = regDetailsMapper.convertEntity(regData.get());
			resultData = Optional.of(stagingDTO);
		}

		Optional<PaymentTransactionDTO> paymentsDtoOptional = paymentTransactionDAO
				.findTopByApplicationFormRefNumOrderByIdDesc(applicationNo);
		if (paymentsDtoOptional.isPresent()) {
			paymentTransactionDTO = paymentsDtoOptional.get();
		}
		String PRESENT_ADDRESS = StringUtils.EMPTY;
		if (registrationDetailsVO.getApplicantDetails() != null
				&& registrationDetailsVO.getApplicantDetails().getPresentAddress() != null) {
			String PRESENT_ADDRESS_VALUE = null;
			if (!registrationDetailsVO.getApplicantDetails().getPresentAddress().getOtherVillage()
					.equalsIgnoreCase("")) {

				PRESENT_ADDRESS_VALUE = registrationDetailsVO.getApplicantDetails().getPresentAddress()
						.getOtherVillage() == null ? StringUtils.EMPTY
								: registrationDetailsVO.getApplicantDetails().getPresentAddress().getOtherVillage()
										.toUpperCase();
			} else {
				PRESENT_ADDRESS_VALUE = registrationDetailsVO.getApplicantDetails().getPresentAddress().getVillage()
						.getVillageName() == null ? StringUtils.EMPTY
								: registrationDetailsVO.getApplicantDetails().getPresentAddress().getVillage()
										.getVillageName().toUpperCase();

			}

			PRESENT_ADDRESS = replaceDefaults(
					registrationDetailsVO.getApplicantDetails().getPresentAddress().getDoorNo())
					+ ","
					+ ((registrationDetailsVO.getApplicantDetails().getPresentAddress() == null
							|| registrationDetailsVO.getApplicantDetails().getPresentAddress().getStreetName() == null)
									? ""
									: registrationDetailsVO
											.getApplicantDetails().getPresentAddress().getStreetName().toUpperCase())
					+ "\n"
					+ ((registrationDetailsVO.getApplicantDetails().getPresentAddress() == null
							|| registrationDetailsVO.getApplicantDetails().getPresentAddress().getTownOrCity() == null)
									? ""
									: registrationDetailsVO.getApplicantDetails().getPresentAddress().getTownOrCity()
											.toUpperCase())

					+ "," + replaceDefaults(PRESENT_ADDRESS_VALUE) + ","
					+ replaceDefaults(
							((registrationDetailsVO.getApplicantDetails().getPresentAddress().getMandal() == null
									|| registrationDetailsVO.getApplicantDetails().getPresentAddress().getMandal()
											.getMandalName() == null)
													? ""
													: registrationDetailsVO.getApplicantDetails().getPresentAddress()
															.getMandal().getMandalName().toUpperCase())
									+ "\n"
									+ (replaceDefaults((registrationDetailsVO.getApplicantDetails().getPresentAddress()
											.getDistrict() == null
											|| registrationDetailsVO.getApplicantDetails().getPresentAddress()
													.getDistrict().getDistrictName() == null)
															? ""
															: registrationDetailsVO
																	.getApplicantDetails().getPresentAddress()
																	.getDistrict().getDistrictName().toUpperCase()))
									+ "\n"
									+ replaceDefaults((registrationDetailsVO.getApplicantDetails().getPresentAddress()
											.getState() == null
													? ""
													: registrationDetailsVO.getApplicantDetails().getPresentAddress()
															.getState().getStateName().toUpperCase()))
									+ "\n"
									+ replaceDefaults((registrationDetailsVO.getApplicantDetails().getPresentAddress()
											.getCountry() == null ? ""

													: registrationDetailsVO.getApplicantDetails().getPresentAddress()

															.getCountry().getCountryName().toUpperCase()))

									+ ","
									+ replaceDefaults((registrationDetailsVO.getApplicantDetails().getPresentAddress()
											.getPostOffice() == null ? ""

													: registrationDetailsVO.getApplicantDetails().getPresentAddress()

															.getPostOffice().getPostOfficeCode())));

		}

		String qrCode = StringUtils.EMPTY;
		// String registrationQRrequiredDetails = "WELCOME REGISTRATION ";
		try {
			qrCode = qRCodeService.sendPDF(getRegistrationQRCodeForTr(resultData.get().getApplicationNo()));
			if (qrCode == null)
				qrCode = StringUtils.EMPTY;
		} catch (Exception e) {
			logger.debug(" Exception :[] ", e);
			logger.error(" Exception :[] ", e.getMessage());
		}
		Map<String, Object> parameters = new HashMap<>();

		parameters.put("AP_LOGO", getLogo(ReportFiles.APLOGO));
		parameters.put("otsilogo", getLogo(ReportFiles.OTSILOGO));
		// Note : Do not change below key, it will be binded with Jasper.
		parameters.put("TR.NO", replaceDefaults(registrationDetailsVO.getTrNo()));

		parameters.put("DISPLAY NAME", "");
		parameters.put("FULL NAME", "");
		parameters.put("FATHER NAME", "");
		parameters.put("NATIONALITY", "");
		parameters.put("dob", "");
		if (registrationDetailsVO.getApplicantDetails() != null) {
			if (registrationDetailsVO.getApplicantDetails().getFirstName() != null) {
				if (registrationDetailsVO.getOwnerType().getCode().equals(OwnerTypeEnum.Individual.getCode())) {
					String fullName = StringUtils.EMPTY;
					if (registrationDetailsVO.getApplicantDetails().getFirstName() != null
							&& registrationDetailsVO.getApplicantDetails() != null) {
						fullName = registrationDetailsVO.getApplicantDetails().getFirstName() + " "
								+ (registrationDetailsVO.getApplicantDetails().getLastName() == null ? StringUtils.EMPTY
										: registrationDetailsVO.getApplicantDetails().getLastName());
					}
					// another case where firstName consists of lastname
					String[] nameSplitted = registrationDetailsVO.getApplicantDetails().getFirstName().split(" ");
					for (int i = 0; i <= nameSplitted.length - 1; i++) {
						if (registrationDetailsVO.getApplicantDetails().getLastName() != null && registrationDetailsVO
								.getApplicantDetails().getLastName().equalsIgnoreCase(nameSplitted[i])) {
							fullName = (registrationDetailsVO.getApplicantDetails().getFirstName() == null
									? StringUtils.EMPTY
									: registrationDetailsVO.getApplicantDetails().getFirstName());
						}
					}
					parameters.put("DISPLAY NAME", fullName.toUpperCase());
				} else {
					parameters.put("DISPLAY NAME",
							replaceDefaults(registrationDetailsVO.getApplicantDetails().getEntityName() != null
									? registrationDetailsVO.getApplicantDetails().getEntityName().toUpperCase()
									: ""));
				}
			}
			if (registrationDetailsVO.getApplicantDetails().getDisplayName() != null) {
				if (registrationDetailsVO.getOwnerType().getCode().equals(OwnerTypeEnum.Individual.getCode())) {
					parameters.put("FULL NAME",
							replaceDefaults(registrationDetailsVO.getApplicantDetails().getDisplayName() != null
									? registrationDetailsVO.getApplicantDetails().getDisplayName().toUpperCase()
									: ""));
				} else {
					parameters.put("FULL NAME",
							replaceDefaults(registrationDetailsVO.getApplicantDetails().getEntityName() != null
									? registrationDetailsVO.getApplicantDetails().getEntityName().toUpperCase()
									: ""));
				}
			}

			if (registrationDetailsVO.getApplicantDetails().getDateOfBirth() != null) {
				parameters.put("dob", replaceDefaults(
						registrationDetailsVO.getApplicantDetails().getDateOfBirth().format(formatter)));
			}

			if (registrationDetailsVO.getOwnerType().getCode().equals(OwnerTypeEnum.Individual.getCode())) {
				parameters.put("FATHER NAME",
						replaceDefaults(registrationDetailsVO.getApplicantDetails().getFatherName() != null
								? registrationDetailsVO.getApplicantDetails().getFatherName().toUpperCase()
								: ""));
			} else {
				parameters.put("FATHER NAME",
						replaceDefaults(registrationDetailsVO.getApplicantDetails().getRepresentativeName() != null
								? registrationDetailsVO.getApplicantDetails().getRepresentativeName().toUpperCase()
								: ""));
			}
			parameters.put("NATIONALITY",
					replaceDefaults(registrationDetailsVO.getApplicantDetails().getNationality()));
		}
		parameters.put("ADDRESS", PRESENT_ADDRESS);
		MasterCovDTO masterCovDTO = masterCovDAO.findByCovcode(registrationDetailsVO.getClassOfVehicle());
		parameters.put("VEH_DESCRIPTION", "");
		if (masterCovDTO != null) {
			parameters.put("VEH_DESCRIPTION",
					replaceDefaults(masterCovDTO.getCovdescription() == null ? StringUtils.EMPTY
							: masterCovDTO.getCovdescription().toUpperCase()));
		}

		parameters.put("COV", replaceDefaults(registrationDetailsVO.getClassOfVehicle() == null ? StringUtils.EMPTY
				: registrationDetailsVO.getClassOfVehicle()));
		if (registrationDetailsVO.getVahanDetails() != null) {
			parameters.put("MAKERS NAME",
					replaceDefaults(registrationDetailsVO.getVahanDetails().getMakersModel() == null ? StringUtils.EMPTY
							: registrationDetailsVO.getVahanDetails().getMakersModel()));
			parameters.put("TYPE OF BODY",
					replaceDefaults(
							registrationDetailsVO.getVahanDetails().getBodyTypeDesc() == null ? StringUtils.EMPTY
									: registrationDetailsVO.getVahanDetails().getBodyTypeDesc()));
			parameters.put("SEATING CAPACITY",
					replaceDefaults(
							registrationDetailsVO.getVahanDetails().getSeatingCapacity() == null ? StringUtils.EMPTY
									: registrationDetailsVO.getVahanDetails().getSeatingCapacity()));
			parameters.put("COLOUR",
					replaceDefaults(registrationDetailsVO.getVahanDetails().getColor() == null ? StringUtils.EMPTY
							: registrationDetailsVO.getVahanDetails().getColor()));

			parameters.put("CHASSIS NO",
					replaceDefaults(
							registrationDetailsVO.getVahanDetails().getChassisNumber() == null ? StringUtils.EMPTY
									: registrationDetailsVO.getVahanDetails().getChassisNumber()));
			parameters.put("ENGINE NO",
					replaceDefaults(
							registrationDetailsVO.getVahanDetails().getEngineNumber() == null ? StringUtils.EMPTY
									: registrationDetailsVO.getVahanDetails().getEngineNumber()));
			parameters.put("MAKERS CLASS",
					replaceDefaults(registrationDetailsVO.getVahanDetails().getMakersDesc() == null ? StringUtils.EMPTY
							: registrationDetailsVO.getVahanDetails().getMakersDesc().toUpperCase()));
			parameters.put("FUEL USED",
					replaceDefaults(registrationDetailsVO.getVahanDetails().getFuelDesc() == null ? StringUtils.EMPTY
							: registrationDetailsVO.getVahanDetails().getFuelDesc()));
		}
		parameters.put("govt_logo", getLogo(ReportFiles.GOVTLOGO));
		parameters.put("WATER_TR_MARK", getLogo(ReportFiles.WATER_MARK));
		parameters.put("WATER_MARK", getLogo(ReportFiles.WATER_MARK));
		parameters.put("TR FEE", notAplicable);
		parameters.put("HPA FEE", notAplicable);
		parameters.put("PRfee", notAplicable);
		parameters.put("FcFee", notAplicable);
		Map<String, Double> setTrBreakups = new HashMap<String, Double>();
		Map<String, Double> setPrBreakups = new HashMap<String, Double>();
		Map<String, Double> setHpaBreakups = new HashMap<String, Double>();
		Map<String, Double> setFCBreakups = new HashMap<String, Double>();
		if (paymentTransactionDTO != null) {

			breakPaymentsSaveDTO = paymentTransactionDTO.getBreakPaymentsSave();

			if (breakPaymentsSaveDTO != null) {
				List<BreakPayments> breakPaymentsList = breakPaymentsSaveDTO.getBreakPayments();

				for (BreakPayments breakPayments : breakPaymentsList) {
					if (breakPayments.getFeeType().equals(FeeTypeDetails.REGVALUE)) {
						parameters.put("TR FEE", replaceDefaults(breakPayments.getTotalFee() + "0"));
						for (Map.Entry<String, Double> entry : breakPayments.getBreakup().entrySet()) {
							setTrBreakups.put(entry.getKey(), entry.getValue());
						}

					} else if (breakPayments.getFeeType().equalsIgnoreCase(FeeTypeDetails.HPAFEE)) {
						parameters.put("HPA FEE", replaceDefaults(breakPayments.getTotalFee() + "0"));
						for (Map.Entry<String, Double> entry : breakPayments.getBreakup().entrySet()) {
							setHpaBreakups.put(entry.getKey(), entry.getValue());
						}

					} else if (breakPayments.getFeeType().equalsIgnoreCase(FeeTypeDetails.FRESH)) {
						parameters.put("PRfee", replaceDefaults(breakPayments.getTotalFee() + "0"));
						for (Map.Entry<String, Double> entry : breakPayments.getBreakup().entrySet()) {
							setPrBreakups.put(entry.getKey(), entry.getValue());
						}
					} else if (breakPayments.getFeeType().equalsIgnoreCase(FeeTypeDetails.NEW)) {
						parameters.put("FcFee", replaceDefaults(breakPayments.getTotalFee() + "0"));
						for (Map.Entry<String, Double> entry : breakPayments.getBreakup().entrySet()) {
							setFCBreakups.put(entry.getKey(), entry.getValue());
						}
					}
				}

			}
		}
		// TR Fee
		parameters.put("TRAPPFEE", notAplicable);
		parameters.put("TRSERVICEFEE", notAplicable);
		// PR Fee
		parameters.put("hsrpFee", notAplicable);
		parameters.put("SERVICEFEE", notAplicable);
		parameters.put("APPLFEE", notAplicable);
		parameters.put("POSTALFEE", notAplicable);
		parameters.put("CARDFEE", notAplicable);

		parameters.put("CESSFEE", notAplicable);

		if (setTrBreakups != null) {
			for (Map.Entry<String, Double> entry : setTrBreakups.entrySet()) {
				if (entry.getKey().equalsIgnoreCase("Application")) {
					parameters.put("TRAPPFEE", entry.getValue().toString() + "0");
				} else if (entry.getKey().equalsIgnoreCase("Service Fee")) {
					parameters.put("TRSERVICEFEE", entry.getValue().toString() + "0");
				}
			}
		}

		if (setPrBreakups != null) {
			for (Map.Entry<String, Double> entry : setPrBreakups.entrySet()) {
				if (entry.getKey().equalsIgnoreCase("HSRP FEE")) {
					parameters.put("hsrpFee", entry.getValue().toString() + "0");
				} else if (entry.getKey().equalsIgnoreCase("Service Fee")) {
					parameters.put("SERVICEFEE", entry.getValue().toString() + "0");
				} else if (entry.getKey().equalsIgnoreCase("Application")) {
					parameters.put("APPLFEE", entry.getValue().toString() + "0");
				} else if (entry.getKey().equalsIgnoreCase("Postal")) {
					parameters.put("POSTALFEE", entry.getValue().toString() + "0");
				} else if (entry.getKey().equalsIgnoreCase("Card")) {
					parameters.put("CARDFEE", entry.getValue().toString() + "0");
				}
			}
		}

		parameters.put("VEH_REG_AT", "");
		StringBuilder vehRegAt = new StringBuilder();
		if (resultData.get().getOfficeDetails() != null) {
			vehRegAt.append(resultData.get().getOfficeDetails().getOfficeName()).append("-")
					.append(resultData.get().getOfficeDetails().getOfficeCode());
		}
		parameters.put("VEH_REG_AT", replaceDefaults(vehRegAt));

		parameters.put("VALID FROM", StringUtils.EMPTY);
		if (resultData.get().getTrGeneratedDate() != null) {
			parameters.put("VALID FROM",
					replaceDefaults((resultData.get().getTrGeneratedDate() == null) ? StringUtils.EMPTY
							: resultData.get().getTrGeneratedDate().format(formatter)));
		}
		parameters.put("VALID UPTO", StringUtils.EMPTY);
		if (resultData.get().getRegistrationValidity() != null) {
			parameters.put("VALID UPTO",
					replaceDefaults(
							(resultData.get().getRegistrationValidity().getTrValidity() == null) ? StringUtils.EMPTY
									: resultData.get().getRegistrationValidity().getTrValidity().format(formatter)));
		}
		parameters.put("TRANSACTION NO", "");
		if (paymentTransactionDTO != null) {
			if (paymentTransactionDTO.getTransactioNo() != null) {
				parameters.put("TRANSACTION NO",
						replaceDefaults(paymentTransactionDTO.getTransactioNo() == null ? StringUtils.EMPTY
								: paymentTransactionDTO.getTransactioNo()));
			}
		}
		parameters.put("TAX PAID", "");
		List<TaxDetailsDTO> taxDetailsDTOList = taxDetailsDAO
				.findFirst10ByApplicationNoOrderByCreatedDateDesc(registrationDetailsVO.getApplicationNo());
		if (!taxDetailsDTOList.isEmpty()) {
			taxDetailDTO = taxDetailsDTOList.stream().findFirst().get();
			;
			parameters.put("TAX PAID", replaceDefaults(
					taxDetailDTO.getTaxAmount() == null ? StringUtils.EMPTY : taxDetailDTO.getTaxAmount()));
			if (taxDetailDTO.getCessFee() != null) {
				parameters.put("CESSFEE", taxDetailDTO.getCessFee().toString());
			}
			taxDetailsDTOList.clear();
		}

		parameters.put("REG DATE", StringUtils.EMPTY);
		parameters.put("REG DATE",
				replaceDefaults(resultData.get().getTrGeneratedDate() != null
						? resultData.get().getTrGeneratedDate().format(formatter)
						: ""));

		String vehRegAddress = StringUtils.EMPTY;

		parameters.put("ADDRSS", "NONE");
		parameters.put("HYPO", "NONE");
		MasterUsersDTO masterUsersDTO = null;
		if (registrationDetailsVO.getFinanceDetails() != null) {
			masterUsersDTO = masterUsersDAO.findByUserId(registrationDetailsVO.getFinanceDetails().getUserId());
			if (masterUsersDTO != null) {
				vehRegAddress = replaceDefaults(
						(null == masterUsersDTO.getDoorNo() || masterUsersDTO.getDoorNo().isEmpty()) ? StringUtils.EMPTY
								: masterUsersDTO.getDoorNo())
						+ ","
						+ replaceDefaults(
								(null == masterUsersDTO.getStreetName() || masterUsersDTO.getStreetName().isEmpty())
										? StringUtils.EMPTY
										: masterUsersDTO.getStreetName().toUpperCase())
						+ ","
						+ replaceDefaults((masterUsersDTO.getMandal() == null
								|| masterUsersDTO.getMandal().getMandalName() == null) ? StringUtils.EMPTY
										: masterUsersDTO.getMandal().getMandalName().toUpperCase())
						+ "\n" + replaceDefaults(masterUsersDTO.getState() == null ? StringUtils.EMPTY
								: masterUsersDTO.getState().getStateName().toUpperCase());
				parameters.put("ADDRSS", (vehRegAddress.toString() == null ? "N/A" : vehRegAddress.toString()));
				parameters.put("HYPO",
						masterUsersDTO.getFirstName() == null ? "NONE" : masterUsersDTO.getFirstName().toUpperCase());

			}
		}
		String dealerRegAddress = StringUtils.EMPTY;
		parameters.put("DNAME", StringUtils.EMPTY);
		parameters.put("DADDRESS", StringUtils.EMPTY);
		MasterUsersDTO masterUsersDTOdealer = null;
		if (registrationDetailsVO.getDealerDetails() != null) {
			masterUsersDTOdealer = masterUsersDAO.findByUserId(registrationDetailsVO.getDealerDetails().getDealerId());
			if (masterUsersDTOdealer != null) {
				dealerRegAddress = replaceDefaults(
						(null == masterUsersDTOdealer.getDoorNo() || masterUsersDTOdealer.getDoorNo().isEmpty())
								? StringUtils.EMPTY
								: masterUsersDTOdealer.getDoorNo())
						+ ","
						+ replaceDefaults((null == masterUsersDTOdealer.getStreetName()
								|| masterUsersDTOdealer.getStreetName().isEmpty()) ? StringUtils.EMPTY
										: masterUsersDTOdealer.getStreetName())
						+ "\n"
						+ replaceDefaults(masterUsersDTOdealer.getMandal() == null ? StringUtils.EMPTY
								: masterUsersDTOdealer.getMandal().getMandalName())
						+ "," + replaceDefaults(masterUsersDTOdealer.getState() == null ? StringUtils.EMPTY
								: masterUsersDTOdealer.getState().getStateName());
				parameters.put("DADDRESS", dealerRegAddress.toString().replace(",", StringUtils.EMPTY));
				if (masterUsersDTOdealer.getFirstName() != null) {
					parameters.put("DNAME", replaceDefaults(masterUsersDTOdealer.getFirstName().toUpperCase()));
				}

			}
		}

		parameters.put("FDATE", "NA");
		if (registrationDetailsVO != null && registrationDetailsVO.getFinanceDetails() != null
				&& registrationDetailsVO.getFinanceDetails().getLastUpdated() != null) {
			if (registrationDetailsVO.getFinanceDetails().getUserId() == "MIGUSER") {
				Optional<FinanceDetailsDTO> financeDetailsOptional = financeDetailsDAO
						.findByApplicationNo(applicationNo);
				if (financeDetailsOptional.isPresent()) {
					financeDetailsDTO = financeDetailsOptional.get();
				} else {
					logger.error("no record found for this financer");
					throw new BadRequestException("no record found for this financer");
				}
				parameters.put("FDATE", (financeDetailsDTO.getLastUpdated() == null ? "NONE"
						: financeDetailsDTO.getLastUpdated().format(formatter)));
			}
			parameters.put("FDATE", ((financeDetailsDTO == null || financeDetailsDTO.getLastUpdated() == null) ? "NONE"
					: financeDetailsDTO.getLastUpdated().format(formatter)));
		}
		parameters.put("IMAGE_SCAN", qrCode);
		parameters.put("IMAGE_DATE", LocalDate.now().format(formatter));

		parameters.put("INS_DET", StringUtils.EMPTY);
		parameters.put("INS_POLICY", StringUtils.EMPTY);
		parameters.put("INS_VALID", StringUtils.EMPTY);
		if (registrationDetailsVO.getInsuranceDetails() != null) {

			parameters.put("INS_DET",
					replaceDefaults(registrationDetailsVO.getInsuranceDetails().getCompany() == null ? StringUtils.EMPTY
							: registrationDetailsVO.getInsuranceDetails().getCompany()));

			parameters.put("INS_POLICY",
					replaceDefaults(
							registrationDetailsVO.getInsuranceDetails().getPolicyType() == null ? StringUtils.EMPTY
									: registrationDetailsVO.getInsuranceDetails().getPolicyType().toUpperCase()));

			parameters.put("INS_VALID",
					replaceDefaults(
							registrationDetailsVO.getInsuranceDetails().getValidTill() == null ? StringUtils.EMPTY
									: registrationDetailsVO.getInsuranceDetails().getValidTill().format(formatter)));
		}
		parameters.put("OFFICE_NAME", "");
		if (resultData.get().getOfficeDetails() != null) {
			parameters.put("OFFICE_NAME",
					replaceDefaults(resultData.get().getOfficeDetails().getOfficeName() == null ? StringUtils.EMPTY
							: resultData.get().getOfficeDetails().getOfficeName()));
		}

		parameters.put("NUMBERTYPE", StringUtils.EMPTY);
		if (resultData.get().getSpecialNumberRequired() != null && resultData.get().getSpecialNumberRequired()) {
			parameters.put("NUMBERTYPE", NumberType.SPECIAL_NUMBER);
		} else {
			parameters.put("NUMBERTYPE", NumberType.ORDINARY_NUMBER);
		}
		parameters.put("HSRPCODE", StringUtils.EMPTY);
		if (resultData.get().getOfficeDetails() != null) {
			parameters.put("HSRPCODE",
					replaceDefaults(resultData.get().getOfficeDetails().getHsrpOffice() == null ? StringUtils.EMPTY
							: resultData.get().getOfficeDetails().getHsrpOffice()));
		}
		parameters.put("SIGN", getLogo(ReportFiles.DIGITAL_SIGN));
		parameters.put("text1",
				"If you are not choosing a special number within 30 days, After 30 days an ordinary number will be automatically allotted.");
		parameters.put("text2",
				"If you want a special number please obtain the same within 30 days by participating in eBidding.");
		parameters.put("text3", "For eBidding click on https://aprtacitizen.epragathi.org/#!/specialnumbersselection");

		parameters.put("DATE", LocalDateTime.now().format(formatter));
		parameters.put("TIME", LocalDateTime.now().format(timeFormatter));
		return parameters;
	}

	/**
	 * Tax related service
	 */

	public Map<String, Object> getTaxDetails(String applicationNo) {

		Optional<RegistrationDetailsDTO> registrationDetails = registrationDetailDAO.findByApplicationNo(applicationNo);

		RegistrationDetailsVO registrationDetailsVO = null;
		if (registrationDetails.isPresent()) {
			registrationDetailsVO = registrationMapper.convertEntity(registrationDetails.get());
		}
		String PRESENT_ADDRESS = StringUtils.EMPTY;
		if (registrationDetailsVO.getApplicantDetails().getPresentAddress() != null) {

			PRESENT_ADDRESS = replaceDefaults(
					registrationDetailsVO.getApplicantDetails().getPresentAddress().getDoorNo()) + "\n"
					+ replaceDefaults(registrationDetailsVO.getApplicantDetails().getPresentAddress().getStreetName())
					+ ","
					+ replaceDefaults(registrationDetailsVO.getApplicantDetails().getPresentAddress().getTownOrCity())
					+ "\n"
					+ replaceDefaults(
							registrationDetailsVO.getApplicantDetails().getPresentAddress().getVillage() == null
									? StringUtils.EMPTY
									: registrationDetailsVO
											.getApplicantDetails().getPresentAddress().getVillage().getVillageName())
					+ ","
					+ replaceDefaults(
							(registrationDetailsVO.getApplicantDetails().getPresentAddress().getMandal() == null ? ""
									: registrationDetailsVO.getApplicantDetails().getPresentAddress().getMandal()
											.getMandalName())
									+ "\n"
									+ replaceDefaults((registrationDetailsVO.getApplicantDetails().getPresentAddress()
											.getDistrict() == null ? ""
													: registrationDetailsVO.getApplicantDetails().getPresentAddress()
															.getDistrict().getDistrictName())));

		}

		Map<String, Object> parameters = new HashMap<>();
		// Note : Do not change below key, it will be binded with Jasper.
		parameters.put("AP_LOGO", getLogo(ReportFiles.APLOGO));
		parameters.put("cov", replaceDefaults(registrationDetailsVO.getVahanDetails().getVehicleClass()));
		parameters.put("parentName", replaceDefaults(registrationDetailsVO.getApplicantDetails().getFatherName()));
		parameters.put("presentAddress", PRESENT_ADDRESS);
		/*
		 * LocalDate formatDate = null;
		 * if(registrationDetailsVO.getVahanDetails().getRegistrationDate()!= null){
		 * formatDate = LocalDate.parse(registrationDetailsVO.getVahanDetails().
		 * getRegistrationDate(), formatter); }
		 */
		parameters.put("regDate", replaceDefaults(registrationDetailsVO.getVahanDetails().getRegistrationDate()));
		parameters.put("covs", replaceDefaults(registrationDetailsVO.getClassOfVehicle()));
		parameters.put("makersDesc", replaceDefaults(registrationDetailsVO.getVahanDetails().getMakersDesc()));
		parameters.put("bodyType", replaceDefaults(registrationDetailsVO.getVahanDetails().getBodyTypeDesc()));
		parameters.put("manufactureDate",
				replaceDefaults(registrationDetailsVO.getVahanDetails().getManufacturedMonthYear()));
		parameters.put("cylinders", replaceDefaults(registrationDetailsVO.getVahanDetails().getNoCyl()));
		parameters.put("chassisNumber", replaceDefaults(registrationDetailsVO.getVahanDetails().getChassisNumber()));
		parameters.put("engineNumber", replaceDefaults(registrationDetailsVO.getVahanDetails().getEngineNumber()));
		parameters.put("fuel", replaceDefaults(registrationDetailsVO.getVahanDetails().getFuelDesc()));
		parameters.put("horsePower", replaceDefaults(registrationDetailsVO.getVahanDetails().getEnginePower()));
		parameters.put("cubicCapacity", replaceDefaults(registrationDetailsVO.getVahanDetails().getCubicCapacity()));
		parameters.put("makers", replaceDefaults(registrationDetailsVO.getVahanDetails().getMakersModel()));
		parameters.put("wheel", replaceDefaults(registrationDetailsVO.getVahanDetails().getWheelbase()));
		parameters.put("seating", replaceDefaults(registrationDetailsVO.getVahanDetails().getSeatingCapacity()));
		parameters.put("weight", replaceDefaults(registrationDetailsVO.getVahanDetails().getUnladenWeight()));
		parameters.put("color", replaceDefaults(registrationDetailsVO.getVahanDetails().getColor()));
		parameters.put("TransactionType", replaceDefaults(""));
		parameters.put("transactionDate", replaceDefaults(""));
		parameters.put("fa", replaceDefaults(""));
		if (registrationDetailsVO.getUlw() != null) {
			parameters.put("fa", replaceDefaults(registrationDetailsVO.getUlw().toString()));
		}
		parameters.put("fa1", replaceDefaults(""));
		if (registrationDetailsVO.getRlw() != null) {
			parameters.put("fa1", replaceDefaults(registrationDetailsVO.getRlw().toString()));
		}
		parameters.put("grossweight", replaceDefaults(registrationDetailsVO.getVahanDetails().getGvw()));
		parameters.put("unladenWeight", replaceDefaults(registrationDetailsVO.getVahanDetails().getUnladenWeight()));
		parameters.put("regweight", replaceDefaults(""));
		parameters.put("rearAxle", replaceDefaults(registrationDetailsVO.getVahanDetails().getRearAxleWeight()));
		parameters.put("tax", replaceDefaults(registrationDetailsVO.getTaxAmount()));
		parameters.put("taxvalid", replaceDefaults(registrationDetailsVO.getVahanDetails().getTaxUpto()));
		parameters.put("sdate", replaceDefaults(""));
		parameters.put("adate", replaceDefaults(""));
		parameters.put("cvalid", replaceDefaults(""));
		parameters.put("aoa", replaceDefaults(""));
		parameters.put("reard", replaceDefaults(""));
		parameters.put("otherAxle", replaceDefaults(""));
		parameters.put("tanAxle", replaceDefaults(registrationDetailsVO.getVahanDetails().getTandemAxelWeight()));
		return parameters;

	}

	/**
	 * special number recepit related service
	 * 
	 * @param trNo
	 * @return
	 */
	public Map<String, Object> getSpecialNumDetails(String trNo) {
		SpecialNumberDetailsDTO specialNumberDetailsDTO = null;
		PaymentTransactionDTO paymentTransactionDTO = null;
		String value = null;
		String value1 = null;
		Optional<SpecialNumberDetailsDTO> resultData = specialNumberDetailsDAO
				.findByVehicleDetailsTrNumberOrderByCreatedDateDesc(trNo);
		if (resultData.isPresent()) {
			specialNumberDetailsDTO = resultData.get();
		}
		Optional<PaymentTransactionDTO> paymentsDtoOptional = paymentTransactionDAO
				.findTopByApplicationFormRefNumOrderByIdDesc(specialNumberDetailsDTO.getSpecialNumberAppId());
		if (paymentsDtoOptional.isPresent()) {
			paymentTransactionDTO = paymentsDtoOptional.get();
		}
		if (paymentTransactionDTO.getResponse() != null) {
			if (paymentTransactionDTO.getResponse().getResponseDeatils() != null) {
				String prefix = "PayUResponse [";
				String noPrefixResponseParts = paymentTransactionDTO.getResponse().getResponseDeatils().substring(
						paymentTransactionDTO.getResponse().getResponseDeatils().indexOf(prefix) + prefix.length());
				if (noPrefixResponseParts.contains(",")) {
					String[] keyValuePairs = noPrefixResponseParts.split(Pattern.quote(","));
					for (String pair : keyValuePairs) {
						String[] entry = pair.split(Pattern.quote("="));
						if (entry[0].trim().equalsIgnoreCase("mihpayid")) {
							value = entry[1].trim();
							break;
						}
					}
					for (String pair : keyValuePairs) {
						String[] entry = pair.split(Pattern.quote("="));
						if (entry[0].trim().equalsIgnoreCase("amount")) {
							value1 = entry[1].trim();
							break;
						}
					}
				}
			}
		}
		String OFFICE_DETAILS = StringUtils.EMPTY;
		if (specialNumberDetailsDTO != null) {
			OFFICE_DETAILS = replaceDefaults(
					specialNumberDetailsDTO.getVehicleDetails().getRtaOffice().getOfficeAddress1()) + "\n"
					+ replaceDefaults(specialNumberDetailsDTO.getVehicleDetails().getRtaOffice().getOfficeAddress2());
		}
		Map<String, Object> parameters = new HashMap<>();

		parameters.put("AP_LOGO", getLogo(ReportFiles.APLOGO));
		parameters.put("PAYU_LOGO", getLogo(ReportFiles.PAYU_LOGO));
		parameters.put("PAY_ID", replaceDefaults(""));
		parameters.put("PAY_ID", replaceDefaults(value));

		parameters.put("MERCHT_TRAN_ID", replaceDefaults(""));
		parameters.put("MERCHT_TRAN_ID", replaceDefaults(paymentTransactionDTO.getTransactioNo()));
		parameters.put("PAYU_CFEE", replaceDefaults(""));
		parameters.put("PAID_ON", replaceDefaults(""));
		parameters.put("PAID_ON",
				replaceDefaults(paymentTransactionDTO.getResponse().getResponseTime().format(formatter)));
		parameters.put("PAID_AMT", replaceDefaults(""));
		parameters.put("PAID_AMT", replaceDefaults(value1));
		parameters.put("AP_RTD", replaceDefaults(""));
		parameters.put("AP_RTD", replaceDefaults(OFFICE_DETAILS));

		return parameters;
	}

	public Map<String, Object> getFinanceSactionDetails(String applicationNo) {
		DateTimeFormatter formatter = DateTimeFormatter.ofPattern(DATEFORMAT);

		Optional<StagingRegistrationDetailsDTO> resultData = stagingRegistrationDetailsDAO
				.findByApplicationNo(applicationNo);
		RegistrationDetailsVO registrationDetailsVO = null;
		if (resultData.isPresent()) {
			registrationDetailsVO = regDetailsMapper.convertEntity(resultData.get());
		}
		/// dr
		String PRESENT_ADDRESS = StringUtils.EMPTY;
		if (null != registrationDetailsVO.getApplicantDetails()
				&& registrationDetailsVO.getApplicantDetails().getPresentAddress() != null) {
			String PRESENT_ADDRESS_VALUE = null;
			if (!registrationDetailsVO.getApplicantDetails().getPresentAddress().getOtherVillage()
					.equalsIgnoreCase("")) {

				PRESENT_ADDRESS_VALUE = registrationDetailsVO.getApplicantDetails().getPresentAddress()
						.getOtherVillage() == null ? StringUtils.EMPTY
								: registrationDetailsVO.getApplicantDetails().getPresentAddress().getOtherVillage()
										.toLowerCase();
			} else {
				PRESENT_ADDRESS_VALUE = registrationDetailsVO.getApplicantDetails().getPresentAddress().getVillage()
						.getVillageName() == null ? StringUtils.EMPTY
								: registrationDetailsVO.getApplicantDetails().getPresentAddress().getVillage()
										.getVillageName().toLowerCase();

			}

			PRESENT_ADDRESS = replaceDefaults(
					registrationDetailsVO.getApplicantDetails().getPresentAddress().getDoorNo())
					+ ","
					+ replaceDefaults(registrationDetailsVO.getApplicantDetails().getPresentAddress().getStreetName()
							.toLowerCase())
					+ "\n"
					+ replaceDefaults(registrationDetailsVO
							.getApplicantDetails().getPresentAddress().getTownOrCity().toLowerCase())
					+ "," + replaceDefaults(PRESENT_ADDRESS_VALUE) + ","
					+ replaceDefaults(
							((registrationDetailsVO.getApplicantDetails().getPresentAddress().getMandal() == null)
									|| null == registrationDetailsVO.getApplicantDetails().getPresentAddress()
											.getMandal().getMandalName())
													? ""
													: registrationDetailsVO.getApplicantDetails().getPresentAddress()
															.getMandal().getMandalName().toLowerCase())
					+ ","
					+ replaceDefaults(
							(registrationDetailsVO.getApplicantDetails().getPresentAddress().getDistrict() == null ? ""
									: registrationDetailsVO.getApplicantDetails().getPresentAddress().getDistrict()
											.getDistrictName().toLowerCase()))
					+ "," + "\n"
					+ replaceDefaults(
							(registrationDetailsVO.getApplicantDetails().getPresentAddress().getState() == null ? ""

									: registrationDetailsVO.getApplicantDetails().getPresentAddress()

											.getState().getStateName().toLowerCase()))
					+ ","
					+ replaceDefaults(
							(registrationDetailsVO.getApplicantDetails().getPresentAddress().getCountry() == null ? ""

									: registrationDetailsVO.getApplicantDetails().getPresentAddress()

											.getCountry().getCountryName().toLowerCase()))

					+ "\n"
					+ replaceDefaults(
							(registrationDetailsVO.getApplicantDetails().getPresentAddress().getPostOffice() == null
									? ""

									: registrationDetailsVO.getApplicantDetails().getPresentAddress()

											.getPostOffice().getPostOfficeCode()))
					+ ".";

		}
		String qrCode = StringUtils.EMPTY;
		try {
			qrCode = qRCodeService.sendPDF(getRegistrationQRCodeForFinance(registrationDetailsVO.getApplicationNo()));
			if (qrCode == null)
				qrCode = StringUtils.EMPTY;
		} catch (Exception e) {
			logger.debug(" Exception :[] ", e);
			logger.error(" Exception :[] ", e.getMessage());
		}
		Map<String, Object> parameters = new HashMap<>();

		parameters.put("otsilogo", getLogo(ReportFiles.OTSILOGO));
		String vehRegAddress = StringUtils.EMPTY;
		parameters.put("FINC_NAME", StringUtils.EMPTY);
		parameters.put("FINC_ADDRESS", vehRegAddress);
		if (registrationDetailsVO.getFinanceDetails() != null) {
			MasterUsersDTO masterUsersDTO = masterUsersDAO
					.findByUserId(registrationDetailsVO.getFinanceDetails().getUserId());
			if (masterUsersDTO != null) {
				vehRegAddress = replaceDefaults(masterUsersDTO.getFirstName() == null ? StringUtils.EMPTY
						: masterUsersDTO.getFirstName().toUpperCase())
						+ replaceDefaults(
								masterUsersDTO.getDoorNo() == null ? StringUtils.EMPTY : masterUsersDTO.getDoorNo())
						+ ","
						+ replaceDefaults(masterUsersDTO.getStreetName() == null ? StringUtils.EMPTY
								: masterUsersDTO.getStreetName())
						+ "\n"
						+ replaceDefaults((masterUsersDTO.getDistrict() == null
								|| masterUsersDTO.getDistrict().getDistrictName() == null) ? StringUtils.EMPTY
										: masterUsersDTO.getDistrict().getDistrictName())
						+ ","
						+ replaceDefaults(
								(masterUsersDTO.getState() == null || masterUsersDTO.getState().getStateName() == null)
										? StringUtils.EMPTY
										: masterUsersDTO.getState().getStateName())
						+ ","
						+ replaceDefaults((masterUsersDTO.getPincode() == null
								|| masterUsersDTO.getPincode().getPostOfficeName() == null) ? StringUtils.EMPTY
										: masterUsersDTO.getPincode().getPostOfficeName());
				parameters.put("FINC_ADDRESS", vehRegAddress.replace(",,", StringUtils.EMPTY));
				parameters.put("FINC_NAME",
						replaceDefaults(masterUsersDTO.getInstitutionName() == null ? StringUtils.EMPTY
								: masterUsersDTO.getInstitutionName().toUpperCase()));

			}
		}
		parameters.put("FINC_DATE", resultData.get().getFinanceDetails().getCreatedDate().format(formatter));
		parameters.put("APPL_NO", replaceDefaults((registrationDetailsVO.getApplicationNo() == null) ? StringUtils.EMPTY
				: registrationDetailsVO.getApplicationNo()));

		String fullName = StringUtils.EMPTY;
		if (registrationDetailsVO.getApplicantDetails().getFirstName() != null
				&& registrationDetailsVO.getApplicantDetails() != null) {
			fullName = registrationDetailsVO.getApplicantDetails().getFirstName() + " "
					+ (registrationDetailsVO.getApplicantDetails().getLastName() == null ? StringUtils.EMPTY
							: registrationDetailsVO.getApplicantDetails().getLastName());
		}
		parameters.put("OWNER_NAME", fullName);

		parameters.put("PRESENT_ADDRESS", PRESENT_ADDRESS);

		parameters.put("FATHER_NAME",
				replaceDefaults(registrationDetailsVO.getApplicantDetails().getFatherName()).isEmpty()
						? StringUtils.EMPTY
						: registrationDetailsVO.getApplicantDetails().getFatherName());

		parameters.put("TOKEN_NUM", StringUtils.EMPTY);
		if (registrationDetailsVO.getFinanceDetails() != null) {
			parameters.put("TOKEN_NUM",
					replaceDefaults(registrationDetailsVO.getFinanceDetails().getToken()).isEmpty() ? StringUtils.EMPTY
							: registrationDetailsVO.getFinanceDetails().getToken());
		}
		String covCode = registrationDetailsVO.getClassOfVehicle();
		MasterCovDTO masterCovDTO = masterCovDAO.findByCovcode(covCode);
		if (masterCovDTO != null) {
			parameters.put("COV", replaceDefaults(masterCovDTO.getCovdescription()).isEmpty() ? StringUtils.EMPTY
					: masterCovDTO.getCovdescription());
		}

		parameters.put("MAKERS_NAME",
				replaceDefaults(registrationDetailsVO.getVahanDetails().getMakersModel()).isEmpty() ? StringUtils.EMPTY
						: registrationDetailsVO.getVahanDetails().getMakersModel());
		parameters.put("MAKERS_CLASS",
				replaceDefaults(registrationDetailsVO.getVahanDetails().getMakersDesc()).isEmpty() ? StringUtils.EMPTY
						: registrationDetailsVO.getVahanDetails().getMakersDesc());

		parameters.put("CHASSIS_NUM",
				replaceDefaults(registrationDetailsVO.getVahanDetails().getChassisNumber()).isEmpty()
						? StringUtils.EMPTY
						: registrationDetailsVO.getVahanDetails().getChassisNumber());

		parameters.put("ENGINE_NUM",
				replaceDefaults(registrationDetailsVO.getVahanDetails().getEngineNumber()).isEmpty() ? StringUtils.EMPTY
						: registrationDetailsVO.getVahanDetails().getEngineNumber());
		parameters.put("SANC_AMT", StringUtils.EMPTY);
		parameters.put("SANC_DATE", StringUtils.EMPTY);
		if (registrationDetailsVO.getFinanceDetails() != null) {
			parameters.put("SANC_AMT",
					replaceDefaults(registrationDetailsVO.getFinanceDetails().getSanctionedAmount() + "0"));
			parameters.put("SANC_DATE",
					replaceDefaults(registrationDetailsVO.getFinanceDetails().getLastUpdated().format(formatter))
							.isEmpty() ? StringUtils.EMPTY
									: registrationDetailsVO.getFinanceDetails().getLastUpdated().format(formatter));
		}
		parameters.put("QR_SCAN", qrCode);
		return parameters;

	}

	/**
	 * CITIZEN SERVICES - CHANGE OF ADDRESS.....etc
	 * 
	 * @param trNo
	 * @return
	 */
	public Map<String, Object> getCoaDetails(String applicationNo) {
		RegServiceDTO regServiceDTO = null;
		PaymentTransactionDTO paymentTransactionDTO = null;
		FeeDetailsDTO feeDetailsDTO = null;
		Optional<RegServiceDTO> regServiceDTOOptional = registrationService.findByApplicationNo(applicationNo);
		if (regServiceDTOOptional.isPresent()) {
			regServiceDTO = regServiceDTOOptional.get();
		} else {
			logger.error("Record not Found");
			throw new BadRequestException("Record not Found");
		}
		Map<String, Object> parameters = new HashMap<>();
		List<ServiceEnum> serviceIds = regServiceDTO.getServiceIds().stream()
				.map(id -> ServiceEnum.getServiceEnumById(id)).collect(Collectors.toList());
		for (ServiceEnum serviceEnum : serviceIds) {
			if (serviceEnum != null) {
				parameters.put("SERVICETYPE", serviceEnum.toString());
			}
		}
		parameters.put("APPLICATIONNO", replaceDefaults(
				regServiceDTO.getApplicationNo() == null ? StringUtils.EMPTY : regServiceDTO.getApplicationNo()));
		parameters.put("APPLICATNAME",
				replaceDefaults((regServiceDTO.getRegistrationDetails() == null
						|| regServiceDTO.getRegistrationDetails().getApplicantDetails() == null
						|| regServiceDTO.getRegistrationDetails().getApplicantDetails().getFirstName() == null)
								? StringUtils.EMPTY
								: regServiceDTO.getRegistrationDetails().getApplicantDetails().getFirstName()));
		parameters.put("AADHARNO", replaceDefaults(
				regServiceDTO.getAadhaarNo() == null ? StringUtils.EMPTY : regServiceDTO.getAadhaarNo()));
		parameters.put("RCNO",
				replaceDefaults(regServiceDTO.getPrNo() == null ? StringUtils.EMPTY : regServiceDTO.getPrNo()));
		String qrCode = StringUtils.EMPTY;
		try {
			qrCode = qRCodeService.sendPDF(getRegistrationQRCodeForcoa(regServiceDTO.getApplicationNo()));
			if (qrCode == null)
				qrCode = StringUtils.EMPTY;
		} catch (Exception e) {
			logger.debug(" Exception :[] ", e);
			logger.error(" Exception :[] ", e.getMessage());
		}
		// fee details
		Optional<PaymentTransactionDTO> paymentsDtoOptional = paymentTransactionDAO
				.findTopByApplicationFormRefNumOrderByIdDesc(regServiceDTO.getApplicationNo());
		if (paymentsDtoOptional.isPresent()) {
			paymentTransactionDTO = paymentsDtoOptional.get();
		}
		if (paymentTransactionDTO != null) {
			feeDetailsDTO = paymentTransactionDTO.getFeeDetailsDTO();
			parameters.put("POSTALFEE", "");
			parameters.put("CARDFEE", "");
			parameters.put("SERVICEFEE", "");
			parameters.put("APPLFEE", "");
			parameters.put("TOTALAMT", "");
			if (feeDetailsDTO != null) {
				List<FeesDTO> feesDTOList = feeDetailsDTO.getFeeDetails();
				if (feesDTOList != null) {
					for (FeesDTO feesDTO : feesDTOList) {
						if (feesDTO != null) {
							if (feesDTO.getFeesType().equalsIgnoreCase(FeeTypeDetails.POSTALFEE)) {
								parameters.put("POSTALFEE", replaceDefaults(
										feesDTO.getAmount() == null ? StringUtils.EMPTY : feesDTO.getAmount()));
							} else if (feesDTO.getFeesType().equalsIgnoreCase(FeeTypeDetails.CARDFEE)) {
								parameters.put("CARDFEE", replaceDefaults(
										feesDTO.getAmount() == null ? StringUtils.EMPTY : feesDTO.getAmount()));
							} else if (feesDTO.getFeesType().equalsIgnoreCase(FeeTypeDetails.SERVICEFEE)) {
								parameters.put("SERVICEFEE", replaceDefaults(
										feesDTO.getAmount() == null ? StringUtils.EMPTY : feesDTO.getAmount()));
							} else if (feesDTO.getFeesType().equalsIgnoreCase(FeeTypeDetails.APPLICATIONFEE)) {
								parameters.put("APPLFEE", replaceDefaults(
										feesDTO.getAmount() == null ? StringUtils.EMPTY : feesDTO.getAmount()));
							}
						}
					}
				}
				parameters.put("TOTALAMT", replaceDefaults(
						feeDetailsDTO.getTotalFees() == null ? StringUtils.EMPTY : feeDetailsDTO.getTotalFees()));
			}
		}
		parameters.put("WATER_MARK", getLogo(ReportFiles.WATER_MARK));
		parameters.put("IMAGE_SCAN", qrCode);
		return parameters;
	}

	public Map<String, Object> getSpecialDetails(SPReportOfficeInput spReportOfficeInput) {
		LocalDateTime fromDate = spReportOfficeInput.getFromDate().atStartOfDay();
		LocalDateTime toDate = spReportOfficeInput.getToDate().atTime(LocalTime.MAX);
		List<SpecialNumberDetailsDTO> appList = new ArrayList();
		List<SpecialNumberDetailsDTO> dateList = new ArrayList();
		List<SpecialNumberDetailsDTO> statusList = new ArrayList();

		List<SpecialNumberDetailsDTO> specialNumberDetailsDtoList = specialNumberDetailsDAO
				.findByVehicleDetailsRtaOfficeOfficeCodeAndActionsDetailsLogActionAndCreatedDateBetween(
						spReportOfficeInput.getOfficeCode(), BidStatus.BIDWIN.getDescription(), fromDate, toDate);
		// APPLNAME,DATE,STATUS
		Map<String, Object> parameters = new HashMap<>();
		parameters.put("APPLNAME", "");
		parameters.put("DATE", "");
		parameters.put("STATUS", "");
		if (specialNumberDetailsDtoList != null) {
			for (SpecialNumberDetailsDTO specialNumberDetailsDTO : specialNumberDetailsDtoList) {
				specialNumberDetailsDTO.getSpecialNumberAppId();
				appList.add(specialNumberDetailsDTO);
			}
			parameters.put("APPLNAME", appList);
			for (SpecialNumberDetailsDTO specialNumberDetailsDTO : specialNumberDetailsDtoList) {
				specialNumberDetailsDTO.getCreatedDate().format(formatter);
				dateList.add(specialNumberDetailsDTO);
			}
			parameters.put("DATE", dateList);
			for (SpecialNumberDetailsDTO specialNumberDetailsDTO : specialNumberDetailsDtoList) {
				specialNumberDetailsDTO.getBidStatus().getDescription();
				statusList.add(specialNumberDetailsDTO);
			}
			parameters.put("STATUS", statusList);
		}
		return parameters;
	}

	/**
	 * transport related form
	 */

	public Map<String, Object> getTransportDetails(String applicationNo) {

		RegistrationDetailsDTO registrationDetailsDTO = null;
		List<TrailerChassisDetailsDTO> trailerChassisDetailsDTOList = null;
		FinanceDetailsDTO financeDetailsDTO = null;
		Optional<RegistrationDetailsDTO> registrationDetails = registrationDetailDAO.findByApplicationNo(applicationNo);
		if (registrationDetails.isPresent()) {
			registrationDetailsDTO = registrationDetails.get();
		} else {
			logger.error("Record not found");
			throw new BadRequestException("Record not found");
		}
		if (registrationDetailsDTO.isVehicleStoppaged()) {
			logger.error("vehicle stoppage found");
			throw new BadRequestException("vehicle stoppage found");
		}
		String PRESENT_ADDRESS = StringUtils.EMPTY;
		if (registrationDetailsDTO.getApplicantDetails() != null
				&& registrationDetailsDTO.getApplicantDetails().getPresentAddress() != null) {
			String PRESENT_ADDRESS_VALUE = null;
			if (registrationDetailsDTO.getApplicantDetails().getPresentAddress().getOtherVillage() == null
					|| (!registrationDetailsDTO.getApplicantDetails().getPresentAddress().getOtherVillage()
							.equalsIgnoreCase("")
							&& registrationDetailsDTO.getApplicantDetails().getPresentAddress()
									.getOtherVillage() != null)) {

				PRESENT_ADDRESS_VALUE = registrationDetailsDTO.getApplicantDetails().getPresentAddress()
						.getOtherVillage() == null ? StringUtils.EMPTY
								: registrationDetailsDTO.getApplicantDetails().getPresentAddress().getOtherVillage()
										.toUpperCase();
			} else {
				PRESENT_ADDRESS_VALUE = registrationDetailsDTO.getApplicantDetails().getPresentAddress().getVillage()
						.getVillageName() == null ? StringUtils.EMPTY
								: registrationDetailsDTO.getApplicantDetails().getPresentAddress().getVillage()
										.getVillageName().toUpperCase();

			}

			PRESENT_ADDRESS = replaceDefaults(
					registrationDetailsDTO.getApplicantDetails().getPresentAddress().getDoorNo() == null
							? StringUtils.EMPTY
							: registrationDetailsDTO.getApplicantDetails().getPresentAddress().getDoorNo())
					+ "\n"
					+ replaceDefaults(
							registrationDetailsDTO.getApplicantDetails().getPresentAddress().getStreetName() == null
									? StringUtils.EMPTY
									: registrationDetailsDTO
											.getApplicantDetails().getPresentAddress().getStreetName().toUpperCase())
					+ ","
					+ replaceDefaults((registrationDetailsDTO.getApplicantDetails().getPresentAddress() == null
							|| registrationDetailsDTO.getApplicantDetails().getPresentAddress().getTownOrCity() == null)
									? StringUtils.EMPTY
									: registrationDetailsDTO
											.getApplicantDetails().getPresentAddress().getTownOrCity().toUpperCase())
					+ "\n" + replaceDefaults(PRESENT_ADDRESS_VALUE) + ","
					+ replaceDefaults(
							((registrationDetailsDTO.getApplicantDetails().getPresentAddress().getMandal() == null
									|| registrationDetailsDTO.getApplicantDetails().getPresentAddress().getMandal()
											.getMandalName() == null)
													? ""
													: registrationDetailsDTO.getApplicantDetails().getPresentAddress()
															.getMandal().getMandalName().toUpperCase())
									+ ","
									+ replaceDefaults(((registrationDetailsDTO.getApplicantDetails().getPresentAddress()
											.getDistrict() == null
											|| registrationDetailsDTO.getApplicantDetails().getPresentAddress()
													.getDistrict().getDistrictName() == null)
															? ""
															: registrationDetailsDTO
																	.getApplicantDetails().getPresentAddress()
																	.getDistrict().getDistrictName().toUpperCase()))
									+ "\n"
									+ replaceDefaults(
											((registrationDetailsDTO.getApplicantDetails().getPresentAddress()
													.getState() == null
													|| registrationDetailsDTO.getApplicantDetails().getPresentAddress()
															.getState().getStateName() == null)
																	? ""
																	: registrationDetailsDTO
																			.getApplicantDetails().getPresentAddress()
																			.getState().getStateName().toUpperCase()))
									+ "\n"
									+ replaceDefaults((registrationDetailsDTO.getApplicantDetails().getPresentAddress()
											.getPostOffice() == null ? ""
													: registrationDetailsDTO.getApplicantDetails().getPresentAddress()
															.getPostOffice().getPostOfficeCode())));

		}
		String qrCode = StringUtils.EMPTY;
		try {
			qrCode = qRCodeService
					.sendPDF(getRegistrationQRCodeForTransport(registrationDetailsDTO.getApplicationNo()));
			if (qrCode == null)
				qrCode = StringUtils.EMPTY;
		} catch (Exception e) {
			logger.debug(" Exception :[] ", e);
			logger.error(" Exception :[] ", e.getMessage());
		}
		if (registrationDetailsDTO.getClassOfVehicle() != null) {
			if (registrationDetailsDTO.getClassOfVehicle().equalsIgnoreCase(ClassOfVehicleEnum.ARVT.getCovCode())) {
				trailerChassisDetailsDTOList = registrationDetailsDTO.getVahanDetails().getTrailerChassisDetailsDTO();
			}
		}
		Map<String, Object> parameters = new HashMap<>();
		// Note : Do not change below key, it will be binded with Jasper.
		// basic info details
		parameters.put("AP_LOGO", getLogo(ReportFiles.APLOGO));
		parameters.put("WATER_MARK", getLogo(ReportFiles.WATER_MARK));
		parameters.put("otsilogo", getLogo(ReportFiles.OTSILOGO));
		parameters.put("digital_sign", getLogo(ReportFiles.DIGITAL_SIGN));
		parameters.put("IMAGE_SCAN", qrCode);
		parameters.put("mobile_Num",
				replaceDefaults((registrationDetailsDTO.getApplicantDetails() == null
						|| registrationDetailsDTO.getApplicantDetails().getContact() == null
						|| registrationDetailsDTO.getApplicantDetails().getContact().getMobile() == null)
								? StringUtils.EMPTY
								: registrationDetailsDTO.getApplicantDetails().getContact().getMobile()));
		parameters.put("regNumber", replaceDefaults(
				(registrationDetailsDTO.getPrNo() == null) ? StringUtils.EMPTY : registrationDetailsDTO.getPrNo()));
		if (registrationDetailsDTO.getOwnerType() != null && registrationDetailsDTO.getOwnerType().getCode() != null
				&& registrationDetailsDTO.getOwnerType().getCode().equals(OwnerTypeEnum.Individual.getCode())
				&& registrationDetailsDTO.getServiceIds() != null
				&& !registrationDetailsDTO.getServiceIds().contains(ServiceEnum.RCFORFINANCE.getId())) {
			parameters.put("parentName",
					replaceDefaults((registrationDetailsDTO.getApplicantDetails() == null
							|| registrationDetailsDTO.getApplicantDetails().getFatherName() == null) ? StringUtils.EMPTY
									: registrationDetailsDTO.getApplicantDetails().getFatherName().toUpperCase()));
		} else if (registrationDetailsDTO.getOwnerType() != null
				&& registrationDetailsDTO.getOwnerType().getCode() != null
				&& registrationDetailsDTO.getOwnerType().getCode().equals(OwnerTypeEnum.Individual.getCode())) {
			parameters.put("parentName",
					replaceDefaults((registrationDetailsDTO.getApplicantDetails() == null
							|| registrationDetailsDTO.getApplicantDetails().getFatherName() == null) ? StringUtils.EMPTY
									: registrationDetailsDTO.getApplicantDetails().getFatherName().toUpperCase()));
		} else {
			parameters.put("parentName",
					replaceDefaults((registrationDetailsDTO.getApplicantDetails() == null
							|| registrationDetailsDTO.getApplicantDetails().getRepresentativeName() == null)
									? StringUtils.EMPTY
									: registrationDetailsDTO.getApplicantDetails().getRepresentativeName()
											.toUpperCase()));
		}
		parameters.put("covs", "");

		if (ClassOfVehicleEnum.GCRT.getCovCode().equalsIgnoreCase(registrationDetailsDTO.getClassOfVehicle())) {
			if (registrationDetailsDTO.getClassOfVehicleDesc() != null) {
				String weightDetails = covService
						.getWeightTypeDetails(registrationDetailsDTO.getVahanDetails().getGvw());
				parameters.put("covs",
						replaceDefaults(registrationDetailsDTO.getClassOfVehicleDesc() == null ? StringUtils.EMPTY
								: registrationDetailsDTO.getClassOfVehicleDesc().toUpperCase() + "-" + weightDetails));
			} else {
				String weightDetails = covService
						.getWeightTypeDetails(registrationDetailsDTO.getVahanDetails().getGvw());
				MasterCovDTO masterCovDTO = masterCovDAO.findByCovcode(registrationDetailsDTO.getClassOfVehicle());
				if (masterCovDTO != null) {
					parameters.put("covs", replaceDefaults(masterCovDTO.getCovdescription() == null ? StringUtils.EMPTY
							: masterCovDTO.getCovdescription().toUpperCase() + "-" + weightDetails));
				}
			}
		} else {
			parameters.put("covs",
					replaceDefaults(registrationDetailsDTO.getClassOfVehicleDesc() == null ? StringUtils.EMPTY
							: registrationDetailsDTO.getClassOfVehicleDesc().toUpperCase()));
		}
		if (registrationDetailsDTO.getOwnerType() != null
				&& registrationDetailsDTO.getOwnerType().getCode().equals(OwnerTypeEnum.Individual.getCode())
				&& registrationDetailsDTO.getServiceIds() != null
				&& !registrationDetailsDTO.getServiceIds().contains(ServiceEnum.RCFORFINANCE.getId())) {
			String fullName = StringUtils.EMPTY;
			if (registrationDetailsDTO.getApplicantDetails().getFirstName() != null
					&& registrationDetailsDTO.getApplicantDetails() != null) {
				fullName = registrationDetailsDTO.getApplicantDetails().getFirstName() + " "
						+ (registrationDetailsDTO.getApplicantDetails().getLastName() == null ? StringUtils.EMPTY
								: registrationDetailsDTO.getApplicantDetails().getLastName());
			}
			parameters.put("regOwner", fullName.toUpperCase());
		} else if ((registrationDetailsDTO.getOwnerType() != null
				&& registrationDetailsDTO.getOwnerType().getCode().equals(OwnerTypeEnum.Individual.getCode()))) {
			String fullName = StringUtils.EMPTY;
			if (registrationDetailsDTO.getApplicantDetails().getFirstName() != null
					&& registrationDetailsDTO.getApplicantDetails() != null) {
				fullName = registrationDetailsDTO.getApplicantDetails().getFirstName() + " "
						+ (registrationDetailsDTO.getApplicantDetails().getLastName() == null ? StringUtils.EMPTY
								: registrationDetailsDTO.getApplicantDetails().getLastName());
			}
			parameters.put("regOwner", fullName.toUpperCase());
		} else {

			parameters.put("regOwner",
					replaceDefaults(
							registrationDetailsDTO.getApplicantDetails().getEntityName() == null ? StringUtils.EMPTY
									: registrationDetailsDTO.getApplicantDetails().getEntityName().toUpperCase()));
		}
		parameters.put("owner_type", StringUtils.EMPTY);
		if (registrationDetailsDTO.getOwnerType() != null) {
			parameters.put("owner_type",
					replaceDefaults((registrationDetailsDTO.getOwnerType().name() == null
							|| registrationDetailsDTO.getOwnerType() == null) ? StringUtils.EMPTY
									: registrationDetailsDTO.getOwnerType().name().toUpperCase()));
		}
		parameters.put("IN_AMT", StringUtils.EMPTY);
		if (registrationDetailsDTO.getInvoiceDetails() != null) {
			parameters.put("IN_AMT",
					replaceDefaults(
							(registrationDetailsDTO.getInvoiceDetails().getInvoiceValue() == null) ? StringUtils.EMPTY
									: registrationDetailsDTO.getInvoiceDetails().getInvoiceValue().longValue() + ".0"));
		}
		parameters.put("presentAddress", PRESENT_ADDRESS);

		parameters.put("regDate",
				replaceDefaults(registrationDetailsDTO.getPrGeneratedDate() == null ? StringUtils.EMPTY
						: registrationDetailsDTO.getPrGeneratedDate().format(formatter)));

		// vahan related details
		parameters.put("makersDesc",
				replaceDefaults((registrationDetailsDTO.getVahanDetails() == null
						|| registrationDetailsDTO.getVahanDetails().getMakersDesc() == null) ? StringUtils.EMPTY
								: registrationDetailsDTO.getVahanDetails().getMakersDesc().toUpperCase()));
		parameters.put("bodyType",
				replaceDefaults((registrationDetailsDTO.getVahanDetails() == null
						|| registrationDetailsDTO.getVahanDetails().getBodyTypeDesc() == null) ? "NA"
								: registrationDetailsDTO.getVahanDetails().getBodyTypeDesc().toUpperCase()));

		if (registrationDetailsDTO.getVahanDetails().getManufacturedMonthYear() != null
				&& registrationDetailsDTO.getVahanDetails().getManufacturedMonthYear().length() < 6
				&& (registrationDetailsDTO.getSource() != null
						&& (registrationDetailsDTO.getSource().equalsIgnoreCase(SourceEnum.CFST0.getDesc())
								|| registrationDetailsDTO.getSource().equalsIgnoreCase(SourceEnum.CFST1.getDesc())))) {
			String[] dateSplited = registrationDetailsDTO.getVahanDetails().getManufacturedMonthYear().split("-");
			String manufacturdate = dateSplited[1] + dateSplited[0];
			parameters.put("manufactureDate",
					replaceDefaults((registrationDetailsDTO.getVahanDetails() == null
							|| registrationDetailsDTO.getVahanDetails().getManufacturedMonthYear() == null)
									? StringUtils.EMPTY
									: manufacturdate));
		} else {
			parameters.put("manufactureDate",
					replaceDefaults((registrationDetailsDTO.getVahanDetails() == null
							|| registrationDetailsDTO.getVahanDetails().getManufacturedMonthYear() == null)
									? StringUtils.EMPTY
									: registrationDetailsDTO.getVahanDetails().getManufacturedMonthYear()));
		}

		parameters.put("cylinders",
				replaceDefaults(registrationDetailsDTO.getVahanDetails() == null
						|| registrationDetailsDTO.getVahanDetails().getNoCyl() == null ? "NA"
								: registrationDetailsDTO.getVahanDetails().getNoCyl()));
		parameters.put("horsePower",
				replaceDefaults(registrationDetailsDTO.getVahanDetails() == null
						|| registrationDetailsDTO.getVahanDetails().getEnginePower() == null ? "NA"
								: registrationDetailsDTO.getVahanDetails().getEnginePower()));

		parameters.put("cubicCapacity",
				replaceDefaults(registrationDetailsDTO.getVahanDetails() == null
						|| registrationDetailsDTO.getVahanDetails().getCubicCapacity() == null ? "NA"
								: registrationDetailsDTO.getVahanDetails().getCubicCapacity()));
		parameters.put("wheel",
				replaceDefaults((registrationDetailsDTO.getVahanDetails().getWheelbase() == null
						|| registrationDetailsDTO.getVahanDetails() == null) ? "NA"
								: registrationDetailsDTO.getVahanDetails().getWheelbase()));
		parameters.put("chassisNumber",
				replaceDefaults((registrationDetailsDTO.getVahanDetails().getChassisNumber() == null
						|| registrationDetailsDTO.getVahanDetails() == null) ? StringUtils.EMPTY
								: registrationDetailsDTO.getVahanDetails().getChassisNumber()));
		parameters.put("engineNumber",
				replaceDefaults((registrationDetailsDTO.getVahanDetails() == null
						|| registrationDetailsDTO.getVahanDetails().getEngineNumber() == null) ? StringUtils.EMPTY
								: registrationDetailsDTO.getVahanDetails().getEngineNumber()));
		parameters.put("seating",
				replaceDefaults((registrationDetailsDTO.getVahanDetails() == null
						|| registrationDetailsDTO.getVahanDetails().getSeatingCapacity() == null) ? "NA"
								: registrationDetailsDTO.getVahanDetails().getSeatingCapacity()));
		parameters.put("fuel",
				replaceDefaults((registrationDetailsDTO.getVahanDetails() == null
						|| registrationDetailsDTO.getVahanDetails().getFuelDesc() == null) ? "NA"
								: registrationDetailsDTO.getVahanDetails().getFuelDesc().toUpperCase()));
		parameters.put("weight",
				replaceDefaults((registrationDetailsDTO.getVahanDetails() == null
						|| registrationDetailsDTO.getVahanDetails().getUnladenWeight() == null) ? StringUtils.EMPTY
								: registrationDetailsDTO.getVahanDetails().getUnladenWeight())
						+ " Kgs");
		parameters.put("color",
				replaceDefaults((registrationDetailsDTO.getVahanDetails() == null
						|| registrationDetailsDTO.getVahanDetails().getColor() == null) ? StringUtils.EMPTY
								: registrationDetailsDTO.getVahanDetails().getColor().toUpperCase()));
		parameters.put("makers",
				replaceDefaults((registrationDetailsDTO.getVahanDetails() == null
						|| registrationDetailsDTO.getVahanDetails().getMakersModel() == null) ? StringUtils.EMPTY
								: registrationDetailsDTO.getVahanDetails().getMakersModel().toUpperCase()));
		parameters.put("grossweight",
				replaceDefaults((registrationDetailsDTO.getVahanDetails() == null
						|| registrationDetailsDTO.getVahanDetails().getGvw() == null) ? StringUtils.EMPTY
								: registrationDetailsDTO.getVahanDetails().getGvw())
						+ " Kgs");
		parameters.put("fa",
				replaceDefaults((registrationDetailsDTO.getVahanDetails() == null
						|| registrationDetailsDTO.getVahanDetails().getFrontAxleDesc() == null) ? "NA"
								: registrationDetailsDTO.getVahanDetails().getFrontAxleDesc()));
		parameters.put("ra",
				replaceDefaults((registrationDetailsDTO.getVahanDetails() == null
						|| registrationDetailsDTO.getVahanDetails().getRearAxleDesc() == null) ? "NA"
								: registrationDetailsDTO.getVahanDetails().getRearAxleDesc()));
		parameters.put("aox",
				replaceDefaults((registrationDetailsDTO.getVahanDetails() == null
						|| registrationDetailsDTO.getVahanDetails().getO1AxleDesc() == null) ? "NA"
								: registrationDetailsDTO.getVahanDetails().getO1AxleDesc()));
		parameters.put("tandaxle",
				replaceDefaults((registrationDetailsDTO.getVahanDetails() == null
						|| registrationDetailsDTO.getVahanDetails().getTandemAxelDescp() == null) ? "NA"
								: registrationDetailsDTO.getVahanDetails().getTandemAxelDescp()));
		parameters.put("regweight",
				replaceDefaults((registrationDetailsDTO.getVahanDetails() == null
						|| registrationDetailsDTO.getVahanDetails().getFrontAxleWeight() == null) ? StringUtils.EMPTY
								: registrationDetailsDTO.getVahanDetails().getFrontAxleWeight())
						+ " Kgs");
		parameters.put("rearAxle",
				replaceDefaults((registrationDetailsDTO.getVahanDetails() == null
						|| registrationDetailsDTO.getVahanDetails().getRearAxleDesc() == null) ? StringUtils.EMPTY
								: registrationDetailsDTO.getVahanDetails().getRearAxleWeight())
						+ " Kgs");
		parameters.put("otherAxle",
				replaceDefaults((registrationDetailsDTO.getVahanDetails() == null
						|| registrationDetailsDTO.getVahanDetails().getO1AxleWeight() == null) ? StringUtils.EMPTY
								: registrationDetailsDTO.getVahanDetails().getO1AxleWeight())
						+ " Kgs");
		parameters.put("tanAxle",
				replaceDefaults((registrationDetailsDTO.getVahanDetails() == null
						|| registrationDetailsDTO.getVahanDetails().getTandemAxelWeight() == null) ? StringUtils.EMPTY
								: registrationDetailsDTO.getVahanDetails().getTandemAxelWeight())
						+ " Kgs");
		List<String> taxTypeList = new ArrayList<>();
		taxTypeList.add(TaxTypeEnum.LifeTax.getDesc());
		taxTypeList.add(TaxTypeEnum.QuarterlyTax.getDesc());
		taxTypeList.add(TaxTypeEnum.HalfyearlyTax.getDesc());
		taxTypeList.add(TaxTypeEnum.YearlyTax.getDesc());

		List<TaxDetailsDTO> listOfPaidTax = taxDetailsDAO
				.findFirst10ByApplicationNoAndPaymentPeriodInOrderByCreatedDateDesc(
						registrationDetailsDTO.getApplicationNo(), taxTypeList);

		parameters.put("tax", StringUtils.EMPTY);
		parameters.put("taxvalid", StringUtils.EMPTY);
		TaxDetailsDTO taxDetailsDto = null;
		Long amount = 0l;
		Long secondVehicleAmount = 0l;
		if (CollectionUtils.isNotEmpty(listOfPaidTax)) {
			registrationService.updatePaidDateAsCreatedDate(listOfPaidTax);
			listOfPaidTax.sort((p1, p2) -> p2.getCreatedDate().compareTo(p1.getCreatedDate()));
			parameters.put("tax", StringUtils.EMPTY);
			parameters.put("taxvalid", StringUtils.EMPTY);
			if (listOfPaidTax.stream().findFirst().isPresent() && listOfPaidTax.stream().findFirst().get() != null) {
				// taxDetailsDto = listOfPaidTax.stream().findFirst().get();
				for (TaxDetailsDTO taxDetailsForFirstPay : listOfPaidTax) {
					if (taxTypeList.stream()
							.anyMatch(id -> id.equalsIgnoreCase(taxDetailsForFirstPay.getPaymentPeriod()))) {
						if (taxDetailsForFirstPay.getTaxAmount() != null) {
							amount = amount + taxDetailsForFirstPay.getTaxAmount();
							break;
						}
					}
				}
				// amount = amount + taxDetailsDto.getTaxAmount();
				taxDetailsDto = listOfPaidTax.stream().findFirst().get();
				if (taxDetailsDto.getPaymentPeriod().equalsIgnoreCase(TaxTypeEnum.LifeTax.getDesc())) {
					if (listOfPaidTax.size() > 1) {
						for (TaxDetailsDTO taxDetailsForFirstPay : listOfPaidTax) {
							if (taxDetailsForFirstPay.getPaymentPeriod()
									.equalsIgnoreCase(TaxTypeEnum.LifeTax.getDesc())) {
								if (taxDetailsForFirstPay.getTaxAmount() != null) {
									if (!amount.equals(taxDetailsForFirstPay.getTaxAmount())) {
										secondVehicleAmount = taxDetailsForFirstPay.getTaxAmount();
									}
								}
							}
						}
					}
				}

				parameters.put("tax",
						replaceDefaults(
								(taxDetailsDto == null && taxDetailsDto.getTaxAmount() == null) ? StringUtils.EMPTY
										: amount + secondVehicleAmount));
				parameters.put("taxvalid",
						replaceDefaults(
								(taxDetailsDto == null || taxDetailsDto.getTaxPeriodEnd() == null) ? StringUtils.EMPTY
										: taxDetailsDto.getTaxPeriodEnd().format(formatter)));
			} else {
				logger.error("TaxDetails not found for the application");
				throw new BadRequestException("TaxDetails not found for the application [{}]");
			}
			listOfPaidTax.clear();
		}

		if (registrationDetailsDTO.getClassOfVehicle().equalsIgnoreCase(ClassOfVehicleEnum.ARKT.getCovCode())
				|| (registrationDetailsDTO.getClassOfVehicle().equalsIgnoreCase(ClassOfVehicleEnum.TGVT.getCovCode())
						&& registrationDetailsDTO.getVahanDetails().getGvw() <= 3000)

				|| registrationDetailsDTO.getClassOfVehicle().equalsIgnoreCase(ClassOfVehicleEnum.TTRN.getCovCode())
				|| registrationDetailsDTO.getClassOfVehicle().equalsIgnoreCase(ClassOfVehicleEnum.TRTT.getCovCode())
				|| registrationDetailsDTO.getClassOfVehicle().equalsIgnoreCase(ClassOfVehicleEnum.TRCN.getCovCode())) {

			parameters.put("tax", "Exemption");
			parameters.put("taxvalid", StringUtils.EMPTY);

		}

		parameters.put("cvalid",
				replaceDefaults((registrationDetailsDTO.getPrGeneratedDate() == null) ? StringUtils.EMPTY
						: registrationDetailsDTO.getPrGeneratedDate().format(formatter)));
		if (registrationDetailsDTO.getVehicleType() != null && registrationDetailsDTO.getVehicleType().equals("N")) {
			logger.info("Registration validity date [{}]",
					registrationDetailsDTO.getRegistrationValidity().getRegistrationValidity());
			parameters.put("regvalid",
					replaceDefaults((registrationDetailsDTO.getRegistrationValidity() == null
							|| registrationDetailsDTO.getRegistrationValidity().getRegistrationValidity() == null)
									? StringUtils.EMPTY
									: registrationDetailsDTO.getRegistrationValidity().getRegistrationValidity()
											.format(formatter)));
		} else {
			parameters.put("regvalid",
					replaceDefaults((registrationDetailsDTO.getRegistrationValidity() == null
							|| registrationDetailsDTO.getRegistrationValidity().getFcValidity() == null)
									? StringUtils.EMPTY
									: registrationDetailsDTO.getRegistrationValidity().getFcValidity()
											.format(formatter)));
		}
		parameters.put("adate", "");
		if (registrationDetailsDTO.getOfficeDetails() != null) {
			parameters.put("adate",
					replaceDefaults(
							(registrationDetailsDTO.getOfficeDetails().getOfficeName() == null) ? StringUtils.EMPTY
									: registrationDetailsDTO.getOfficeDetails().getOfficeName()));
		}
		parameters.put("sdate", LocalDate.now().format(formatter));

		parameters.put("FIN_NAME", "NA");
		parameters.put("FIN_DATE", "NA");
		if (registrationDetailsDTO.getIsFinancier() != null) {
			if (registrationDetailsDTO.getFinanceDetails() != null) {
				if (registrationDetailsDTO.getFinanceDetails().getUserId() != null
						&& registrationDetailsDTO.getFinanceDetails().getUserId().equals("MIGUSER")) {
					Optional<FinanceDetailsDTO> financeDetailsOptional = financeDetailsDAO
							.findByApplicationNo(applicationNo);
					if (financeDetailsOptional.isPresent()) {
						financeDetailsDTO = financeDetailsOptional.get();
					} else {
						logger.error("no record found for this financer");
						throw new BadRequestException("no record found for this financer");
					}
					if (!registrationDetailsDTO.getServiceIds().contains(ServiceEnum.RCFORFINANCE.getId())) {
						parameters.put("FIN_NAME", replaceDefaults((financeDetailsDTO.getFinancerName() == null) ? "NA"
								: financeDetailsDTO.getFinancerName().toUpperCase()));
						parameters.put("FIN_DATE", replaceDefaults((financeDetailsDTO.getLastUpdated() == null) ? "NA"
								: financeDetailsDTO.getLastUpdated().format(formatter)));
					}
				} else if (registrationDetailsDTO.getFinanceDetails() != null) {
					parameters.put("FIN_NAME",
							replaceDefaults((registrationDetailsDTO.getFinanceDetails().getFinancerName() == null)
									? "NA"
									: registrationDetailsDTO.getFinanceDetails().getFinancerName().toUpperCase()));
					parameters.put("FIN_DATE",
							replaceDefaults((registrationDetailsDTO.getFinanceDetails().getAgreementDate() == null)
									? "NA"
									: registrationDetailsDTO.getFinanceDetails().getAgreementDate().format(formatter)));
				} else {
					if (registrationDetailsDTO.getServiceIds() != null
							&& !registrationDetailsDTO.getServiceIds().contains(ServiceEnum.RCFORFINANCE.getId())) {
						parameters.put("FIN_NAME",
								replaceDefaults((registrationDetailsDTO.getFinanceDetails().getFinancerName() == null)
										? "NA"
										: registrationDetailsDTO.getFinanceDetails().getFinancerName().toUpperCase()));
						parameters.put("FIN_DATE",
								replaceDefaults(
										(registrationDetailsDTO.getFinanceDetails().getAgreementDate() == null) ? "NA"
												: registrationDetailsDTO.getFinanceDetails().getAgreementDate()
														.format(formatter)));
					}
				}
			}
		}

		/// TRAILERS RELATED CODE
		parameters.put("gtw", StringUtils.EMPTY);
		parameters.put("ulw", StringUtils.EMPTY);
		parameters.put("chassis", StringUtils.EMPTY);
		parameters.put("maker1", StringUtils.EMPTY);
		parameters.put("gtw1", StringUtils.EMPTY);
		parameters.put("ulw1", StringUtils.EMPTY);
		parameters.put("chassis1", StringUtils.EMPTY);
		parameters.put("maker2", StringUtils.EMPTY);
		parameters.put("gtw2", StringUtils.EMPTY);
		parameters.put("ulw2", StringUtils.EMPTY);
		parameters.put("chassis2", StringUtils.EMPTY);
		parameters.put("maker3", StringUtils.EMPTY);
		parameters.put("trailerList", StringUtils.EMPTY);
		parameters.put("chassisNum", StringUtils.EMPTY);
		parameters.put("makers_class", StringUtils.EMPTY);
		try {
			if (trailerChassisDetailsDTOList != null) {
				if (trailerChassisDetailsDTOList.size() > 0) {
					parameters.put("trailerList", "Trailer GVW");
					parameters.put("trailerListULW", "Trailer ULW");
					parameters.put("chassisNum", "CHASSIS NUMBERS");
					parameters.put("makers_class", "MAKERS NAME");
					for (int i = 0; i < trailerChassisDetailsDTOList.size(); ++i) {
						switch (i) {
						case 0:
							parameters.put("gtw",
									replaceDefaults(
											(trailerChassisDetailsDTOList.get(i).getGtw() == null) ? StringUtils.EMPTY
													: trailerChassisDetailsDTOList.get(i).getGtw()));
							parameters.put("ulw",
									replaceDefaults(
											(trailerChassisDetailsDTOList.get(i).getUlw() == null) ? StringUtils.EMPTY
													: trailerChassisDetailsDTOList.get(i).getUlw()));
							parameters.put("chassis",
									replaceDefaults((trailerChassisDetailsDTOList.get(i).getChassisNo() == null)
											? StringUtils.EMPTY
											: trailerChassisDetailsDTOList.get(i).getChassisNo()));
							parameters.put("maker1",
									replaceDefaults((trailerChassisDetailsDTOList.get(i).getMakerName() == null)
											? StringUtils.EMPTY
											: trailerChassisDetailsDTOList.get(i).getMakerName()));
							break;
						case 1:
							parameters.put("gtw1",
									replaceDefaults(
											(trailerChassisDetailsDTOList.get(i).getGtw() == null) ? StringUtils.EMPTY
													: trailerChassisDetailsDTOList.get(i).getGtw()));
							parameters.put("ulw1",
									replaceDefaults(
											(trailerChassisDetailsDTOList.get(i).getUlw() == null) ? StringUtils.EMPTY
													: trailerChassisDetailsDTOList.get(i).getUlw()));
							parameters.put("chassis1",
									replaceDefaults((trailerChassisDetailsDTOList.get(i).getChassisNo() == null)
											? StringUtils.EMPTY
											: trailerChassisDetailsDTOList.get(1).getChassisNo()));
							parameters.put("maker2",
									replaceDefaults((trailerChassisDetailsDTOList.get(1).getMakerName() == null)
											? StringUtils.EMPTY
											: trailerChassisDetailsDTOList.get(1).getMakerName()));
							break;
						case 2:
							parameters.put("gtw2",
									replaceDefaults(
											(trailerChassisDetailsDTOList.get(2).getGtw() == null) ? StringUtils.EMPTY
													: trailerChassisDetailsDTOList.get(2).getGtw()));
							parameters.put("ulw2",
									replaceDefaults(
											(trailerChassisDetailsDTOList.get(i).getUlw() == null) ? StringUtils.EMPTY
													: trailerChassisDetailsDTOList.get(i).getUlw()));
							parameters.put("chassis2",
									replaceDefaults((trailerChassisDetailsDTOList.get(2).getChassisNo() == null)
											? StringUtils.EMPTY
											: trailerChassisDetailsDTOList.get(2).getChassisNo()));
							parameters.put("maker3",
									replaceDefaults((trailerChassisDetailsDTOList.get(2).getMakerName() == null)
											? StringUtils.EMPTY
											: trailerChassisDetailsDTOList.get(2).getMakerName()));
							break;
						default:
							throw new BadRequestException(
									"Range of trailers has exceeded" + registrationDetailsDTO.getApplicationNo());
						}
					}
				}
				Integer max = trailerChassisDetailsDTOList.stream().mapToInt(v -> v.getGtw()).max()
						.orElseThrow(NoSuchElementException::new);
				parameters.put("utw", StringUtils.EMPTY);
				if (trailerChassisDetailsDTOList.stream().findFirst().get().getUlw() != null) {
					Integer maxUlw = trailerChassisDetailsDTOList.stream().mapToInt(v -> v.getUlw()).max()
							.orElseThrow(NoSuchElementException::new);
					Integer ulwTotal = maxUlw + registrationDetailsDTO.getVahanDetails().getUnladenWeight();
					parameters.put("utw", ulwTotal == null ? StringUtils.EMPTY : ulwTotal.toString() + " Kgs");
				}
				Integer gcwTotal = max + registrationDetailsDTO.getVahanDetails().getGvw();

				/// Integer ulwTotal =maxUlw+
				/// registrationDetailsDTO.getVahanDetails().getUnladenWeight();

				// parameters.put("utw", ulwTotal==null?StringUtils.EMPTY:ulwTotal.toString()+"
				// Kgs");
				parameters.put("gcw", gcwTotal == null ? StringUtils.EMPTY : gcwTotal.toString() + " Kgs");
			}
		} catch (Exception exception) {
			logger.error(
					"Range of trailers is more for this application--" + registrationDetailsDTO.getApplicationNo());
			throw new BadRequestException(
					"Range of trailers is more for this application--" + registrationDetailsDTO.getApplicationNo());
		}

		/// related to harvestersDetails
		HarvestersDetailsDTO harvestersDetailsDTO = registrationDetailsDTO.getVahanDetails().getHarvestersDetails();
		parameters.put("harvestdetails", StringUtils.EMPTY);
		parameters.put("h_ulw", StringUtils.EMPTY);
		parameters.put("h_rlw", StringUtils.EMPTY);
		parameters.put("h_chassis", StringUtils.EMPTY);
		parameters.put("hr_ulw", StringUtils.EMPTY);
		parameters.put("hr_rlw", StringUtils.EMPTY);
		parameters.put("hr_chassis", StringUtils.EMPTY);
		parameters.put("h_makerc", StringUtils.EMPTY);
		parameters.put("hr_makerc", StringUtils.EMPTY);
		parameters.put("h_makerm", StringUtils.EMPTY);
		parameters.put("hr_makerm", StringUtils.EMPTY);
		if (harvestersDetailsDTO != null) {
			if (registrationDetailsDTO.getClassOfVehicle().equalsIgnoreCase(ClassOfVehicleEnum.TMRN.getCovCode())) {
				parameters.put("harvestdetails",
						(registrationDetailsDTO.getClassOfVehicleDesc() == null ? StringUtils.EMPTY
								: registrationDetailsDTO.getClassOfVehicleDesc()) + " Details:");
			} else {
				parameters.put("harvestdetails", "Harvesters Details:");
			}
			parameters.put("h_ulw", "ulw");
			parameters.put("hr_ulw", replaceDefaults(
					(harvestersDetailsDTO.getUlw() == null) ? StringUtils.EMPTY : harvestersDetailsDTO.getUlw()));

			parameters.put("h_rlw", "rlw");
			parameters.put("hr_rlw", replaceDefaults(
					(harvestersDetailsDTO.getRlw() == null) ? StringUtils.EMPTY : harvestersDetailsDTO.getRlw()));

			parameters.put("h_chassis", "Chassis Number");
			parameters.put("hr_chassis",
					replaceDefaults((harvestersDetailsDTO.getChassisNumber() == null) ? StringUtils.EMPTY
							: harvestersDetailsDTO.getChassisNumber()));

			parameters.put("h_makerc", "Makers Class");
			parameters.put("hr_makerc",
					replaceDefaults((harvestersDetailsDTO.getHarvestersMakerClass() == null) ? StringUtils.EMPTY
							: harvestersDetailsDTO.getHarvestersMakerClass()));

			parameters.put("h_makerm", "Makers Name");
			parameters.put("hr_makerm",
					replaceDefaults((harvestersDetailsDTO.getHarvestersMakerName() == null) ? StringUtils.EMPTY
							: harvestersDetailsDTO.getHarvestersMakerName()));
		}
		parameters.put("DUPL", StringUtils.EMPTY);
		parameters.put("NOC_remarks", StringUtils.EMPTY);
		parameters.put("Trans_type", StringUtils.EMPTY);
		parameters.put("Trans_date", StringUtils.EMPTY);
		return parameters;

	}

	public Map<String, Object> getForm21(String applicationNo) {

		StagingRegistrationDetailsDTO staggingRegistrationDetailsDTO = null;

		Optional<StagingRegistrationDetailsDTO> stagingRegistrationDetailsDTOOptional = stagingRegistrationDetailsDAO
				.findByApplicationNo(applicationNo);

		if (stagingRegistrationDetailsDTOOptional.isPresent()) {
			staggingRegistrationDetailsDTO = stagingRegistrationDetailsDTOOptional.get();
		}

		String PERMENT_ADDRESS = StringUtils.EMPTY;
		if (staggingRegistrationDetailsDTO.getApplicantDetails().getAadharResponse() != null) {

			PERMENT_ADDRESS = replaceDefaults(
					staggingRegistrationDetailsDTO.getApplicantDetails().getAadharResponse().getHouse() == null
							? StringUtils.EMPTY
							: staggingRegistrationDetailsDTO.getApplicantDetails().getAadharResponse().getHouse())
					+ "\n"
					+ replaceDefaults(
							staggingRegistrationDetailsDTO.getApplicantDetails().getAadharResponse().getStreet() == null
									? StringUtils.EMPTY
									: staggingRegistrationDetailsDTO.getApplicantDetails().getAadharResponse()
											.getStreet())
					/*
					 * + "," + replaceDefaults((staggingRegistrationDetailsDTO.
					 * getApplicantDetails().getAadharResponse()==null||
					 * staggingRegistrationDetailsDTO.getApplicantDetails().
					 * getAadharResponse().get==null)?StringUtils.EMPTY:
					 * staggingRegistrationDetailsDTO.getApplicantDetails().
					 * getPresentAddress().getTownOrCity())
					 */
					+ "\n"
					+ replaceDefaults((staggingRegistrationDetailsDTO.getApplicantDetails().getAadharResponse()
							.getVillage() == null
									? StringUtils.EMPTY
									: staggingRegistrationDetailsDTO.getApplicantDetails().getAadharResponse()
											.getVillage())
							+ ","
							+ replaceDefaults((staggingRegistrationDetailsDTO.getApplicantDetails().getAadharResponse()
									.getMandal_name() == null
											? ""
											: staggingRegistrationDetailsDTO.getApplicantDetails().getAadharResponse()
													.getMandal_name())
									+ "\n"
									+ replaceDefaults(staggingRegistrationDetailsDTO.getApplicantDetails()
											.getAadharResponse().getDistrict() == null
													? ""
													: staggingRegistrationDetailsDTO
															.getApplicantDetails().getAadharResponse().getDistrict()))
							+ "\n"
							+ replaceDefaults(
									(staggingRegistrationDetailsDTO.getApplicantDetails().getAadharResponse()
											.getStatecode() == null
													? ""
													: staggingRegistrationDetailsDTO
															.getApplicantDetails().getAadharResponse().getStatecode()))
							+ "\n"
							+ replaceDefaults((staggingRegistrationDetailsDTO.getApplicantDetails().getAadharResponse()
									.getPincode() == null ? ""
											: staggingRegistrationDetailsDTO.getApplicantDetails().getAadharResponse()
													.getPincode())));

		}

		String PRESENT_ADDRESS = StringUtils.EMPTY;
		if (staggingRegistrationDetailsDTO.getApplicantDetails().getPresentAddress() != null) {

			PRESENT_ADDRESS = replaceDefaults(
					staggingRegistrationDetailsDTO.getApplicantDetails().getPresentAddress().getDoorNo() == null
							? StringUtils.EMPTY
							: staggingRegistrationDetailsDTO.getApplicantDetails().getPresentAddress().getDoorNo())
					+ "\n"
					+ replaceDefaults(staggingRegistrationDetailsDTO.getApplicantDetails().getPresentAddress()
							.getStreetName() == null
									? StringUtils.EMPTY
									: staggingRegistrationDetailsDTO.getApplicantDetails().getPresentAddress()
											.getStreetName())
					+ ","
					+ replaceDefaults(
							(staggingRegistrationDetailsDTO.getApplicantDetails().getPresentAddress() == null
									|| staggingRegistrationDetailsDTO.getApplicantDetails().getPresentAddress()
											.getTownOrCity() == null)
													? StringUtils.EMPTY
													: staggingRegistrationDetailsDTO
															.getApplicantDetails().getPresentAddress().getTownOrCity())
					+ "\n"
					+ replaceDefaults((staggingRegistrationDetailsDTO.getApplicantDetails().getPresentAddress()
							.getVillage() == null
							|| staggingRegistrationDetailsDTO.getApplicantDetails().getPresentAddress().getVillage()
									.getVillageName() == null)
											? StringUtils.EMPTY
											: staggingRegistrationDetailsDTO.getApplicantDetails().getPresentAddress()
													.getVillage().getVillageName())
					+ ","
					+ replaceDefaults(((staggingRegistrationDetailsDTO.getApplicantDetails().getPresentAddress()
							.getMandal() == null
							|| staggingRegistrationDetailsDTO.getApplicantDetails().getPresentAddress().getMandal()
									.getMandalName() == null)
											? ""
											: staggingRegistrationDetailsDTO.getApplicantDetails().getPresentAddress()
													.getMandal().getMandalName())
							+ "\n"
							+ replaceDefaults(((staggingRegistrationDetailsDTO.getApplicantDetails().getPresentAddress()
									.getDistrict() == null
									|| staggingRegistrationDetailsDTO.getApplicantDetails().getPresentAddress()
											.getDistrict().getDistrictName() == null)
													? ""
													: staggingRegistrationDetailsDTO.getApplicantDetails()
															.getPresentAddress().getDistrict().getDistrictName()))
							+ "\n"
							+ replaceDefaults(
									((staggingRegistrationDetailsDTO.getApplicantDetails().getPresentAddress()
											.getState() == null
											|| staggingRegistrationDetailsDTO.getApplicantDetails().getPresentAddress()
													.getState().getStateName() == null)
															? ""
															: staggingRegistrationDetailsDTO.getApplicantDetails()
																	.getPresentAddress().getState().getStateName()))
							+ "\n"
							+ replaceDefaults(((staggingRegistrationDetailsDTO.getApplicantDetails().getPresentAddress()
									.getPostOffice() == null
									|| staggingRegistrationDetailsDTO.getApplicantDetails().getPresentAddress()
											.getPostOffice().getPostOfficeCode() == null) ? ""
													: staggingRegistrationDetailsDTO.getApplicantDetails()
															.getPresentAddress().getPostOffice().getPostOfficeCode())));

		}
		String rlw = StringUtils.EMPTY;
		if (staggingRegistrationDetailsDTO.getVahanDetails() != null) {
			rlw = replaceDefaults(
					(staggingRegistrationDetailsDTO.getVahanDetails().getGvw() == null) ? StringUtils.EMPTY
							: staggingRegistrationDetailsDTO.getVahanDetails().getGvw())
					+ " Kgs";
		}

		String frontAxle = StringUtils.EMPTY;
		if (staggingRegistrationDetailsDTO.getVahanDetails() != null) {
			frontAxle = replaceDefaults(
					(staggingRegistrationDetailsDTO.getVahanDetails().getFrontAxleWeight() == null) ? StringUtils.EMPTY
							: staggingRegistrationDetailsDTO.getVahanDetails().getFrontAxleWeight())
					+ " Kgs" + "-"
					+ replaceDefaults((staggingRegistrationDetailsDTO.getVahanDetails().getFrontAxleDesc() == null)
							? StringUtils.EMPTY
							: staggingRegistrationDetailsDTO.getVahanDetails().getFrontAxleDesc());
		}
		String rearAxle = StringUtils.EMPTY;
		if (staggingRegistrationDetailsDTO.getVahanDetails() != null) {
			rearAxle = replaceDefaults(
					(staggingRegistrationDetailsDTO.getVahanDetails().getRearAxleWeight() == null) ? StringUtils.EMPTY
							: staggingRegistrationDetailsDTO.getVahanDetails().getRearAxleWeight())
					+ " Kgs" + "-"
					+ replaceDefaults((staggingRegistrationDetailsDTO.getVahanDetails().getRearAxleDesc() == null)
							? StringUtils.EMPTY
							: staggingRegistrationDetailsDTO.getVahanDetails().getRearAxleDesc());
		}

		String tandamAxle = StringUtils.EMPTY;
		if (staggingRegistrationDetailsDTO.getVahanDetails() != null) {
			rearAxle = replaceDefaults(
					(staggingRegistrationDetailsDTO.getVahanDetails().getTandemAxelWeight() == null) ? StringUtils.EMPTY
							: staggingRegistrationDetailsDTO.getVahanDetails().getTandemAxelWeight())
					+ " Kgs" + "-"
					+ replaceDefaults((staggingRegistrationDetailsDTO.getVahanDetails().getTandemAxelDescp() == null)
							? StringUtils.EMPTY
							: staggingRegistrationDetailsDTO.getVahanDetails().getTandemAxelDescp());
		}

		String otherAxle = StringUtils.EMPTY;
		if (staggingRegistrationDetailsDTO.getVahanDetails() != null) {
			rearAxle = replaceDefaults(
					(staggingRegistrationDetailsDTO.getVahanDetails().getO1AxleWeight() == null) ? StringUtils.EMPTY
							: staggingRegistrationDetailsDTO.getVahanDetails().getO1AxleWeight())
					+ " Kgs" + "-"
					+ replaceDefaults((staggingRegistrationDetailsDTO.getVahanDetails().getO1AxleDesc() == null)
							? StringUtils.EMPTY
							: staggingRegistrationDetailsDTO.getVahanDetails().getO1AxleDesc());
		}

		Map<String, Object> parameters = new HashMap<>();

		if (staggingRegistrationDetailsDTO.getOwnerType().getCode().equals(OwnerTypeEnum.Individual.getCode())) {
			parameters.put("FULL_NAME",
					replaceDefaults((staggingRegistrationDetailsDTO.getApplicantDetails() == null
							|| staggingRegistrationDetailsDTO.getApplicantDetails().getFirstName() == null)
									? StringUtils.EMPTY
									: staggingRegistrationDetailsDTO.getApplicantDetails().getFirstName()));
		} else {
			parameters.put("FULL_NAME",
					replaceDefaults((staggingRegistrationDetailsDTO.getApplicantDetails() == null
							|| staggingRegistrationDetailsDTO.getApplicantDetails().getEntityName() == null)
									? StringUtils.EMPTY
									: staggingRegistrationDetailsDTO.getApplicantDetails().getEntityName()));
		}
		parameters.put("PERST_ADDER", PRESENT_ADDRESS);
		parameters.put("PERM_ADDR", PERMENT_ADDRESS);

		parameters.put("HYPO", StringUtils.EMPTY);
		MasterUsersDTO masterUsersDTO = null;
		if (staggingRegistrationDetailsDTO.getFinanceDetails() != null) {
			masterUsersDTO = masterUsersDAO
					.findByUserId(staggingRegistrationDetailsDTO.getFinanceDetails().getUserId());
			if (masterUsersDTO != null) {
				parameters.put("HYPO", masterUsersDTO.getFirstName() == null ? StringUtils.EMPTY
						: masterUsersDTO.getFirstName().toUpperCase());

			}
		}
		MasterCovDTO masterCovDTO = masterCovDAO.findByCovcode(staggingRegistrationDetailsDTO.getClassOfVehicle());
		parameters.put("COA", "");
		if (masterCovDTO != null) {
			parameters.put("COA", replaceDefaults(masterCovDTO.getCovdescription() == null ? StringUtils.EMPTY
					: masterCovDTO.getCovdescription().toUpperCase()));
		}
		parameters.put("MAKER_DES",
				replaceDefaults((staggingRegistrationDetailsDTO.getVahanDetails() == null
						|| staggingRegistrationDetailsDTO.getVahanDetails().getMakersModel() == null)
								? StringUtils.EMPTY
								: staggingRegistrationDetailsDTO.getVahanDetails().getMakersModel().toUpperCase()));
		parameters.put("MAKERS_DESP",
				replaceDefaults((staggingRegistrationDetailsDTO.getVahanDetails() == null
						|| staggingRegistrationDetailsDTO.getVahanDetails().getMakersDesc() == null) ? StringUtils.EMPTY
								: staggingRegistrationDetailsDTO.getVahanDetails().getMakersDesc().toUpperCase()));
		parameters.put("BODY_TYPE",
				replaceDefaults((staggingRegistrationDetailsDTO.getVahanDetails() == null
						|| staggingRegistrationDetailsDTO.getVahanDetails().getBodyTypeDesc() == null)
								? StringUtils.EMPTY
								: staggingRegistrationDetailsDTO.getVahanDetails().getBodyTypeDesc()));

		parameters.put("MAN_DATE",
				replaceDefaults(staggingRegistrationDetailsDTO.getVahanDetails() == null
						|| staggingRegistrationDetailsDTO.getVahanDetails().getManufacturedMonthYear() == null
								? StringUtils.EMPTY
								: staggingRegistrationDetailsDTO.getVahanDetails().getManufacturedMonthYear()));
		parameters.put("NUM_OF_CYLD",
				replaceDefaults(staggingRegistrationDetailsDTO.getVahanDetails() == null
						|| staggingRegistrationDetailsDTO.getVahanDetails().getNoCyl() == null ? StringUtils.EMPTY
								: staggingRegistrationDetailsDTO.getVahanDetails().getNoCyl()));
		parameters.put("HORSE_POW",
				replaceDefaults(staggingRegistrationDetailsDTO.getVahanDetails() == null
						|| staggingRegistrationDetailsDTO.getVahanDetails().getEnginePower() == null ? StringUtils.EMPTY
								: staggingRegistrationDetailsDTO.getVahanDetails().getEnginePower()));

		parameters.put("CUBIC_CAP",
				replaceDefaults(staggingRegistrationDetailsDTO.getVahanDetails() == null
						|| staggingRegistrationDetailsDTO.getVahanDetails().getCubicCapacity() == null
								? StringUtils.EMPTY
								: staggingRegistrationDetailsDTO.getVahanDetails().getCubicCapacity()));
		parameters.put("WHEEL_BASE",
				replaceDefaults((staggingRegistrationDetailsDTO.getVahanDetails().getWheelbase() == null
						|| staggingRegistrationDetailsDTO.getVahanDetails() == null) ? StringUtils.EMPTY
								: staggingRegistrationDetailsDTO.getVahanDetails().getWheelbase()));
		parameters.put("CHASSIS",
				replaceDefaults((staggingRegistrationDetailsDTO.getVahanDetails().getChassisNumber() == null
						|| staggingRegistrationDetailsDTO.getVahanDetails() == null) ? StringUtils.EMPTY
								: staggingRegistrationDetailsDTO.getVahanDetails().getChassisNumber()));
		parameters.put("ENGINE",
				replaceDefaults((staggingRegistrationDetailsDTO.getVahanDetails() == null
						|| staggingRegistrationDetailsDTO.getVahanDetails().getEngineNumber() == null)
								? StringUtils.EMPTY
								: staggingRegistrationDetailsDTO.getVahanDetails().getEngineNumber()));
		parameters.put("SEAT_CAP",
				replaceDefaults((staggingRegistrationDetailsDTO.getVahanDetails() == null
						|| staggingRegistrationDetailsDTO.getVahanDetails().getSeatingCapacity() == null)
								? StringUtils.EMPTY
								: staggingRegistrationDetailsDTO.getVahanDetails().getSeatingCapacity()));
		parameters.put("FUEL",
				replaceDefaults((staggingRegistrationDetailsDTO.getVahanDetails() == null
						|| staggingRegistrationDetailsDTO.getVahanDetails().getFuelDesc() == null) ? StringUtils.EMPTY
								: staggingRegistrationDetailsDTO.getVahanDetails().getFuelDesc()));
		parameters.put("WEIGHT",
				replaceDefaults((staggingRegistrationDetailsDTO.getVahanDetails() == null
						|| staggingRegistrationDetailsDTO.getVahanDetails().getUnladenWeight() == null)
								? StringUtils.EMPTY
								: staggingRegistrationDetailsDTO.getVahanDetails().getUnladenWeight())
						+ " Kgrms");
		parameters.put("COLOUR",
				replaceDefaults((staggingRegistrationDetailsDTO.getVahanDetails() == null
						|| staggingRegistrationDetailsDTO.getVahanDetails().getColor() == null) ? StringUtils.EMPTY
								: staggingRegistrationDetailsDTO.getVahanDetails().getColor()));
		parameters.put("REG_DATE",
				replaceDefaults((staggingRegistrationDetailsDTO.getTrGeneratedDate() == null) ? StringUtils.EMPTY
						: staggingRegistrationDetailsDTO.getTrGeneratedDate().format(formatter)));
		parameters.put("rlw", rlw);
		parameters.put("FRONT_AXLE", frontAxle);
		parameters.put("REAR_AXLE", rearAxle);
		parameters.put("TANDEM_AXLE", tandamAxle);
		parameters.put("OTHER_AXLE", otherAxle);
		return parameters;
	}

	public Map<String, Object> getSpecialNumberDetails(String applicationNo) {

		StagingRegistrationDetailsDTO stagingRegistrationDetailsDTO = null;
		SpecialNumberDetailsDTO specialNumberDetailsDTO = null;
		specialNumberDetailsDTO = specialNumberDetailsDAO.findOne(applicationNo);
		if (specialNumberDetailsDTO == null) {
			logger.error("Application not found. application no: ", applicationNo);
			throw new BadRequestException("Application not found. application no: " + applicationNo);
		}
		if (!specialNumberDetailsDTO.getBidStatus().equals(BidStatus.BIDWIN)) {
			logger.error("Your special number application status is not in BIDWIN application:", applicationNo);
			throw new BadRequestException(
					"Your special number application status is not in BIDWIN application:" + applicationNo);
		}
		Optional<StagingRegistrationDetailsDTO> stagingRegistrationDetailsDTOOptional = stagingRegistrationDetailsDAO
				.findByApplicationNo(specialNumberDetailsDTO.getVehicleDetails().getApplicationNumber());
		if (!stagingRegistrationDetailsDTOOptional.isPresent()) {
			Optional<RegistrationDetailsDTO> registrationDetails = registrationDetailDAO
					.findByApplicationNo(specialNumberDetailsDTO.getVehicleDetails().getApplicationNumber());
			if (!registrationDetails.isPresent()) {
				logger.error("Applicant info is not present for this::: ", applicationNo);
				throw new BadRequestException("Applicant info is not present for this::: " + applicationNo);
			}
			stagingRegistrationDetailsDTO = (StagingRegistrationDetailsDTO) registrationDetails.get();
		} else {
			stagingRegistrationDetailsDTO = stagingRegistrationDetailsDTOOptional.get();
		}
		String PRESENT_ADDRESS = StringUtils.EMPTY;
		if (stagingRegistrationDetailsDTO.getApplicantDetails() != null
				&& stagingRegistrationDetailsDTO.getApplicantDetails().getPresentAddress() != null) {
			String PRESENT_ADDRESS_VALUE = null;
			if (!stagingRegistrationDetailsDTO.getApplicantDetails().getPresentAddress().getOtherVillage()
					.equalsIgnoreCase("")) {

				PRESENT_ADDRESS_VALUE = stagingRegistrationDetailsDTO.getApplicantDetails().getPresentAddress()
						.getOtherVillage() == null ? StringUtils.EMPTY
								: stagingRegistrationDetailsDTO.getApplicantDetails().getPresentAddress()
										.getOtherVillage().toUpperCase();
			} else {
				PRESENT_ADDRESS_VALUE = stagingRegistrationDetailsDTO.getApplicantDetails().getPresentAddress()
						.getVillage().getVillageName() == null ? StringUtils.EMPTY
								: stagingRegistrationDetailsDTO.getApplicantDetails().getPresentAddress().getVillage()
										.getVillageName().toUpperCase();

			}

			PRESENT_ADDRESS = replaceDefaults(
					stagingRegistrationDetailsDTO.getApplicantDetails().getPresentAddress().getDoorNo())
					+ "," + "\n"
					+ replaceDefaults((stagingRegistrationDetailsDTO.getApplicantDetails().getPresentAddress()
							.getStreetName() == null)
									? StringUtils.EMPTY
									: stagingRegistrationDetailsDTO
											.getApplicantDetails().getPresentAddress().getStreetName().toUpperCase())
					+ ","
					+ replaceDefaults((stagingRegistrationDetailsDTO.getApplicantDetails().getPresentAddress()
							.getTownOrCity() == null)
									? StringUtils.EMPTY
									: stagingRegistrationDetailsDTO.getApplicantDetails().getPresentAddress()
											.getTownOrCity().toUpperCase())
					+ "\n" + replaceDefaults(PRESENT_ADDRESS_VALUE) + ","
					+ replaceDefaults(
							((stagingRegistrationDetailsDTO.getApplicantDetails().getPresentAddress()
									.getMandal() == null
									|| stagingRegistrationDetailsDTO.getApplicantDetails().getPresentAddress()
											.getMandal().getMandalName() == null)
													? ""
													: stagingRegistrationDetailsDTO.getApplicantDetails()
															.getPresentAddress().getMandal().getMandalName()
															.toUpperCase())
									+ "," + "\n"
									+ (replaceDefaults((stagingRegistrationDetailsDTO.getApplicantDetails()
											.getPresentAddress().getDistrict() == null
											|| stagingRegistrationDetailsDTO.getApplicantDetails().getPresentAddress()
													.getDistrict().getDistrictName() == null)
															? ""
															: stagingRegistrationDetailsDTO
																	.getApplicantDetails().getPresentAddress()
																	.getDistrict().getDistrictName().toUpperCase()))
									+ "," + "\n"
									+ replaceDefaults(
											(stagingRegistrationDetailsDTO.getApplicantDetails().getPresentAddress()
													.getState() == null
															? ""
															: stagingRegistrationDetailsDTO
																	.getApplicantDetails().getPresentAddress()
																	.getState().getStateName().toUpperCase()))
									+ "," + "\n"
									+ replaceDefaults((stagingRegistrationDetailsDTO.getApplicantDetails()
											.getPresentAddress().getCountry() == null ? ""

													: stagingRegistrationDetailsDTO
															.getApplicantDetails().getPresentAddress()

															.getCountry().getCountryName().toUpperCase()))

									+ ","
									+ replaceDefaults(
											(stagingRegistrationDetailsDTO
													.getApplicantDetails().getPresentAddress().getPostOffice() == null
															? ""

															: stagingRegistrationDetailsDTO.getApplicantDetails()
																	.getPresentAddress()

																	.getPostOffice().getPostOfficeCode()))
									+ ".");

		}
		Double sumOfFees = 0.0;
		if (specialNumberDetailsDTO != null) {
			if (specialNumberDetailsDTO.getSpecialNumberFeeDetails() != null
					&& specialNumberDetailsDTO.getSpecialNumberFeeDetails().getApplicationAmount() != null) {
				sumOfFees = sumOfFees + specialNumberDetailsDTO.getSpecialNumberFeeDetails().getApplicationAmount();
			}
			if (specialNumberDetailsDTO.getSpecialNumberFeeDetails() != null
					&& specialNumberDetailsDTO.getSpecialNumberFeeDetails().getServicesAmount() != null) {
				sumOfFees = sumOfFees + specialNumberDetailsDTO.getSpecialNumberFeeDetails().getServicesAmount();
			}
			if (specialNumberDetailsDTO.getBidFinalDetails() != null
					&& specialNumberDetailsDTO.getBidFinalDetails().getBidAmount() != null) {
				sumOfFees = sumOfFees + specialNumberDetailsDTO.getBidFinalDetails().getBidAmount();
			}
		}
		// qr code
		String qrCode = StringUtils.EMPTY;
		try {
			qrCode = qRCodeService
					.sendPDF(getRegistrationQRCodeForSpecialNumber(specialNumberDetailsDTO.getSpecialNumberAppId()));
			if (qrCode == null)
				qrCode = StringUtils.EMPTY;
		} catch (Exception e) {
			logger.debug(" Exception :[] ", e);
			logger.error(" Exception :[] ", e.getMessage());
		}

		Map<String, Object> parameters = new HashMap<>();
		parameters.put("WATER_MARK", getLogo(ReportFiles.WATER_MARK));
		parameters.put("AP_LOGO", getLogo(ReportFiles.APLOGO));
		parameters.put("otsilogo", getLogo(ReportFiles.OTSILOGO));
		parameters.put("IMAGE_SCAN", qrCode);
		parameters.putIfAbsent("APPL_NO",
				replaceDefaults((specialNumberDetailsDTO.getVehicleDetails() == null
						|| specialNumberDetailsDTO.getVehicleDetails().getApplicationNumber() == null)
								? StringUtils.EMPTY
								: specialNumberDetailsDTO.getVehicleDetails().getApplicationNumber()));

		parameters.putIfAbsent("CREATED_DATE",
				replaceDefaults((specialNumberDetailsDTO.getCreatedDate() == null) ? StringUtils.EMPTY
						: specialNumberDetailsDTO.getCreatedDate().format(formatter)));
		parameters.putIfAbsent("APPL_NAME",
				replaceDefaults((specialNumberDetailsDTO.getCustomerDetails() == null
						|| specialNumberDetailsDTO.getCustomerDetails().getFirstName() == null) ? StringUtils.EMPTY
								: specialNumberDetailsDTO.getCustomerDetails().getFirstName()));
		parameters.putIfAbsent("APPL_NAME1",
				replaceDefaults((specialNumberDetailsDTO.getCustomerDetails() == null
						|| specialNumberDetailsDTO.getCustomerDetails().getFirstName() == null) ? StringUtils.EMPTY
								: specialNumberDetailsDTO.getCustomerDetails().getFirstName() + ","));
		parameters.putIfAbsent("RTA_OFFICE",
				replaceDefaults((specialNumberDetailsDTO.getVehicleDetails() == null
						|| specialNumberDetailsDTO.getVehicleDetails().getRtaOffice() == null
						|| specialNumberDetailsDTO.getVehicleDetails().getRtaOffice().getOfficeName() == null)
								? StringUtils.EMPTY
								: specialNumberDetailsDTO.getVehicleDetails().getRtaOffice().getOfficeName()));
		parameters.put("PRNO",
				replaceDefaults((specialNumberDetailsDTO.getSelectedPrSeries() == null) ? StringUtils.EMPTY
						: specialNumberDetailsDTO.getSelectedPrSeries()));
		parameters.put("trNo",
				replaceDefaults((specialNumberDetailsDTO.getVehicleDetails() == null
						|| specialNumberDetailsDTO.getVehicleDetails().getTrNumber() == null) ? StringUtils.EMPTY
								: specialNumberDetailsDTO.getVehicleDetails().getTrNumber()));
		parameters.put("APPL_AMT",
				replaceDefaults((specialNumberDetailsDTO.getSpecialNumberFeeDetails() == null
						|| specialNumberDetailsDTO.getSpecialNumberFeeDetails().getApplicationAmount() == null)
								? StringUtils.EMPTY
								: specialNumberDetailsDTO.getSpecialNumberFeeDetails().getApplicationAmount() + "0"));
		parameters.put("SERVICE_AMT",
				replaceDefaults((specialNumberDetailsDTO.getSpecialNumberFeeDetails() == null
						|| specialNumberDetailsDTO.getSpecialNumberFeeDetails().getServicesAmount() == null)
								? StringUtils.EMPTY
								: specialNumberDetailsDTO.getSpecialNumberFeeDetails().getServicesAmount() + "0"));

		parameters.put("BID_AMT",
				replaceDefaults((specialNumberDetailsDTO.getBidFinalDetails() == null
						|| specialNumberDetailsDTO.getBidFinalDetails().getBidAmount() == null) ? StringUtils.EMPTY
								: specialNumberDetailsDTO.getBidFinalDetails().getBidAmount() + "0"));

		parameters.put("TOTAL_AMT", replaceDefaults(
				(specialNumberDetailsDTO.getSpecialNumberFeeDetails() == null) ? StringUtils.EMPTY : sumOfFees + "0"));
		parameters.put("PERSENT_ADDRESS", PRESENT_ADDRESS);
		parameters.put("SIGNATURE", getLogo(ReportFiles.DIGITAL_SIGN));

		return parameters;
	}

	public Map<String, Object> getBodyBuilderSlotDetails(String applicationNo) {

		StagingRegistrationDetailsDTO staggingRegistrationDetailsDTO = null;
		OfficeDTO officeDetails = null;
		Optional<OfficeDTO> officeDetailsOptional = null;
		StringBuilder CompleteOfficeDetails = new StringBuilder();
		Optional<StagingRegistrationDetailsDTO> stagingRegistrationDetailsDTOOptional = stagingRegistrationDetailsDAO
				.findByApplicationNo(applicationNo);

		if (stagingRegistrationDetailsDTOOptional.isPresent()) {
			staggingRegistrationDetailsDTO = stagingRegistrationDetailsDTOOptional.get();
		} else {
			logger.error("Record not found for the application::", applicationNo);
			throw new BadRequestException("Record not found for the application::" + applicationNo);
		}
		if (staggingRegistrationDetailsDTO.getApplicantDetails() != null
				&& staggingRegistrationDetailsDTO.getApplicantDetails().getPresentAddress() != null
				&& staggingRegistrationDetailsDTO.getApplicantDetails().getPresentAddress().getMandal() != null
				&& staggingRegistrationDetailsDTO.getApplicantDetails().getPresentAddress().getMandal()
						.getHsrpoffice() != null) {
			officeDetailsOptional = officeDAO.findByOfficeCode(staggingRegistrationDetailsDTO.getApplicantDetails()
					.getPresentAddress().getMandal().getHsrpoffice());
		}
		Map<String, Object> parameters = new HashMap<>();
		// parameters.put("govt_logo", getLogo(ReportFiles.GOVTLOGO));
		parameters.put("WATER_MARK", getLogo(ReportFiles.WATER_MARK));
		parameters.put("AP_LOGO", getLogo(ReportFiles.APLOGO));
		parameters.put("otsilogo", getLogo(ReportFiles.OTSILOGO));
		parameters.put("DIGITAL_SIGN", getLogo(ReportFiles.DIGITAL_SIGN));
		parameters.put("APPL_NO",
				replaceDefaults(staggingRegistrationDetailsDTO.getApplicationNo() == null ? StringUtils.EMPTY
						: staggingRegistrationDetailsDTO.getApplicationNo()));
		parameters.put("APPL_NAME",
				replaceDefaults((staggingRegistrationDetailsDTO.getApplicantDetails() == null
						|| staggingRegistrationDetailsDTO.getApplicantDetails().getFirstName() == null)
								? StringUtils.EMPTY
								: staggingRegistrationDetailsDTO.getApplicantDetails().getFirstName()));
		parameters.put("AADHAR_NAME",
				replaceDefaults((staggingRegistrationDetailsDTO.getApplicantDetails() == null
						|| staggingRegistrationDetailsDTO.getApplicantDetails().getAadharNo() == null)
								? StringUtils.EMPTY
								: staggingRegistrationDetailsDTO.getApplicantDetails().getAadharNo()));
		parameters.put("TR_NO", replaceDefaults(staggingRegistrationDetailsDTO.getTrNo() == null ? StringUtils.EMPTY
				: staggingRegistrationDetailsDTO.getTrNo()));
		parameters.put("officeName", "");
		if (staggingRegistrationDetailsDTO.getOfficeDetails() != null) {
			parameters.put("officeName",
					replaceDefaults(staggingRegistrationDetailsDTO.getOfficeDetails().getOfficeName() == null
							? StringUtils.EMPTY
							: staggingRegistrationDetailsDTO.getOfficeDetails().getOfficeName()));
		}
		String qrCode = StringUtils.EMPTY;
		try {
			qrCode = qRCodeService.sendPDF(
					getRegistrationQRCodeForBodyBuilderSlot(staggingRegistrationDetailsDTO.getApplicationNo()));
			if (qrCode == null)
				qrCode = StringUtils.EMPTY;
		} catch (Exception e) {
			logger.debug(" Exception :[] ", e);
			logger.error(" Exception :[] ", e.getMessage());
		}
		parameters.put("SLOT_DATE",
				replaceDefaults((staggingRegistrationDetailsDTO.getSlotDetails() == null
						|| staggingRegistrationDetailsDTO.getSlotDetails().getSlotDate() == null) ? StringUtils.EMPTY
								: staggingRegistrationDetailsDTO.getSlotDetails().getSlotDate().format(formatter)));
		parameters.put("SLOT TIME",
				replaceDefaults((staggingRegistrationDetailsDTO.getSlotDetails() == null
						|| staggingRegistrationDetailsDTO.getSlotDetails().getSlotTime() == null) ? StringUtils.EMPTY
								: staggingRegistrationDetailsDTO.getSlotDetails().getSlotTime()));
		parameters.put("IMAGE_SCAN", qrCode);
		parameters.put("DATE", LocalDateTime.now().format(formatter));
		parameters.put("TIME", LocalTime.now().toString());
		parameters.put("CHASSIS_NO",
				replaceDefaults((staggingRegistrationDetailsDTO.getVahanDetails() == null
						|| staggingRegistrationDetailsDTO.getVahanDetails().getChassisNumber() == null)
								? StringUtils.EMPTY
								: staggingRegistrationDetailsDTO.getVahanDetails().getChassisNumber()));
		parameters.put("ENGINE_NO",
				replaceDefaults((staggingRegistrationDetailsDTO.getVahanDetails() == null
						|| staggingRegistrationDetailsDTO.getVahanDetails().getEngineNumber() == null)
								? StringUtils.EMPTY
								: staggingRegistrationDetailsDTO.getVahanDetails().getEngineNumber()));
		parameters.put("MAKERS_NAME",
				replaceDefaults((staggingRegistrationDetailsDTO.getVahanDetails() == null
						|| staggingRegistrationDetailsDTO.getVahanDetails().getMakersModel() == null)
								? StringUtils.EMPTY
								: staggingRegistrationDetailsDTO.getVahanDetails().getMakersModel()));
		parameters.put("MAKERS_MODEL",
				replaceDefaults((staggingRegistrationDetailsDTO.getVahanDetails() == null
						|| staggingRegistrationDetailsDTO.getVahanDetails().getMakersDesc() == null) ? StringUtils.EMPTY
								: staggingRegistrationDetailsDTO.getVahanDetails().getMakersDesc()));
		/*
		 * parameters.put("OFFICE_NAME",replaceDefaults((
		 * staggingRegistrationDetailsDTO.getOfficeDetails()== null
		 * ||staggingRegistrationDetailsDTO.getOfficeDetails().getOfficeName()== null)?
		 * StringUtils.EMPTY:staggingRegistrationDetailsDTO.getOfficeDetails().
		 * getOfficeName()));
		 */
		if (officeDetailsOptional.isPresent()) {
			officeDetails = officeDetailsOptional.get();
			parameters.put("OFFICE_NAME", "");
			CompleteOfficeDetails
					.append(officeDetails.getOfficeName() == null ? StringUtils.EMPTY : officeDetails.getOfficeName())
					.append(",")
					.append(officeDetails.getOfficeAddress1() == null ? StringUtils.EMPTY
							: officeDetails.getOfficeAddress1())
					.append(",").append(officeDetails.getOfficeAddress2() == null ? StringUtils.EMPTY
							: officeDetails.getOfficeAddress2());
			parameters.put("OFFICE_NAME", replaceDefaults(CompleteOfficeDetails));
		} else {
			parameters.put("OFFICE_NAME", "");
		}
		parameters.put("mobile",
				replaceDefaults((staggingRegistrationDetailsDTO.getApplicantDetails() == null
						|| staggingRegistrationDetailsDTO.getApplicantDetails().getContact() == null
						|| staggingRegistrationDetailsDTO.getApplicantDetails().getContact().getMobile() == null)
								? StringUtils.EMPTY
								: staggingRegistrationDetailsDTO.getApplicantDetails().getContact().getMobile()));
		return parameters;
	}

	/**
	 * BODY BUILDER PAYMENT RECEIPT
	 * 
	 * @param applicationNo
	 * @return
	 */
	public boolean getBodyBuilderDetails(String applicationNo) {
		StagingRegistrationDetailsDTO regDetails = null;
		Optional<StagingRegistrationDetailsDTO> stagingRegistrationDetailsDTOOptional = stagingRegistrationDetailsDAO
				.findByApplicationNo(applicationNo);
		if (stagingRegistrationDetailsDTOOptional.isPresent()) {
			regDetails = stagingRegistrationDetailsDTOOptional.get();
		} else {
			logger.error("Record not found for the application::" + applicationNo);
			throw new BadRequestException("Record not found for the application::" + applicationNo);
		}

		if (!(regDetails.getApplicationStatus().equalsIgnoreCase(StatusRegistration.CHASSISTRGENERATED.getDescription())
				|| regDetails.getApplicationStatus().equalsIgnoreCase(StatusRegistration.SLOTBOOKED.getDescription())
				|| regDetails.getApplicationStatus().equalsIgnoreCase(StatusRegistration.ABSENT.getDescription())
				|| regDetails.getApplicationStatus().equalsIgnoreCase(StatusRegistration.REJECTED.getDescription()))) {
			return Boolean.TRUE;

		} else {
			return Boolean.FALSE;
		}
	}

	public Map<String, Object> getBodyBuilderPaymentDetails(String applicationNo) {
		String appendZero = "0";
		String notAplicable = "NA";
		StagingRegistrationDetailsDTO staggingRegistrationDetailsDTO = null;
		PaymentTransactionDTO paymentTransactionDTO = null;
		FeeDetailsDTO feeDetailsDTO = null;
		Optional<StagingRegistrationDetailsDTO> stagingRegistrationDetailsDTOOptional = stagingRegistrationDetailsDAO
				.findByApplicationNo(applicationNo);

		if (stagingRegistrationDetailsDTOOptional.isPresent()) {
			staggingRegistrationDetailsDTO = stagingRegistrationDetailsDTOOptional.get();
		} else {
			logger.error("Record not found for the application::" + applicationNo);
			throw new BadRequestException("Record not found for the application::" + applicationNo);
		}
		Map<String, Object> parameters = new HashMap<>();
		// parameters.put("govt_logo", getLogo(ReportFiles.GOVTLOGO));
		parameters.put("AP_LOGO", getLogo(ReportFiles.APLOGO));
		parameters.put("otsilogo", getLogo(ReportFiles.OTSILOGO));
		parameters.put("SERVICETYPE", "BODYBUILDER");
		parameters.put("APPLICATIONNO",
				replaceDefaults(staggingRegistrationDetailsDTO.getApplicationNo() == null ? StringUtils.EMPTY
						: staggingRegistrationDetailsDTO.getApplicationNo()));
		parameters.put("APPLICATNAME",
				replaceDefaults((staggingRegistrationDetailsDTO.getApplicantDetails() == null
						|| staggingRegistrationDetailsDTO.getApplicantDetails().getFirstName() == null)
								? StringUtils.EMPTY
								: staggingRegistrationDetailsDTO.getApplicantDetails().getFirstName()));
		parameters.put("AADHARNO",
				replaceDefaults((staggingRegistrationDetailsDTO.getApplicantDetails() == null
						|| staggingRegistrationDetailsDTO.getApplicantDetails().getAadharNo() == null)
								? StringUtils.EMPTY
								: staggingRegistrationDetailsDTO.getApplicantDetails().getAadharNo()));
		parameters.put("mobile_no",
				replaceDefaults((staggingRegistrationDetailsDTO.getApplicantDetails() == null
						|| staggingRegistrationDetailsDTO.getApplicantDetails().getContact() == null
						|| staggingRegistrationDetailsDTO.getApplicantDetails().getContact().getMobile() == null)
								? StringUtils.EMPTY
								: staggingRegistrationDetailsDTO.getApplicantDetails().getContact().getMobile()));
		parameters.put("RCNO", replaceDefaults(staggingRegistrationDetailsDTO.getTrNo() == null ? StringUtils.EMPTY
				: staggingRegistrationDetailsDTO.getTrNo()));
		parameters.put("office_name", "");
		if (staggingRegistrationDetailsDTO.getOfficeDetails() != null) {
			parameters.put("office_name",
					replaceDefaults((staggingRegistrationDetailsDTO.getOfficeDetails().getOfficeName() == null)
							? StringUtils.EMPTY
							: staggingRegistrationDetailsDTO.getOfficeDetails().getOfficeName()));
		}
		String qrCode = StringUtils.EMPTY;
		try {
			qrCode = qRCodeService.sendPDF(
					getRegistrationQRCodeForBodyBuilderSlot(staggingRegistrationDetailsDTO.getApplicationNo()));
			if (qrCode == null)
				qrCode = StringUtils.EMPTY;
		} catch (Exception e) {
			logger.error(" Exception :[] ", e);
		}
		// fee details
		Optional<PaymentTransactionDTO> paymentsDtoOptional = paymentTransactionDAO
				.findTopByApplicationFormRefNumOrderByIdDesc(staggingRegistrationDetailsDTO.getApplicationNo());
		replaceWithNull(parameters);
		if (paymentsDtoOptional.isPresent()) {
			paymentTransactionDTO = paymentsDtoOptional.get();
		}

		if (paymentTransactionDTO != null) {
			feeDetailsDTO = paymentTransactionDTO.getFeeDetailsDTO();
			replaceWithNull(parameters);
			if (feeDetailsDTO != null) {
				List<FeesDTO> feesDTOList = feeDetailsDTO.getFeeDetails();
				replaceWithNull(parameters);
				if (feesDTOList != null) {
					for (FeesDTO feesDTO : feesDTOList) {
						if (feesDTO != null) {
							if (feesDTO.getFeesType().equalsIgnoreCase(FeeTypeDetails.POSTAL)) {
								parameters.put("POSTALFEE", replaceDefaults(
										feesDTO.getAmount() == null ? notAplicable : feesDTO.getAmount() + appendZero));
							} else if (feesDTO.getFeesType().equalsIgnoreCase(FeeTypeDetails.CARD)) {
								parameters.put("CARDFEE", replaceDefaults(
										feesDTO.getAmount() == null ? notAplicable : feesDTO.getAmount() + appendZero));
							} else if (feesDTO.getFeesType().equalsIgnoreCase(FeeTypeDetails.SERVICEFEE)) {
								parameters.put("SERVICEFEE", replaceDefaults(
										feesDTO.getAmount() == null ? notAplicable : feesDTO.getAmount() + appendZero));
							} else if (feesDTO.getFeesType().equalsIgnoreCase(FeeTypeDetails.APPLICATION)) {
								parameters.put("APPLFEE", replaceDefaults(
										feesDTO.getAmount() == null ? notAplicable : feesDTO.getAmount() + appendZero));
							} else if (feesDTO.getFeesType().equalsIgnoreCase(FeeTypeDetails.FITNESS_APPL_FEE)) {
								parameters.put("FIT_APPLFEE", replaceDefaults(
										feesDTO.getAmount() == null ? notAplicable : feesDTO.getAmount() + appendZero));
							} else if (feesDTO.getFeesType().equalsIgnoreCase(FeeTypeDetails.FITNESS_SERVICE_FEE)) {
								parameters.put("FIT_SERVICE", replaceDefaults(
										feesDTO.getAmount() == null ? notAplicable : feesDTO.getAmount() + appendZero));
							} else if (feesDTO.getFeesType().equalsIgnoreCase(FeeTypeDetails.CESSFEE)) {
								parameters.put("CESS_FEE", replaceDefaults(
										feesDTO.getAmount() == null ? notAplicable : feesDTO.getAmount() + appendZero));
							} else if (feesDTO.getFeesType().equalsIgnoreCase(ServiceCodeEnum.QLY_TAX.getCode())) {
								parameters.put("TAX_FEE", replaceDefaults(
										feesDTO.getAmount() == null ? notAplicable : feesDTO.getAmount() + appendZero));
							} else if (feesDTO.getFeesType().equalsIgnoreCase(ServiceCodeEnum.HALF_TAX.getCode())) {
								parameters.put("TAX_FEE", replaceDefaults(
										feesDTO.getAmount() == null ? notAplicable : feesDTO.getAmount() + appendZero));
							} else if (feesDTO.getFeesType().equalsIgnoreCase(ServiceCodeEnum.YEAR_TAX.getCode())) {
								parameters.put("TAX_FEE", replaceDefaults(
										feesDTO.getAmount() == null ? notAplicable : feesDTO.getAmount() + appendZero));
							} else if (feesDTO.getFeesType().equalsIgnoreCase(ServiceCodeEnum.LIFE_TAX.getCode())) {
								parameters.put("TAX_FEE", replaceDefaults(
										feesDTO.getAmount() == null ? notAplicable : feesDTO.getAmount() + appendZero));
							} else if (feesDTO.getFeesType().equalsIgnoreCase(ServiceCodeEnum.GREEN_TAX.getCode())) {
								parameters.put("TAX_FEE", replaceDefaults(
										feesDTO.getAmount() == null ? notAplicable : feesDTO.getAmount() + appendZero));
							}
						}
					}
				}
				parameters.put("TOTALAMT", replaceDefaults(feeDetailsDTO.getTotalFees() == null ? notAplicable
						: feeDetailsDTO.getTotalFees() + appendZero));
			}
		}
		parameters.put("DATE", LocalDateTime.now().format(formatter));
		parameters.put("TIME", LocalTime.now().toString());
		parameters.put("WATER_MARK", getLogo(ReportFiles.WATER_MARK));
		parameters.put("DIGITAL_SIGN", getLogo(ReportFiles.DIGITAL_SIGN));
		parameters.put("IMAGE_SCAN", qrCode);
		return parameters;
	}

	Map<String, Object> replaceWithNull(Map<String, Object> parameters) {
		String notApl = "NA";
		parameters.put("POSTALFEE", notApl);
		parameters.put("CARDFEE", notApl);
		parameters.put("SERVICEFEE", notApl);
		parameters.put("APPLFEE", notApl);
		parameters.put("TOTALAMT", notApl);
		parameters.put("FIT_APPLFEE", notApl);
		parameters.put("FIT_SERVICE", notApl);
		parameters.put("CESS_FEE", notApl);
		parameters.put("TAX_FEE", notApl);
		parameters.put("latefee", notApl);
		parameters.put("latefee", notApl);
		parameters.put("greentax", notApl);
		parameters.put("taxarrears", notApl);
		parameters.put("penalty", notApl);
		parameters.put("pen_arrears", notApl);
		parameters.put("auth_fee", notApl);
		parameters.put("taxservice_fee", notApl);
		parameters.put("compounding_fee", notApl);
		parameters.put("releaseorder_fee", notApl);
		parameters.put("permit_fee", notApl);
		parameters.put("permitService_fee", notApl);
		parameters.put("seven_days", notApl);
		return parameters;

	}

	public Map<String, Object> getTrDraftCopyDetails(String applicationNo) {

		PaymentTransactionDTO paymentTransactionDTO = null;
		BreakPaymentsSaveDTO breakPaymentsSaveDTO = null;
		ResponseEntity<String> response = null;
		TaxDetailsDTO taxDetailDTO = null;

		Optional<StagingRegistrationDetailsDTO> resultData = stagingRegistrationDetailsDAO
				.findByApplicationNo(applicationNo);
		RegistrationDetailsVO registrationDetailsVO = null;
		if (resultData.isPresent()) {
			registrationDetailsVO = regDetailsMapper.convertEntity(resultData.get());
		}
		Optional<PaymentTransactionDTO> paymentsDtoOptional = paymentTransactionDAO
				.findTopByApplicationFormRefNumOrderByIdDesc(applicationNo);
		if (paymentsDtoOptional.isPresent()) {
			paymentTransactionDTO = paymentsDtoOptional.get();
		}
		String PRESENT_ADDRESS = StringUtils.EMPTY;
		if (registrationDetailsVO.getApplicantDetails() != null
				&& registrationDetailsVO.getApplicantDetails().getPresentAddress() != null) {
			String PRESENT_ADDRESS_VALUE = null;
			if (!registrationDetailsVO.getApplicantDetails().getPresentAddress().getOtherVillage()
					.equalsIgnoreCase("")) {

				PRESENT_ADDRESS_VALUE = registrationDetailsVO.getApplicantDetails().getPresentAddress()
						.getOtherVillage() == null ? StringUtils.EMPTY
								: registrationDetailsVO.getApplicantDetails().getPresentAddress().getOtherVillage()
										.toUpperCase();
			} else {
				PRESENT_ADDRESS_VALUE = registrationDetailsVO.getApplicantDetails().getPresentAddress().getVillage()
						.getVillageName() == null ? StringUtils.EMPTY
								: registrationDetailsVO.getApplicantDetails().getPresentAddress().getVillage()
										.getVillageName().toUpperCase();

			}

			PRESENT_ADDRESS = replaceDefaults(
					registrationDetailsVO.getApplicantDetails().getPresentAddress().getDoorNo())
					+ "\n"
					+ replaceDefaults(registrationDetailsVO.getApplicantDetails().getPresentAddress().getStreetName()
							.toUpperCase())
					+ ","
					+ replaceDefaults(registrationDetailsVO
							.getApplicantDetails().getPresentAddress().getTownOrCity().toUpperCase())
					+ "\n" + replaceDefaults(PRESENT_ADDRESS_VALUE) + ","
					+ replaceDefaults(
							((registrationDetailsVO.getApplicantDetails().getPresentAddress().getMandal() == null
									|| registrationDetailsVO.getApplicantDetails().getPresentAddress().getMandal()
											.getMandalName() == null)
													? ""
													: registrationDetailsVO.getApplicantDetails().getPresentAddress()
															.getMandal().getMandalName().toUpperCase())
									+ "\n"
									+ (replaceDefaults((registrationDetailsVO.getApplicantDetails().getPresentAddress()
											.getDistrict() == null
											|| registrationDetailsVO.getApplicantDetails().getPresentAddress()
													.getDistrict().getDistrictName() == null)
															? ""
															: registrationDetailsVO
																	.getApplicantDetails().getPresentAddress()
																	.getDistrict().getDistrictName().toUpperCase()))
									+ "\n"
									+ replaceDefaults((registrationDetailsVO.getApplicantDetails().getPresentAddress()
											.getState() == null
													? ""
													: registrationDetailsVO.getApplicantDetails().getPresentAddress()
															.getState().getStateName().toUpperCase()))
									+ "\n"
									+ replaceDefaults((registrationDetailsVO.getApplicantDetails().getPresentAddress()
											.getCountry() == null ? ""

													: registrationDetailsVO.getApplicantDetails().getPresentAddress()

															.getCountry().getCountryName().toUpperCase()))

									+ ","
									+ replaceDefaults((registrationDetailsVO.getApplicantDetails().getPresentAddress()
											.getPostOffice() == null ? ""

													: registrationDetailsVO.getApplicantDetails().getPresentAddress()

															.getPostOffice().getPostOfficeCode())));

		}

		String qrCode = StringUtils.EMPTY;
		// String registrationQRrequiredDetails = "WELCOME REGISTRATION ";
		try {
			qrCode = qRCodeService.sendPDF(getRegistrationQRCodeForTr(resultData.get().getApplicationNo()));
			if (qrCode == null)
				qrCode = StringUtils.EMPTY;
		} catch (Exception e) {
			logger.debug(" Exception :[] ", e);
			logger.error(" Exception :[] ", e.getMessage());
		}
		Map<String, Object> parameters = new HashMap<>();
		parameters.put("draftlogo", getLogo(ReportFiles.DRAFTIMG));

		parameters.put("DISPLAY NAME", "");
		parameters.put("FULL NAME", "");
		parameters.put("FATHER NAME", "");
		parameters.put("NATIONALITY", "");
		parameters.put("dob", "");
		if (registrationDetailsVO.getApplicantDetails() != null) {
			if (registrationDetailsVO.getApplicantDetails().getFirstName() != null) {
				if (registrationDetailsVO.getOwnerType().getCode().equals(OwnerTypeEnum.Individual.getCode())) {
					parameters.put("DISPLAY NAME",
							replaceDefaults(registrationDetailsVO.getApplicantDetails().getFirstName() != null
									? registrationDetailsVO.getApplicantDetails().getFirstName().toUpperCase()
									: ""));
				} else {
					parameters.put("DISPLAY NAME",
							replaceDefaults(registrationDetailsVO.getApplicantDetails().getDisplayName() != null
									? registrationDetailsVO.getApplicantDetails().getDisplayName().toUpperCase()
									: ""));
				}
			}
			if (registrationDetailsVO.getApplicantDetails().getDisplayName() != null) {
				if (registrationDetailsVO.getOwnerType().getCode().equals(OwnerTypeEnum.Individual.getCode())) {
					parameters.put("FULL NAME",
							replaceDefaults(registrationDetailsVO.getApplicantDetails().getDisplayName() != null
									? registrationDetailsVO.getApplicantDetails().getDisplayName().toUpperCase()
									: ""));
				} else {
					parameters.put("FULL NAME",
							replaceDefaults(registrationDetailsVO.getApplicantDetails().getEntityName() != null
									? registrationDetailsVO.getApplicantDetails().getEntityName().toUpperCase()
									: ""));
				}
			}

			if (registrationDetailsVO.getApplicantDetails().getDateOfBirth() != null) {
				parameters.put("dob", replaceDefaults(
						registrationDetailsVO.getApplicantDetails().getDateOfBirth().format(formatter)));
			}

			if (registrationDetailsVO.getOwnerType().getCode().equals(OwnerTypeEnum.Individual.getCode())) {
				parameters.put("FATHER NAME",
						replaceDefaults(registrationDetailsVO.getApplicantDetails().getFatherName() != null
								? registrationDetailsVO.getApplicantDetails().getFatherName().toUpperCase()
								: ""));
			} else {
				parameters.put("FATHER NAME",
						replaceDefaults(registrationDetailsVO.getApplicantDetails().getRepresentativeName() != null
								? registrationDetailsVO.getApplicantDetails().getRepresentativeName().toUpperCase()
								: ""));
			}
			parameters.put("NATIONALITY",
					replaceDefaults(registrationDetailsVO.getApplicantDetails().getNationality()));
		}
		parameters.put("ADDRESS", PRESENT_ADDRESS);
		MasterCovDTO masterCovDTO = masterCovDAO.findByCovcode(registrationDetailsVO.getClassOfVehicle());
		parameters.put("VEH_DESCRIPTION", "");
		if (masterCovDTO != null) {
			parameters.put("VEH_DESCRIPTION",
					replaceDefaults(masterCovDTO.getCovdescription() == null ? StringUtils.EMPTY
							: masterCovDTO.getCovdescription().toUpperCase()));
		}

		parameters.put("COV", replaceDefaults(registrationDetailsVO.getClassOfVehicle() == null ? StringUtils.EMPTY
				: registrationDetailsVO.getClassOfVehicle()));
		if (registrationDetailsVO.getVahanDetails() != null) {
			parameters.put("MAKERS NAME",
					replaceDefaults(registrationDetailsVO.getVahanDetails().getMakersModel() == null ? StringUtils.EMPTY
							: registrationDetailsVO.getVahanDetails().getMakersModel()));
			parameters.put("TYPE OF BODY",
					replaceDefaults(
							registrationDetailsVO.getVahanDetails().getBodyTypeDesc() == null ? StringUtils.EMPTY
									: registrationDetailsVO.getVahanDetails().getBodyTypeDesc()));
			parameters.put("SEATING CAPACITY",
					replaceDefaults(
							registrationDetailsVO.getVahanDetails().getSeatingCapacity() == null ? StringUtils.EMPTY
									: registrationDetailsVO.getVahanDetails().getSeatingCapacity()));
			parameters.put("COLOUR",
					replaceDefaults(registrationDetailsVO.getVahanDetails().getColor() == null ? StringUtils.EMPTY
							: registrationDetailsVO.getVahanDetails().getColor()));

			parameters.put("CHASSIS NO",
					replaceDefaults(
							registrationDetailsVO.getVahanDetails().getChassisNumber() == null ? StringUtils.EMPTY
									: registrationDetailsVO.getVahanDetails().getChassisNumber()));
			parameters.put("ENGINE NO",
					replaceDefaults(
							registrationDetailsVO.getVahanDetails().getEngineNumber() == null ? StringUtils.EMPTY
									: registrationDetailsVO.getVahanDetails().getEngineNumber()));
			parameters.put("MAKERS CLASS",
					replaceDefaults(registrationDetailsVO.getVahanDetails().getMakersDesc() == null ? StringUtils.EMPTY
							: registrationDetailsVO.getVahanDetails().getMakersDesc().toUpperCase()));
			parameters.put("FUEL USED",
					replaceDefaults(registrationDetailsVO.getVahanDetails().getFuelDesc() == null ? StringUtils.EMPTY
							: registrationDetailsVO.getVahanDetails().getFuelDesc()));

			parameters.put("VEH_REG_AT", "");
			StringBuilder vehRegAt = new StringBuilder();
			if (resultData.get().getOfficeDetails() != null) {
				vehRegAt.append(resultData.get().getOfficeDetails().getOfficeName()).append("-")
						.append(resultData.get().getOfficeDetails().getOfficeCode());
			}
			parameters.put("VEH_REG_AT", replaceDefaults(vehRegAt));

		}

		parameters.put("TR FEE", "");
		parameters.put("HPA FEE", "");
		parameters.put("PRfee", "");
		parameters.put("FcFee", StringUtils.EMPTY);
		Map<String, Double> setTrBreakups = new HashMap<String, Double>();
		Map<String, Double> setPrBreakups = new HashMap<String, Double>();
		Map<String, Double> setHpaBreakups = new HashMap<String, Double>();
		Map<String, Double> setFCBreakups = new HashMap<String, Double>();
		if (paymentTransactionDTO != null) {

			breakPaymentsSaveDTO = paymentTransactionDTO.getBreakPaymentsSave();

			if (breakPaymentsSaveDTO != null) {
				List<BreakPayments> breakPaymentsList = breakPaymentsSaveDTO.getBreakPayments();

				for (BreakPayments breakPayments : breakPaymentsList) {
					if (breakPayments.getFeeType().equals(FeeTypeDetails.REGVALUE)) {
						parameters.put("TR FEE", replaceDefaults(breakPayments.getTotalFee()));
						for (Map.Entry<String, Double> entry : breakPayments.getBreakup().entrySet()) {
							setTrBreakups.put(entry.getKey(), entry.getValue());
						}

					} else if (breakPayments.getFeeType().equalsIgnoreCase(FeeTypeDetails.HPAFEE)) {
						parameters.put("HPA FEE", replaceDefaults(breakPayments.getTotalFee()));
						for (Map.Entry<String, Double> entry : breakPayments.getBreakup().entrySet()) {
							setHpaBreakups.put(entry.getKey(), entry.getValue());
						}

					} else if (breakPayments.getFeeType().equalsIgnoreCase(FeeTypeDetails.FRESH)) {
						parameters.put("PRfee", replaceDefaults(breakPayments.getTotalFee()));
						for (Map.Entry<String, Double> entry : breakPayments.getBreakup().entrySet()) {
							setPrBreakups.put(entry.getKey(), entry.getValue());
						}
					} else if (breakPayments.getFeeType().equalsIgnoreCase(FeeTypeDetails.NEW)) {
						parameters.put("Fcfee", replaceDefaults(breakPayments.getTotalFee()));
						for (Map.Entry<String, Double> entry : breakPayments.getBreakup().entrySet()) {
							setFCBreakups.put(entry.getKey(), entry.getValue());
						}
					}
				}

			}
		}
		// TR Fee
		parameters.put("TRAPPFEE", StringUtils.EMPTY);
		parameters.put("TRSERVICEFEE", StringUtils.EMPTY);
		// PR Fee
		parameters.put("hsrpFee", StringUtils.EMPTY);
		parameters.put("SERVICEFEE", StringUtils.EMPTY);
		parameters.put("APPLFEE", StringUtils.EMPTY);
		parameters.put("POSTALFEE", StringUtils.EMPTY);
		parameters.put("CARDFEE", StringUtils.EMPTY);

		parameters.put("CESSFEE", StringUtils.EMPTY);

		if (setTrBreakups != null) {
			for (Map.Entry<String, Double> entry : setTrBreakups.entrySet()) {
				if (entry.getKey().equalsIgnoreCase("Application")) {
					parameters.put("TRAPPFEE", entry.getValue().toString());
				} else if (entry.getKey().equalsIgnoreCase("Service Fee")) {
					parameters.put("TRSERVICEFEE", entry.getValue().toString());
				}
			}
		}

		if (setPrBreakups != null) {
			for (Map.Entry<String, Double> entry : setPrBreakups.entrySet()) {
				if (entry.getKey().equalsIgnoreCase("HSRP FEE")) {
					parameters.put("hsrpFee", entry.getValue().toString());
				} else if (entry.getKey().equalsIgnoreCase("Service Fee")) {
					parameters.put("SERVICEFEE", entry.getValue().toString());
				} else if (entry.getKey().equalsIgnoreCase("Application")) {
					parameters.put("APPLFEE", entry.getValue().toString());
				} else if (entry.getKey().equalsIgnoreCase("Postal")) {
					parameters.put("POSTALFEE", entry.getValue().toString());
				} else if (entry.getKey().equalsIgnoreCase("Card")) {
					parameters.put("CARDFEE", entry.getValue().toString());
				}
			}
		}

		parameters.put("VEH_REG_AT", "");
		StringBuilder vehRegAt = new StringBuilder();
		if (resultData.get().getOfficeDetails() != null) {
			vehRegAt.append(resultData.get().getOfficeDetails().getOfficeName()).append("-")
					.append(resultData.get().getOfficeDetails().getOfficeCode());
		}
		parameters.put("VEH_REG_AT", replaceDefaults(vehRegAt));

		parameters.put("VALID FROM", StringUtils.EMPTY);
		if (resultData.get().getTrGeneratedDate() != null) {
			parameters.put("VALID FROM",
					replaceDefaults((resultData.get().getTrGeneratedDate() == null) ? StringUtils.EMPTY
							: resultData.get().getTrGeneratedDate().format(formatter)));
		}
		parameters.put("VALID UPTO", StringUtils.EMPTY);
		if (resultData.get().getRegistrationValidity() != null) {
			parameters.put("VALID UPTO",
					replaceDefaults(
							(resultData.get().getRegistrationValidity().getTrValidity() == null) ? StringUtils.EMPTY
									: resultData.get().getRegistrationValidity().getTrValidity().format(formatter)));
		}
		parameters.put("TRANSACTION NO", "");
		if (paymentTransactionDTO != null) {
			if (paymentTransactionDTO.getTransactioNo() != null) {
				parameters.put("TRANSACTION NO",
						replaceDefaults(paymentTransactionDTO.getTransactioNo() == null ? StringUtils.EMPTY
								: paymentTransactionDTO.getTransactioNo()));
			}
		}
		parameters.put("TAX PAID", "");
		List<TaxDetailsDTO> taxDetailsDTOList = taxDetailsDAO
				.findFirst10ByApplicationNoOrderByCreatedDateDesc(registrationDetailsVO.getApplicationNo());
		if (!taxDetailsDTOList.isEmpty()) {
			taxDetailDTO = taxDetailsDTOList.stream().findFirst().get();
			parameters.put("TAX PAID", replaceDefaults(
					taxDetailDTO.getTaxAmount() == null ? StringUtils.EMPTY : taxDetailDTO.getTaxAmount()));
			if (taxDetailDTO.getCessFee() != null) {
				parameters.put("CESSFEE", taxDetailDTO.getCessFee().toString());
			}
			taxDetailsDTOList.clear();
		}
		parameters.put("NUMBERTYPE", StringUtils.EMPTY);
		if (resultData.get().getSpecialNumberRequired() != null && resultData.get().getSpecialNumberRequired()) {
			parameters.put("NUMBERTYPE", NumberType.SPECIAL_NUMBER);
		} else {
			parameters.put("NUMBERTYPE", NumberType.ORDINARY_NUMBER);
		}
		parameters.put("HSRPCODE", StringUtils.EMPTY);
		if (resultData.get().getOfficeDetails() != null) {
			parameters.put("HSRPCODE",
					replaceDefaults(resultData.get().getOfficeDetails().getHsrpOffice() == null ? StringUtils.EMPTY
							: resultData.get().getOfficeDetails().getHsrpOffice()));
		}
		parameters.put("REG DATE", StringUtils.EMPTY);
		parameters.put("REG DATE",
				replaceDefaults(resultData.get().getTrGeneratedDate() != null
						? resultData.get().getTrGeneratedDate().format(formatter)
						: ""));

		return parameters;

	}

	/**
	 * transport templete for arvt
	 */
	public String getTransportDetailsForArvt(String applicationNo) {
		Optional<RegistrationDetailsDTO> registrationDetails = registrationDetailDAO.findByApplicationNo(applicationNo);
		if (!registrationDetails.isPresent()) {
			logger.error("Record not found for the application", applicationNo);
			throw new BadRequestException("Record not found for the application::" + applicationNo);
		}
		return registrationDetails.get().getClassOfVehicle();
	}

	/**
	 * for citizenside
	 */
	public String getTransportDetailsForArvtAtCitizenSide(String applicationNo) {
		Optional<RegServiceDTO> registrationDetails = regServiceDAO.findByApplicationNo(applicationNo);
		if (!registrationDetails.isPresent()) {
			Optional<RegistrationDetailsDTO> registrationDetailsDTO = registrationDetailDAO
					.findByApplicationNo(applicationNo);
			if (registrationDetailsDTO.get().getClassOfVehicle() != null) {
				return registrationDetailsDTO.get().getClassOfVehicle();
			} else {
				return registrationDetailsDTO.get().getVehicleDetails().getClassOfVehicle();
			}
		}
		if (registrationDetails.get().getServiceIds().stream()
				.anyMatch(id -> id.equals(ServiceEnum.BILLATERALTAX.getId()))) {
			return ServiceEnum.BILLATERALTAX.getDesc();
		}
		if (registrationDetails.get().getRegistrationDetails().getClassOfVehicle() != null) {
			return registrationDetails.get().getRegistrationDetails().getClassOfVehicle();
		} else {
			return registrationDetails.get().getRegistrationDetails().getVehicleDetails().getClassOfVehicle();
		}
	}

	/**
	 * Getting services based on application
	 */
	public Set<Integer> getServiceTypeBasedOnApplicationNumber(String applicationNo) {
		Optional<RegServiceDTO> registrationDetails = regServiceDAO.findByApplicationNo(applicationNo);
		if (!registrationDetails.isPresent()) {
			logger.error("Record not found for the application::" + applicationNo);
			throw new BadRequestException("Record not found for the application::" + applicationNo);
		}
		return registrationDetails.get().getServiceIds();
	}

	/**
	 * registration service related template(ex:COA,DLDUPL,RENEWAL...etc)
	 */
	public Map<String, Object> getRegServiceDetails(String applicationNo) {

		String appendZero = "0";
		String notAplicable = "NA";
		RegServiceDTO regServiceDTO = null;
		PaymentTransactionDTO paymentTransactionDTO = null;
		FeeDetailsDTO feeDetailsDTO = null;
		Optional<RegServiceDTO> regServiceDTOOptional = regServiceDAO.findByApplicationNo(applicationNo);

		if (regServiceDTOOptional.isPresent()) {
			regServiceDTO = regServiceDTOOptional.get();
		} else {
			logger.error("Record not found for the application::" + applicationNo);
			throw new BadRequestException("Record not found for the application::" + applicationNo);
		}
		Map<String, Object> parameters = new HashMap<>();

		parameters.put("AP_LOGO", getLogo(ReportFiles.APLOGO));
		parameters.put("otsilogo", getLogo(ReportFiles.OTSILOGO));
		parameters.put("APPLICATIONNO", replaceDefaults(
				regServiceDTO.getApplicationNo() == null ? StringUtils.EMPTY : regServiceDTO.getApplicationNo()));

		if (regServiceDTO.getRegistrationDetails() != null && regServiceDTO.getServiceIds().contains(49)) {
			if (!(StringUtils.isEmpty(regServiceDTO.getRegistrationDetails().getFinanceDetails().getUserId())
					&& regServiceDTO.getRegistrationDetails().getFinanceDetails().getUserId() == null)) {
				Optional<UserDTO> financierMob = Optional.empty();
				financierMob = userDAO
						.findByUserId(regServiceDTO.getRegistrationDetails().getFinanceDetails().getUserId());
				if (financierMob.isPresent()) {

					parameters.put("FINANCIERNAME",
							replaceDefaults(
									(regServiceDTO.getRegistrationDetails().getFinanceDetails() == null || regServiceDTO
											.getRegistrationDetails().getFinanceDetails().getFinancerName() == null)
													? StringUtils.EMPTY
													: regServiceDTO.getRegistrationDetails().getFinanceDetails()
															.getFinancerName()));
					parameters.put("fin_mob",
							replaceDefaults((regServiceDTO.getRegistrationDetails().getFinanceDetails() == null
									|| financierMob.get().getMobile() == null) ? StringUtils.EMPTY
											: financierMob.get().getMobile()));

				} else {

					parameters.put("FINANCIERNAME", "Offline Finance");
					parameters.put("fin_mob", "NA");
				}
			} else {

				parameters.put("FINANCIERNAME", "Offline Finance");
				parameters.put("fin_mob", "NA");

			}

		}

		if (regServiceDTO.getRegistrationDetails() != null && (!regServiceDTO.getServiceIds().contains(59))) {
			parameters.put("APPLICATNAME",
					replaceDefaults((regServiceDTO.getRegistrationDetails().getApplicantDetails() == null
							|| regServiceDTO.getRegistrationDetails().getApplicantDetails().getFirstName() == null)
									? StringUtils.EMPTY
									: regServiceDTO.getRegistrationDetails().getApplicantDetails().getFirstName()
											.toUpperCase()));
			parameters.put("care_of",
					replaceDefaults((regServiceDTO.getRegistrationDetails().getApplicantDetails() == null
							|| regServiceDTO.getRegistrationDetails().getApplicantDetails().getFatherName() == null)
									? StringUtils.EMPTY
									: regServiceDTO.getRegistrationDetails().getApplicantDetails().getFatherName()
											.toUpperCase()));
			if (regServiceDTO.getRegistrationDetails().getApplicantDetails().getDateOfBirth() != null) {
				parameters.put("dob",
						replaceDefaults(
								(regServiceDTO.getRegistrationDetails().getApplicantDetails() == null || regServiceDTO
										.getRegistrationDetails().getApplicantDetails().getDateOfBirth() == null)
												? StringUtils.EMPTY
												: regServiceDTO.getRegistrationDetails().getApplicantDetails()
														.getDateOfBirth().format(formatter)));
			} else {
				parameters.put("dob", (regServiceDTO.getRegistrationDetails() == null
						|| regServiceDTO.getRegistrationDetails().getApplicantDetails() == null
						|| regServiceDTO.getRegistrationDetails().getApplicantDetails().getAadharResponse() == null
						|| regServiceDTO.getRegistrationDetails().getApplicantDetails().getAadharResponse()
								.getDob() == null) ? StringUtils.EMPTY
										: regServiceDTO.getRegistrationDetails().getApplicantDetails()
												.getAadharResponse().getDob());
			}
			parameters.put("AADHARNO",
					replaceDefaults((regServiceDTO.getRegistrationDetails().getApplicantDetails() == null
							|| regServiceDTO.getRegistrationDetails().getApplicantDetails().getAadharNo() == null)
									? StringUtils.EMPTY
									: regServiceDTO.getRegistrationDetails().getApplicantDetails().getAadharNo()));
			parameters.put("mobile_no",
					replaceDefaults((regServiceDTO.getRegistrationDetails().getApplicantDetails() == null
							|| regServiceDTO.getRegistrationDetails().getApplicantDetails().getContact() == null
							|| regServiceDTO.getRegistrationDetails().getApplicantDetails().getContact()
									.getMobile() == null) ? StringUtils.EMPTY
											: regServiceDTO.getRegistrationDetails().getApplicantDetails().getContact()
													.getMobile()));

		} else {
			parameters.put("APPLICATNAME",
					replaceDefaults((regServiceDTO.getFreshRcdetails() == null
							|| regServiceDTO.getFreshRcdetails().getFinancerDetails() == null) ? StringUtils.EMPTY
									: regServiceDTO.getFreshRcdetails().getFinancerDetails().getFirstName()
											.toUpperCase()));
			parameters.put("care_of", "NA");

			parameters.put("dob",
					(regServiceDTO.getFreshRcdetails() == null
							|| regServiceDTO.getFreshRcdetails().getFinancerDetails() == null
							|| regServiceDTO.getFreshRcdetails().getFinancerDetails().getDob() == null)
									? StringUtils.EMPTY
									: regServiceDTO.getFreshRcdetails().getFinancerDetails().getDob()
											.format(formatter));

			parameters.put("mobile_no",
					replaceDefaults((regServiceDTO.getFreshRcdetails() == null
							|| regServiceDTO.getFreshRcdetails().getFinancerContactDetails() == null
							|| regServiceDTO.getFreshRcdetails().getFinancerContactDetails().getMobile() == null)
									? StringUtils.EMPTY
									: regServiceDTO.getFreshRcdetails().getFinancerContactDetails().getMobile()));
		}
		List<String> serviceEnumList = new ArrayList<>();
		parameters.put("SERVICETYPE", "");
		List<ServiceEnum> serviceIds = regServiceDTO.getServiceIds().stream()
				.map(id -> ServiceEnum.getServiceEnumById(id)).collect(Collectors.toList());
		for (ServiceEnum serviceEnum : serviceIds) {
			if (serviceEnum != null) {
				parameters.put("SERVICETYPE", serviceEnum.getDesc().toString().toUpperCase());
				parameters.put("token", "NA");
				if (serviceEnum.equals(ServiceEnum.TRANSFEROFOWNERSHIP)) {
					if (regServiceDTO.getRegistrationDetails() != null && regServiceDTO.getBuyerDetails() != null
							&& regServiceDTO.getBuyerDetails().getBuyerApplicantDetails() != null) {
						parameters.put("APPLICATNAME",
								replaceDefaults((regServiceDTO.getBuyerDetails().getBuyerApplicantDetails() == null
										|| regServiceDTO.getBuyerDetails() == null
										|| regServiceDTO.getBuyerDetails().getBuyerApplicantDetails()
												.getFirstName() == null) ? StringUtils.EMPTY
														: regServiceDTO.getBuyerDetails().getBuyerApplicantDetails()
																.getFirstName().toUpperCase()));
						parameters.put("care_of",
								replaceDefaults((regServiceDTO.getBuyerDetails().getBuyerApplicantDetails() == null
										|| regServiceDTO.getBuyerDetails() == null
										|| regServiceDTO.getBuyerDetails().getBuyerApplicantDetails()
												.getFatherName() == null) ? StringUtils.EMPTY
														: regServiceDTO.getBuyerDetails().getBuyerApplicantDetails()
																.getFatherName().toUpperCase()));
						if (regServiceDTO.getBuyerDetails().getBuyerApplicantDetails().getDateOfBirth() != null) {
							parameters.put("dob",
									replaceDefaults((regServiceDTO.getBuyerDetails().getBuyerApplicantDetails() == null
											|| regServiceDTO.getBuyerDetails() == null
											|| regServiceDTO.getBuyerDetails().getBuyerApplicantDetails()
													.getDateOfBirth() == null) ? StringUtils.EMPTY
															: regServiceDTO.getBuyerDetails().getBuyerApplicantDetails()
																	.getDateOfBirth().format(formatter)));
						} else {
							parameters.put("dob",
									(regServiceDTO.getRegistrationDetails() == null
											|| regServiceDTO.getRegistrationDetails().getApplicantDetails() == null
											|| regServiceDTO.getRegistrationDetails().getApplicantDetails()
													.getAadharResponse() == null
											|| regServiceDTO.getRegistrationDetails().getApplicantDetails()
													.getAadharResponse().getDob() == null)
															? StringUtils.EMPTY
															: regServiceDTO.getRegistrationDetails()
																	.getApplicantDetails().getAadharResponse()
																	.getDob());
						}
						parameters.put("AADHARNO",
								replaceDefaults((regServiceDTO.getBuyerDetails().getBuyerApplicantDetails() == null
										|| regServiceDTO.getBuyerDetails() == null
										|| regServiceDTO.getBuyerDetails().getBuyerApplicantDetails()
												.getAadharNo() == null) ? StringUtils.EMPTY
														: regServiceDTO.getBuyerDetails().getBuyerApplicantDetails()
																.getAadharNo()));
						parameters.put("mobile_no",
								replaceDefaults((regServiceDTO.getBuyerDetails().getBuyerApplicantDetails() == null
										|| regServiceDTO.getBuyerDetails() == null
										|| regServiceDTO.getBuyerDetails().getBuyerApplicantDetails()
												.getContact() == null
										|| regServiceDTO.getBuyerDetails().getBuyerApplicantDetails().getContact()
												.getMobile() == null) ? StringUtils.EMPTY
														: regServiceDTO.getBuyerDetails().getBuyerApplicantDetails()
																.getContact().getMobile()));
					}
				}
				serviceEnumList.add(serviceEnum.getDesc().toUpperCase());
			}
			parameters.put("SERVICETYPE", (serviceEnumList.toString()).replace("[", "").replace("]", ""));
		}
		if (regServiceDTO.getBuyerDetails() != null && regServiceDTO.getBuyerDetails().getTokenNo() != null) {
			parameters.put("token", ((regServiceDTO.getBuyerDetails().getTokenNo() == null) ? "NA"
					: regServiceDTO.getBuyerDetails().getTokenNo()));
		}
		if (regServiceDTO.getBuyerDetails() != null
				&& regServiceDTO.getBuyerDetails().getTransferType().equals(TransferType.SALE)) {
			parameters.put("token", ((regServiceDTO.getBuyerDetails().getTokenNo() == null) ? "NA"
					: regServiceDTO.getBuyerDetails().getTokenNo()));
		}
		for (ServiceEnum serviceEnum : serviceIds) {
			if (serviceEnum != null) {
				if (serviceEnum.equals(ServiceEnum.HPA)) {
					parameters.put("token", ((regServiceDTO.getToken() == null) ? "NA" : regServiceDTO.getToken()));
				}
			}
		}
		MasterCovDTO masterCovDTO = null;
		if (regServiceDTO.getServiceIds().stream().anyMatch(id -> id.equals(ServiceEnum.BILLATERALTAX.getId()))) {
			masterCovDTO = masterCovDAO
					.findByCovdescription(regServiceDTO.getBileteralTaxDetails().getClassOfVehicle());
			parameters.put("RCNO", (regServiceDTO.getBileteralTaxDetails().getPrNo()));
		} else {
			String covCode = regServiceDTO.getRegistrationDetails().getClassOfVehicle();
			masterCovDTO = masterCovDAO.findByCovcode(covCode);
		}

		parameters.put("COVs", StringUtils.EMPTY);
		if (masterCovDTO != null) {
			parameters.put("COVs", replaceDefaults(masterCovDTO.getCovdescription()).isEmpty() ? StringUtils.EMPTY
					: masterCovDTO.getCovdescription().toUpperCase());
		}
		parameters.put("RCNO",
				(regServiceDTO.getRegistrationDetails() == null
						|| regServiceDTO.getRegistrationDetails().getPrNo() == null
						|| regServiceDTO.getRegistrationDetails().getPrNo().isEmpty()) ? notAplicable
								: regServiceDTO.getRegistrationDetails().getPrNo());
		parameters.put("office_name", "");
		if (regServiceDTO.getOfficeDetails() != null) {
			parameters.put("office_name",
					replaceDefaults((regServiceDTO.getOfficeDetails().getOfficeName() == null) ? StringUtils.EMPTY
							: regServiceDTO.getOfficeDetails().getOfficeName().toUpperCase()));
		}
		String qrCode = StringUtils.EMPTY;
		try {
			qrCode = qRCodeService.sendPDF(getRegistrationQRCodeForRegService(regServiceDTO.getApplicationNo()));
			if (qrCode == null)
				qrCode = StringUtils.EMPTY;
		} catch (Exception e) {
			logger.error(" Exception :[] ", e);
		}
		// fee details
		Optional<PaymentTransactionDTO> paymentsDtoOptional = paymentTransactionDAO
				.findTopByApplicationFormRefNumOrderByIdDesc(regServiceDTO.getApplicationNo());
		replaceWithNull(parameters);
		if (paymentsDtoOptional.isPresent()) {
			paymentTransactionDTO = paymentsDtoOptional.get();
		}

		if (paymentTransactionDTO != null) {
			feeDetailsDTO = paymentTransactionDTO.getFeeDetailsDTO();
			replaceWithNull(parameters);
			if (feeDetailsDTO != null) {
				List<FeesDTO> feesDTOList = feeDetailsDTO.getFeeDetails();
				replaceWithNull(parameters);
				if (feesDTOList != null) {
					for (FeesDTO feesDTO : feesDTOList) {
						if (feesDTO != null) {
							if (feesDTO.getFeesType().equalsIgnoreCase(FeeTypeDetails.POSTAL)) {
								parameters.put("POSTALFEE", replaceDefaults(
										feesDTO.getAmount() == null ? notAplicable : feesDTO.getAmount() + appendZero));
							} else if (feesDTO.getFeesType().equalsIgnoreCase(FeeTypeDetails.CARD)) {
								parameters.put("CARDFEE", replaceDefaults(
										feesDTO.getAmount() == null ? notAplicable : feesDTO.getAmount() + appendZero));
							} else if (feesDTO.getFeesType().equalsIgnoreCase(FeeTypeDetails.SERVICEFEE)) {
								parameters.put("SERVICEFEE", replaceDefaults(
										feesDTO.getAmount() == null ? notAplicable : feesDTO.getAmount() + appendZero));
							} else if (feesDTO.getFeesType().equalsIgnoreCase(FeeTypeDetails.APPLICATION)) {
								parameters.put("APPLFEE", replaceDefaults(
										feesDTO.getAmount() == null ? notAplicable : feesDTO.getAmount() + appendZero));
							} else if (feesDTO.getFeesType().equalsIgnoreCase(FeeTypeDetails.FITNESS_APPL_FEE)) {
								parameters.put("FIT_APPLFEE", replaceDefaults(
										feesDTO.getAmount() == null ? notAplicable : feesDTO.getAmount() + appendZero));
							} else if (feesDTO.getFeesType().equalsIgnoreCase(FeeTypeDetails.FITNESS_SERVICE_FEE)) {
								parameters.put("FIT_SERVICE", replaceDefaults(
										feesDTO.getAmount() == null ? notAplicable : feesDTO.getAmount() + appendZero));
							} else if (feesDTO.getFeesType().equalsIgnoreCase(FeeTypeDetails.LATEFEE)) {
								parameters.put("latefee", replaceDefaults(
										feesDTO.getAmount() == null ? notAplicable : feesDTO.getAmount() + appendZero));
							} else if (feesDTO.getFeesType().equalsIgnoreCase(FeeTypeDetails.CESSFEE)) {
								parameters.put("CESS_FEE", replaceDefaults(
										feesDTO.getAmount() == null ? notAplicable : feesDTO.getAmount() + appendZero));
							} else if (feesDTO.getFeesType().equalsIgnoreCase(ServiceCodeEnum.QLY_TAX.getCode())) {
								parameters.put("TAX_FEE", replaceDefaults(
										feesDTO.getAmount() == null ? notAplicable : feesDTO.getAmount() + appendZero));
							} else if (feesDTO.getFeesType().equalsIgnoreCase(ServiceCodeEnum.HALF_TAX.getCode())) {
								parameters.put("TAX_FEE", replaceDefaults(
										feesDTO.getAmount() == null ? notAplicable : feesDTO.getAmount() + appendZero));
							} else if (feesDTO.getFeesType().equalsIgnoreCase(ServiceCodeEnum.YEAR_TAX.getCode())) {
								parameters.put("TAX_FEE", replaceDefaults(
										feesDTO.getAmount() == null ? notAplicable : feesDTO.getAmount() + appendZero));
							} else if (feesDTO.getFeesType().equalsIgnoreCase(ServiceCodeEnum.LIFE_TAX.getTypeDesc())) {
								parameters.put("TAX_FEE", replaceDefaults(
										feesDTO.getAmount() == null ? notAplicable : feesDTO.getAmount() + appendZero));
							} else if (feesDTO.getFeesType()
									.equalsIgnoreCase(ServiceCodeEnum.GREEN_TAX.getTypeDesc())) {
								parameters.put("greentax", replaceDefaults(
										feesDTO.getAmount() == null ? notAplicable : feesDTO.getAmount() + appendZero));
							} else if (feesDTO.getFeesType().equalsIgnoreCase(FeeTypeDetails.PENALTY)) {
								parameters.put("penalty", replaceDefaults(
										feesDTO.getAmount() == null ? notAplicable : feesDTO.getAmount() + appendZero));
							} else if (feesDTO.getFeesType().equalsIgnoreCase(FeeTypeDetails.PENALTYARREARS)) {
								parameters.put("pen_arrears", replaceDefaults(
										feesDTO.getAmount() == null ? notAplicable : feesDTO.getAmount() + appendZero));
							} else if (feesDTO.getFeesType().equalsIgnoreCase(FeeTypeDetails.TAXARREARS)) {
								parameters.put("taxarrears", replaceDefaults(
										feesDTO.getAmount() == null ? notAplicable : feesDTO.getAmount() + appendZero));
							} else if (feesDTO.getFeesType().equalsIgnoreCase(FeeTypeDetails.FCLATEFEE)) {
								parameters.put("latefee", replaceDefaults(
										feesDTO.getAmount() == null ? notAplicable : feesDTO.getAmount() + appendZero));
							} else if (feesDTO.getFeesType().equalsIgnoreCase(FeeTypeDetails.AUTHFEE)) {
								parameters.put("auth_fee", replaceDefaults(
										feesDTO.getAmount() == null ? notAplicable : feesDTO.getAmount() + appendZero));
							} else if (feesDTO.getFeesType().equalsIgnoreCase(FeeTypeDetails.TAXSERVICEFEE)) {
								parameters.put("taxservice_fee", replaceDefaults(
										feesDTO.getAmount() == null ? notAplicable : feesDTO.getAmount() + appendZero));
							} else if (feesDTO.getFeesType().equalsIgnoreCase(FeeTypeDetails.COMPOUNDINGFEE)) {
								parameters.put("compounding_fee", replaceDefaults(
										feesDTO.getAmount() == null ? notAplicable : feesDTO.getAmount() + appendZero));
							} else if (feesDTO.getFeesType().equalsIgnoreCase(FeeTypeDetails.RELEASEORDERFEE)) {
								parameters.put("releaseorder_fee", replaceDefaults(
										feesDTO.getAmount() == null ? notAplicable : feesDTO.getAmount() + appendZero));
							} else if (feesDTO.getFeesType().equalsIgnoreCase(FeeTypeDetails.PERMITFEE)) {
								parameters.put("permit_fee", replaceDefaults(
										feesDTO.getAmount() == null ? notAplicable : feesDTO.getAmount() + appendZero));
							} else if (feesDTO.getFeesType().equalsIgnoreCase(FeeTypeDetails.PERMITSERVICEFEE)) {
								parameters.put("permitService_fee", replaceDefaults(
										feesDTO.getAmount() == null ? notAplicable : feesDTO.getAmount() + appendZero));
							} else if (feesDTO.getFeesType().equalsIgnoreCase(FeeTypeDetails.SEVENDAYSFEE)) {
								parameters.put("seven_days", replaceDefaults(
										feesDTO.getAmount() == null ? notAplicable : feesDTO.getAmount() + appendZero));
							}
						}
					}
				}
				parameters.put("TOTALAMT", replaceDefaults(feeDetailsDTO.getTotalFees() == null ? notAplicable
						: feeDetailsDTO.getTotalFees() + appendZero));
			}
		}
		parameters.put("slotdate", StringUtils.EMPTY);
		if (regServiceDTO != null && regServiceDTO.getSlotDetails() != null) {
			parameters.put("slotdate", regServiceDTO.getSlotDetails().getSlotDate().format(formatter));
		}
		parameters.put("slot_time", StringUtils.EMPTY);
		if (regServiceDTO != null && regServiceDTO.getSlotDetails() != null) {
			parameters.put("slot_time", regServiceDTO.getSlotDetails().getSlotTime());
		}
		String slotAddress = StringUtils.EMPTY;
		parameters.put("slot_addr", StringUtils.EMPTY);
		if (regServiceDTO != null && regServiceDTO.getMviOfficeDetails() != null) {
			slotAddress = ((regServiceDTO.getMviOfficeDetails().getOfficeName() == null) ? StringUtils.EMPTY
					: regServiceDTO.getMviOfficeDetails().getOfficeName().toUpperCase())
					+ "\n"
					+ ((regServiceDTO.getMviOfficeDetails().getOfficeAddress1() == null) ? StringUtils.EMPTY
							: regServiceDTO.getMviOfficeDetails().getOfficeAddress1().toUpperCase())
					+ ","
					+ ((regServiceDTO.getMviOfficeDetails().getOfficeAddress2() == null) ? StringUtils.EMPTY
							: regServiceDTO.getMviOfficeDetails().getOfficeAddress2().replace("NULL", "").replace(",,",
									"") + ".");
			parameters.put("slot_addr", slotAddress.toUpperCase());
		}
		if (regServiceDTO.getServiceIds().contains(101)) {
			String vehicleAddress = StringUtils.EMPTY;
			parameters.put("vehicleAddress", StringUtils.EMPTY);
			if (regServiceDTO.getVehicleStoppageDetails() != null
					&& regServiceDTO.getVehicleStoppageDetails().getVehicleAddressDetails() != null) {
				vehicleAddress = ((regServiceDTO.getVehicleStoppageDetails().getVehicleAddressDetails()
						.getDoorNo() == null) ? StringUtils.EMPTY
								: regServiceDTO.getVehicleStoppageDetails().getVehicleAddressDetails().getDoorNo())
						+ " , "
						+ ((regServiceDTO.getVehicleStoppageDetails().getVehicleAddressDetails()
								.getStreetName() == null)
										? StringUtils.EMPTY
										: regServiceDTO
												.getVehicleStoppageDetails().getVehicleAddressDetails().getStreetName())
						+ "\n "
						+ ((regServiceDTO.getVehicleStoppageDetails().getVehicleAddressDetails().getVillage() == null
								|| regServiceDTO.getVehicleStoppageDetails().getVehicleAddressDetails().getVillage()
										.getVillageName().equalsIgnoreCase("[OTHER]"))
												? regServiceDTO.getVehicleStoppageDetails().getVehicleAddressDetails()
														.getOtherVillage()
												: regServiceDTO.getVehicleStoppageDetails().getVehicleAddressDetails()
														.getVillage().getVillageName())
						+ " , "
						+ ((regServiceDTO.getVehicleStoppageDetails().getVehicleAddressDetails().getDistrict() == null
								|| regServiceDTO.getVehicleStoppageDetails().getVehicleAddressDetails().getDistrict()
										.getDistrictName() == null)
												? StringUtils.EMPTY
												: regServiceDTO.getVehicleStoppageDetails().getVehicleAddressDetails()
														.getDistrict().getDistrictName())
						+ "\n"
						+ ((regServiceDTO.getVehicleStoppageDetails().getVehicleAddressDetails().getState() == null
								|| regServiceDTO.getVehicleStoppageDetails().getVehicleAddressDetails().getState()
										.getStateName() == null)
												? StringUtils.EMPTY
												: regServiceDTO.getVehicleStoppageDetails().getVehicleAddressDetails()
														.getState().getStateName())
						+ "\n"
						+ ((regServiceDTO.getVehicleStoppageDetails().getVehicleAddressDetails().getCountry() == null
								|| regServiceDTO.getVehicleStoppageDetails().getVehicleAddressDetails().getCountry()
										.getCountryName() == null) ? StringUtils.EMPTY
												: regServiceDTO.getVehicleStoppageDetails().getVehicleAddressDetails()
														.getCountry().getCountryName());
				parameters.put("vehicleAddress", vehicleAddress.toUpperCase());

			}
			StringBuilder officeAddress = new StringBuilder();
			parameters.put("officeAddress", StringUtils.EMPTY);
			if (regServiceDTO.getMviOfficeDetails() != null) {
				officeAddress
						.append(regServiceDTO.getMviOfficeDetails().getOfficeAddress1() == null ? StringUtils.EMPTY
								: regServiceDTO.getMviOfficeDetails().getOfficeAddress1())
						.append("\n ")
						.append(regServiceDTO.getMviOfficeDetails().getOfficeAddress2() == null ? StringUtils.EMPTY
								: regServiceDTO.getMviOfficeDetails().getOfficeAddress2())
						.append("\n ")
						.append(regServiceDTO.getMviOfficeDetails().getOfficeName() == null ? StringUtils.EMPTY
								: regServiceDTO.getMviOfficeDetails().getOfficeName());
				parameters.put("officeAddress", officeAddress.toString().toUpperCase());
			}
		}
		parameters.put("DATE", LocalDateTime.now().format(formatter));
		parameters.put("TIME", LocalDateTime.now().format(timeFormatter));
		parameters.put("WATER_MARK", getLogo(ReportFiles.WATER_MARK));
		parameters.put("DIGITAL_SIGN", getLogo(ReportFiles.DIGITAL_SIGN));
		parameters.put("IMAGE_SCAN", qrCode);
		return parameters;
	}

	/**
	 ***** PERMIT RELATED SERVICES START*******
	 * 
	 * @param applicationNo
	 * @return
	 */

	public Map<String, Object> getPermitTvpDetails(String applicationNo, String permitNo, String permitType) {
		String qrCode = StringUtils.EMPTY;
		try {
			qrCode = qRCodeService.sendPDF(getRegistrationQRCodeForPermitstvp(applicationNo));
			if (qrCode == null)
				qrCode = StringUtils.EMPTY;
		} catch (Exception e) {
			logger.debug(" Exception :[] ", e);
			logger.error(" Exception :[] ", e.getMessage());
		}
		Map<String, Object> parameters = new HashMap<>();
		// need to get values dynamically
		parameters = permitCommonDetails(parameters, applicationNo, permitNo, permitType);
		parameters.put("IMAGE_SCAN", qrCode);
		return parameters;
	}

	public Map<String, Object> getPermitPcDetails(String applicationNo, String permitNo, String permitType) {
		String qrCode = StringUtils.EMPTY;
		try {
			qrCode = qRCodeService.sendPDF(getRegistrationQRCodeForPermitspc(applicationNo));
			if (qrCode == null)
				qrCode = StringUtils.EMPTY;
		} catch (Exception e) {
			logger.debug(" Exception :[] ", e);
			logger.error(" Exception :[] ", e.getMessage());
		}
		Map<String, Object> parameters = new HashMap<>();
		// need to get values dynamically
		parameters = permitCommonDetails(parameters, applicationNo, permitNo, permitType);
		parameters.put("IMAGE_SCAN", qrCode);
		return parameters;
	}

	public Map<String, Object> getPermitSbpDetails(String applicationNo, String permitNo, String permitType) {
		String qrCode = StringUtils.EMPTY;
		try {
			qrCode = qRCodeService.sendPDF(getRegistrationQRCodeForPermitssbp(applicationNo));
			if (qrCode == null)
				qrCode = StringUtils.EMPTY;
		} catch (Exception e) {
			logger.debug(" Exception :[] ", e);
			logger.error(" Exception :[] ", e.getMessage());
		}
		Map<String, Object> parameters = new HashMap<>();
		// need to get values dynamically
		parameters = permitCommonDetails(parameters, applicationNo, permitNo, permitType);
		parameters.put("p_dydata1",
				"This permit is renewed upto" + " -------- " + " subject to the following further conditions.");
		parameters.put("p_dydata2",
				"This permit is renewed upto" + " --------- " + " subject to the following further conditions.");
		parameters.put("IMAGE_SCAN", qrCode);
		return parameters;
	}

	public Map<String, Object> getPermitEipDetails(String applicationNo, String permitNo, String permitType) {
		String qrCode = StringUtils.EMPTY;
		try {
			qrCode = qRCodeService.sendPDF(getRegistrationQRCodeForPermitseib(applicationNo));
			if (qrCode == null)
				qrCode = StringUtils.EMPTY;
		} catch (Exception e) {
			logger.debug(" Exception :[] ", e);
			logger.error(" Exception :[] ", e.getMessage());
		}
		Map<String, Object> parameters = new HashMap<>();
		// need to get values dynamically
		parameters = permitCommonDetails(parameters, applicationNo, permitNo, permitType);
		parameters.put("IMAGE_SCAN", qrCode);
		return parameters;
	}

	public Map<String, Object> getPermitNppucDetails(String applicationNo, String permitNo, String permitType) {
		String qrCode = StringUtils.EMPTY;
		try {
			qrCode = qRCodeService.sendPDF(getRegistrationQRCodeForPermitsnppuc(applicationNo));
			if (qrCode == null)
				qrCode = StringUtils.EMPTY;
		} catch (Exception e) {
			logger.debug(" Exception :[] ", e);
			logger.error(" Exception :[] ", e.getMessage());
		}
		Map<String, Object> parameters = new HashMap<>();
		// need to get values dynamically
		parameters = permitCommonDetails(parameters, applicationNo, permitNo, permitType);
		parameters.put("IMAGE_SCAN", qrCode);
		return parameters;
	}

	public Map<String, Object> getPermitppcDetails(String applicationNo, String permitNo, String permitType) {
		String qrCode = StringUtils.EMPTY;
		try {
			qrCode = qRCodeService.sendPDF(getRegistrationQRCodeForPermitspc(applicationNo));
			if (qrCode == null)
				qrCode = StringUtils.EMPTY;
		} catch (Exception e) {
			logger.debug(" Exception :[] ", e);
			logger.error(" Exception :[] ", e.getMessage());
		}
		Map<String, Object> parameters = new HashMap<>();
		// need to get values dynamically
		parameters = permitCommonDetails(parameters, applicationNo, permitNo, permitType);
		parameters.put("IMAGE_SCAN", qrCode);
		return parameters;
	}

	public String permitTempOrPerment(String prNo, String permitNo, String permitType) {
		Optional<PermitDetailsDTO> permitDetailOptional = permitDetailsDAO
				.findByPrNoAndPermitNoAndPermitTypePermitType(prNo, permitNo, permitType);
		if (permitDetailOptional.isPresent()) {
			return permitDetailOptional.get().getPermitClass().getDescription();
		}
		return null;
	}

	public Map<String, Object> getPermitptvDetails(String applicationNo, String permitNo, String permitType) {
		String qrCode = StringUtils.EMPTY;
		try {
			qrCode = qRCodeService.sendPDF(getRegistrationQRCodeForPermitspvt(applicationNo));
			if (qrCode == null)
				qrCode = StringUtils.EMPTY;
		} catch (Exception e) {
			logger.error(" Exception :[] ", e);
		}
		Map<String, Object> parameters = new HashMap<>();
		// need to get values dynamically
		parameters = permitCommonDetails(parameters, applicationNo, permitNo, permitType);
		parameters.put("IMAGE_SCAN", qrCode);
		return parameters;
	}

	private Map<String, Object> permitCommonDetails(Map<String, Object> parameters, String prNo, String permitNo,
			String permitType) {
		RegistrationDetailsDTO registrationDetailsDTO = null;
		PermitDetailsDTO permitDetailsDTO = null;
		OfficeDTO officeDTO = null;
		Integer diffPermitLangenWeight = 0;
		Integer gcwTotal = 0;
		Integer ulwTotal = 0;
		String routeDiff = null;
		Optional<PermitDetailsDTO> permitDetailOptional = permitDetailsDAO
				.findByPrNoAndPermitNoAndPermitTypePermitTypeAndPermitStatus(prNo, permitNo, permitType,
						PermitsEnum.ACTIVE.getDescription());
		if (permitDetailOptional.isPresent()) {
			permitDetailsDTO = permitDetailOptional.get();
		} else {
			throw new BadRequestException("Record Not found");
		}
		Optional<RegistrationDetailsDTO> registrationDetails = registrationDetailDAO.findByPrNo(prNo);
		if (registrationDetails.isPresent()) {
			registrationDetailsDTO = registrationDetails.get();
		}
		String PRESENT_ADDRESS = StringUtils.EMPTY;
		if (registrationDetailsDTO.getApplicantDetails().getPresentAddress() != null) {

			PRESENT_ADDRESS = replaceDefaults(
					registrationDetailsDTO.getApplicantDetails().getPresentAddress().getDoorNo() == null
							? StringUtils.EMPTY
							: registrationDetailsDTO.getApplicantDetails().getPresentAddress().getDoorNo()
									.toUpperCase())
					+ "\n"
					+ replaceDefaults(
							registrationDetailsDTO.getApplicantDetails().getPresentAddress().getStreetName() == null
									? StringUtils.EMPTY
									: registrationDetailsDTO
											.getApplicantDetails().getPresentAddress().getStreetName().toUpperCase())
					+ ","
					+ replaceDefaults((registrationDetailsDTO.getApplicantDetails().getPresentAddress() == null
							|| registrationDetailsDTO.getApplicantDetails().getPresentAddress().getTownOrCity() == null)
									? StringUtils.EMPTY
									: registrationDetailsDTO
											.getApplicantDetails().getPresentAddress().getTownOrCity().toUpperCase())
					+ "\n"
					+ replaceDefaults(
							(registrationDetailsDTO.getApplicantDetails().getPresentAddress().getVillage() == null
									|| registrationDetailsDTO.getApplicantDetails().getPresentAddress().getVillage()
											.getVillageName() == null)
													? StringUtils.EMPTY
													: registrationDetailsDTO.getApplicantDetails().getPresentAddress()
															.getVillage().getVillageName().toUpperCase())
					+ ","
					+ replaceDefaults(
							((registrationDetailsDTO.getApplicantDetails().getPresentAddress().getMandal() == null
									|| registrationDetailsDTO.getApplicantDetails().getPresentAddress().getMandal()
											.getMandalName() == null)
													? ""
													: registrationDetailsDTO.getApplicantDetails().getPresentAddress()
															.getMandal().getMandalName().toUpperCase())
									+ ","
									+ replaceDefaults(((registrationDetailsDTO.getApplicantDetails().getPresentAddress()
											.getDistrict() == null
											|| registrationDetailsDTO.getApplicantDetails().getPresentAddress()
													.getDistrict().getDistrictName() == null)
															? ""
															: registrationDetailsDTO
																	.getApplicantDetails().getPresentAddress()
																	.getDistrict().getDistrictName().toUpperCase()))
									+ "\n"
									+ replaceDefaults(
											((registrationDetailsDTO.getApplicantDetails().getPresentAddress()
													.getState() == null
													|| registrationDetailsDTO.getApplicantDetails().getPresentAddress()
															.getState().getStateName() == null)
																	? ""
																	: registrationDetailsDTO
																			.getApplicantDetails().getPresentAddress()
																			.getState().getStateName().toUpperCase()))
									+ "\n"
									+ replaceDefaults((registrationDetailsDTO.getApplicantDetails().getPresentAddress()
											.getPostOffice() == null ? ""
													: registrationDetailsDTO.getApplicantDetails().getPresentAddress()
															.getPostOffice().getPostOfficeCode())));

		}
		parameters = new HashMap<>();
		RegistrationDetailsDTO dto = null;
		if (permitDetailsDTO.getRdto() != null) {
			dto = permitDetailsDTO.getRdto();
		} else {
			dto = registrationDetailsDTO;
		}
		parameters.put("p_tvpNo",
				permitDetailsDTO.getPermitNo() == null ? StringUtils.EMPTY : permitDetailsDTO.getPermitNo());
		if (dto.getOwnerType() != null && dto.getOwnerType().getCode().equals(OwnerTypeEnum.Individual.getCode())) {
			String fullName = StringUtils.EMPTY;
			if (dto.getApplicantDetails().getFirstName() != null && dto.getApplicantDetails() != null) {
				fullName = dto.getApplicantDetails().getFirstName().toUpperCase() + " "
						+ (dto.getApplicantDetails().getLastName() == null ? StringUtils.EMPTY
								: dto.getApplicantDetails().getLastName().toUpperCase());
			}
			parameters.put("p_holdername", fullName);
		} else {

			parameters.put("p_holdername",
					replaceDefaults(dto.getApplicantDetails().getEntityName() == null ? StringUtils.EMPTY
							: dto.getApplicantDetails().getEntityName().toUpperCase()));
		}
		if (dto.getOwnerType() != null && dto.getOwnerType().getCode().equals(OwnerTypeEnum.Individual.getCode())) {
			parameters.put("p_fname",
					(dto.getApplicantDetails() == null || dto.getApplicantDetails().getFatherName() == null)
							? StringUtils.EMPTY
							: dto.getApplicantDetails().getFatherName().toUpperCase());
		} else {
			parameters.put("p_fname",
					replaceDefaults(dto.getApplicantDetails().getRepresentativeName() == null ? StringUtils.EMPTY
							: dto.getApplicantDetails().getRepresentativeName().toUpperCase()));

		}
		parameters.put("p_addr", PRESENT_ADDRESS);
		parameters.put("p_regnum", dto.getPrNo() == null ? StringUtils.EMPTY : dto.getPrNo().toUpperCase());
		String covCode = dto.getClassOfVehicle();
		MasterCovDTO masterCovDTO = masterCovDAO.findByCovcode(covCode);
		parameters.put("p_cov", "");
		if (masterCovDTO != null) {
			parameters.put("p_cov", replaceDefaults(masterCovDTO.getCovdescription()).isEmpty() ? StringUtils.EMPTY
					: masterCovDTO.getCovdescription().toUpperCase());
		}
		parameters.put("p_makername",
				replaceDefaults((dto.getVahanDetails() == null || dto.getVahanDetails().getMakersDesc() == null)
						? StringUtils.EMPTY
						: dto.getVahanDetails().getMakersDesc().toUpperCase()));
		parameters.put("p_tob",
				replaceDefaults(
						(dto.getVahanDetails() == null || dto.getVahanDetails().getBodyTypeDesc() == null) ? "NA"
								: dto.getVahanDetails().getBodyTypeDesc().toUpperCase()));
		parameters.put("p_yom",
				replaceDefaults(
						(dto.getVahanDetails() == null || dto.getVahanDetails().getManufacturedMonthYear() == null)
								? StringUtils.EMPTY
								: dto.getVahanDetails().getManufacturedMonthYear()));
		parameters.put("p_cn",
				replaceDefaults((dto.getVahanDetails().getChassisNumber() == null || dto.getVahanDetails() == null)
						? StringUtils.EMPTY
						: dto.getVahanDetails().getChassisNumber()));
		parameters.put("p_engine",
				replaceDefaults((dto.getVahanDetails() == null || dto.getVahanDetails().getEngineNumber() == null)
						? StringUtils.EMPTY
						: dto.getVahanDetails().getEngineNumber()));

		parameters.put("p_max_pass_cap",
				replaceDefaults(
						(dto.getVahanDetails() == null || dto.getVahanDetails().getSeatingCapacity() == null) ? "NA"
								: dto.getVahanDetails().getSeatingCapacity()));

		if (CollectionUtils.isNotEmpty(registrationDetailsDTO.getVahanDetails().getTrailerChassisDetailsDTO())) {
			Integer UlwMax = 0;
			Integer max = registrationDetailsDTO.getVahanDetails().getTrailerChassisDetailsDTO().stream()
					.mapToInt(v -> v.getGtw()).max().orElseThrow(NoSuchElementException::new);
			if (registrationDetailsDTO.getVahanDetails().getTrailerChassisDetailsDTO().stream().findFirst().get()
					.getUlw() != null) {
				UlwMax = registrationDetailsDTO.getVahanDetails().getTrailerChassisDetailsDTO().stream()
						.mapToInt(v -> v.getUlw()).max().orElseThrow(NoSuchElementException::new);

			}
			gcwTotal = max + registrationDetailsDTO.getVahanDetails().getGvw();
			ulwTotal = UlwMax + registrationDetailsDTO.getVahanDetails().getUnladenWeight();
			parameters.put("p_gvw",
					replaceDefaults((registrationDetailsDTO.getVahanDetails().getGvw() == null) ? StringUtils.EMPTY
							: (gcwTotal) + "Kgs"));
			diffPermitLangenWeight = gcwTotal - ulwTotal;
			parameters.put("p_ladenweight", replaceDefaults((diffPermitLangenWeight == null) ? StringUtils.EMPTY
					: diffPermitLangenWeight.toString().replace("-", StringUtils.EMPTY)) + " Kgs");
		} else {
			parameters.put("p_gvw",
					replaceDefaults((dto.getVahanDetails() == null || dto.getVahanDetails().getGvw() == null)
							? StringUtils.EMPTY
							: dto.getVahanDetails().getGvw()) + " Kgs");
			diffPermitLangenWeight = (dto.getVahanDetails().getGvw()) - (dto.getVahanDetails().getUnladenWeight());
			parameters.put("p_ladenweight", replaceDefaults((diffPermitLangenWeight == null) ? StringUtils.EMPTY
					: diffPermitLangenWeight.toString().replace("-", StringUtils.EMPTY)) + " Kgs");
		}
		if (CollectionUtils.isNotEmpty(registrationDetailsDTO.getVahanDetails().getTrailerChassisDetailsDTO())) {
			Integer ulwMax = 0;
			if (registrationDetailsDTO.getVahanDetails().getTrailerChassisDetailsDTO().stream().findFirst().get()
					.getUlw() != null) {
				ulwMax = registrationDetailsDTO.getVahanDetails().getTrailerChassisDetailsDTO().stream()
						.mapToInt(v -> v.getUlw()).max().orElseThrow(NoSuchElementException::new);
			}
			ulwTotal = ulwMax + registrationDetailsDTO.getVahanDetails().getUnladenWeight();
			parameters.put("p_uw",
					replaceDefaults(
							(registrationDetailsDTO.getVahanDetails().getUnladenWeight() == null) ? StringUtils.EMPTY
									: (ulwTotal) + "Kgs"));
		} else {
			parameters.put("p_uw",
					replaceDefaults((dto.getVahanDetails() == null || dto.getVahanDetails().getUnladenWeight() == null)
							? StringUtils.EMPTY
							: dto.getVahanDetails().getUnladenWeight()) + " Kgs");
		}
		/*
		 * parameters.put("p_uw", replaceDefaults((dto.getVahanDetails() == null ||
		 * dto.getVahanDetails().getUnladenWeight() == null) ? StringUtils.EMPTY :
		 * dto.getVahanDetails().getUnladenWeight()) + " Kgs");
		 */
		parameters.put("p_permit",
				(permitDetailsDTO.getRouteDetails() == null
						|| permitDetailsDTO.getRouteDetails().getPermitRouteDetails() == null
						|| permitDetailsDTO.getRouteDetails().getPermitRouteDetails().getDescription() == null)
								? StringUtils.EMPTY
								: permitDetailsDTO.getRouteDetails().getPermitRouteDetails().getDescription()
										.toUpperCase());

		if (permitDetailsDTO.getRouteDetails() != null
				&& StringUtils.isNotBlank(permitDetailsDTO.getRouteDetails().getValidFromRoute())) {
			parameters.put("p_permit", permitDetailsDTO.getRouteDetails().getValidFromRoute().toUpperCase());
		}
		if (permitDetailsDTO.getRouteDetails() != null
				&& StringUtils.isNotBlank(permitDetailsDTO.getRouteDetails().getValidToRoute())) {

			parameters.put("p_permit", permitDetailsDTO.getRouteDetails().getValidToRoute().toUpperCase());
		}

		if (permitDetailsDTO.getPermitType().getPermitType().equalsIgnoreCase(PermitTypeEnum.EIB.toString())
				|| permitDetailsDTO.getPermitType().getPermitType().equalsIgnoreCase(PermitTypeEnum.PSVP.toString())) {

			String temp = (permitDetailsDTO.getRouteDetails() != null
					&& permitDetailsDTO.getRouteDetails().getValidToRoute() != null) ? " TO " : StringUtils.SPACE;

			String fromRoute = (permitDetailsDTO.getRouteDetails() != null
					&& permitDetailsDTO.getRouteDetails().getValidFromRoute() != null)
							? permitDetailsDTO.getRouteDetails().getValidFromRoute().toUpperCase()
							: StringUtils.EMPTY;
			String toRoute = (permitDetailsDTO.getRouteDetails() != null
					&& permitDetailsDTO.getRouteDetails().getValidToRoute() != null)
							? permitDetailsDTO.getRouteDetails().getValidToRoute().toUpperCase()
							: StringUtils.EMPTY;
			parameters.put("p_permit", fromRoute + temp + toRoute);

		}

		if (permitDetailsDTO.getPermitType().getPermitType().equalsIgnoreCase(PermitTypeEnum.TCCP.toString())
				|| permitDetailsDTO.getPermitType().getPermitType().equalsIgnoreCase(PermitTypeEnum.TGCP.toString())
				|| permitDetailsDTO.getPermitType().getPermitType().equalsIgnoreCase(PermitTypeEnum.TSCP.toString())) {
			routeDiff = permitDetailsDTO.getRouteDetails().getForwardRoute() + "--"
					+ permitDetailsDTO.getRouteDetails().getReturnRoute();
			parameters.put("p_permit",
					(permitDetailsDTO.getRouteDetails() == null
							|| permitDetailsDTO.getRouteDetails().getForwardRoute() == null
							|| permitDetailsDTO.getRouteDetails().getReturnRoute() == null)
									? "---"
									: "FROM " + (permitDetailsDTO.getRouteDetails().getForwardRoute().toUpperCase())
											+ " TO "
											+ permitDetailsDTO.getRouteDetails().getReturnRoute().toUpperCase());
		}
		// parameters.put("p_permit","");
		if (permitDetailsDTO.getPermitType().getPermitType().equalsIgnoreCase(PermitTypeEnum.CCP.toString())) {

			if (permitDetailsDTO.getRouteDetails().getRouteType() != null
					&& StringUtils.isNoneBlank(permitDetailsDTO.getRouteDetails().getRouteType().getRouteCode())
					&& (!permitDetailsDTO.getRouteDetails().getRouteType().getRouteCode().equalsIgnoreCase("S"))) {
				if (permitDetailsDTO.getRouteDetails().getRouteType().getRouteCode().equalsIgnoreCase("O")) {
					routeDiff = "One District " + permitDetailsDTO.getRouteDetails().getFromDistrict();
				}
				if (permitDetailsDTO.getRouteDetails().getRouteType().getRouteCode().equalsIgnoreCase("T")) {
					routeDiff = "From District " + permitDetailsDTO.getRouteDetails().getFromDistrict()
							+ "-- To District " + permitDetailsDTO.getRouteDetails().getToDistrict();
				}

				parameters.put("p_permit",
						(permitDetailsDTO.getRouteDetails().getRouteType() == null) ? "---" : routeDiff);

			} else {
				if (permitDetailsDTO.getRouteDetails().getPermitRouteDetails() != null) {
					routeDiff = permitDetailsDTO.getRouteDetails().getPermitRouteDetails().getDescription();
				}

				parameters.put("p_permit",
						(permitDetailsDTO.getRouteDetails() == null
								|| permitDetailsDTO.getRouteDetails().getPermitRouteDetails() == null
								|| permitDetailsDTO.getRouteDetails().getPermitRouteDetails().getDescription() == null)
										? "---"
										: routeDiff);
			}
		}

		parameters.put("p_validfrom",
				((permitDetailsDTO.getPermitValidityDetails() == null
						|| permitDetailsDTO.getPermitValidityDetails().getPermitValidFrom() == null) ? "---"
								: permitDetailsDTO.getPermitValidityDetails().getPermitValidFrom().format(formatter)));

		parameters.put("p_validto",
				((permitDetailsDTO.getPermitValidityDetails() == null
						|| permitDetailsDTO.getPermitValidityDetails().getPermitValidTo() == null) ? "---"
								: permitDetailsDTO.getPermitValidityDetails().getPermitValidTo().format(formatter)));
		parameters.put("p_nature",
				((permitDetailsDTO.getPermitValidityDetails() == null
						|| permitDetailsDTO.getGoodsDetails().getPermitAllowedgoods() == null) ? StringUtils.EMPTY
								: permitDetailsDTO.getGoodsDetails().getPermitAllowedgoods().toUpperCase()));
		parameters.put("p_ratOffare", "");
		parameters.put("purpose_eib",
				(permitDetailsDTO.getGoodsDetails() == null
						|| permitDetailsDTO.getGoodsDetails().getPermitAllowedgoods() == null) ? StringUtils.EMPTY
								: permitDetailsDTO.getGoodsDetails().getPermitAllowedgoods());
		parameters.put("D_validity",
				(dto == null || dto.getRegistrationValidity() == null
						|| dto.getRegistrationValidity().getRegistrationValidity() == null) ? StringUtils.EMPTY
								: dto.getRegistrationValidity().getRegistrationValidity().format(formatter));
		parameters.put("office_name", StringUtils.EMPTY);
		if (registrationDetailsDTO.getOfficeDetails() != null
				&& registrationDetailsDTO.getOfficeDetails().getOfficeCode() != null) {
			Optional<OfficeDTO> officeDtoOptional = officeDAO
					.findByOfficeCode(registrationDetailsDTO.getOfficeDetails().getOfficeCode());
			parameters.put("office_name", StringUtils.EMPTY);
			if (officeDtoOptional.isPresent()) {
				officeDTO = officeDtoOptional.get();
				parameters.put("office_name",
						officeDTO.getOfficeName() == null ? StringUtils.EMPTY : officeDTO.getOfficeName());
			}
		}
		parameters.put("p_dydata", "This permit is renewed upto ------ subject to the following further conditions.");
		if (PermitTypeEnum.NP.toString().equalsIgnoreCase(permitType)) {
			parameters.put("p_dydata", "Renewed upto: ------ ");
		}
		parameters.put("purpose_valid",
				permitDetailsDTO.getGoodsDetails().getPermitAllowedgoods() == null ? StringUtils.EMPTY
						: permitDetailsDTO.getGoodsDetails().getPermitAllowedgoods());
		parameters.put("tax_paid",
				(dto.getTaxvalidity() == null ? StringUtils.EMPTY : dto.getTaxvalidity().format(formatter)));
		parameters.put("AP_LOGO", getLogo(ReportFiles.APLOGO));
		parameters.put("otsilogo", getLogo(ReportFiles.OTSILOGO));
		parameters.put("p_date", LocalDateTime.now().format(formatter));
		parameters.put("TIME", LocalTime.now().toString());
		parameters.put("WATER_MARK", getLogo(ReportFiles.WATER_MARK));
		parameters.put("DIGITAL_SIGN", getLogo(ReportFiles.DIGITAL_SIGN));

		return parameters;
	}

	public Map<String, Object> getOtherStateDetails(String applicationNo) {

		RegServiceDTO regServiceDTO = null;
		OfficeDTO officeDTO = null;
		Optional<RegServiceDTO> regServiceDTOOptional = regServiceDAO.findByApplicationNo(applicationNo);
		if (regServiceDTOOptional.isPresent()) {
			regServiceDTO = regServiceDTOOptional.get();
		}
		String qrCode = StringUtils.EMPTY;
		try {
			qrCode = qRCodeService.sendPDF(getRegistrationQRCodeForOtherstate(regServiceDTO.getApplicationNo()));
			if (qrCode == null)
				qrCode = StringUtils.EMPTY;
		} catch (Exception e) {
			logger.error(" Exception :[] ", e);
		}
		Map<String, Object> parameters = new HashMap<>();
		parameters.put("AP_LOGO", getLogo(ReportFiles.APLOGO));
		parameters.put("otsilogo", getLogo(ReportFiles.OTSILOGO));
		parameters.put("FINC_DATE", LocalDateTime.now().format(formatter));
		parameters.put("WATER_MARK", getLogo(ReportFiles.WATER_MARK));
		parameters.put("DIGITAL_SIGN", getLogo(ReportFiles.DIGITAL_SIGN));
		// serviceTYPE
		parameters.put("SERVICETYPE", "");
		List<ServiceEnum> serviceIds = regServiceDTO.getServiceIds().stream()
				.map(id -> ServiceEnum.getServiceEnumById(id)).collect(Collectors.toList());
		for (ServiceEnum serviceEnum : serviceIds) {
			if (serviceEnum != null) {
				parameters.put("SERVICETYPE", serviceEnum.getDesc().toString().toUpperCase() + " CONFIRMATION");
			}
		}

		// RTA ADDRESS
		String rtaAddress = StringUtils.EMPTY;
		parameters.put("RTA_ADDR", StringUtils.EMPTY);
		if (regServiceDTO.getRegistrationDetails().getOfficeDetails() != null
				&& regServiceDTO.getRegistrationDetails().getOfficeDetails().getOfficeCode() != null) {
			Optional<OfficeDTO> OfficeDtoOptional = officeDAO
					.findByOfficeCode(regServiceDTO.getRegistrationDetails().getOfficeDetails().getOfficeCode());
			parameters.put("RTA_ADDR", StringUtils.EMPTY);
			parameters.put("office_name", StringUtils.EMPTY);
			if (OfficeDtoOptional != null) {
				officeDTO = OfficeDtoOptional.get();
				rtaAddress = "Registering Authority" + "\n"
						+ (officeDTO.getOfficeName() == null ? StringUtils.EMPTY : officeDTO.getOfficeName()) + ","
						+ "\n"
						+ (officeDTO.getOfficeAddress1() == null ? StringUtils.EMPTY : officeDTO.getOfficeAddress1())
						+ "," + "\n"
						+ (officeDTO.getOfficeAddress2() == null ? StringUtils.EMPTY : officeDTO.getOfficeAddress2())
						+ "," + "\n"
						+ (officeDTO.getOfficeCity() == null ? StringUtils.EMPTY : officeDTO.getOfficeCity())
						+ "Andhra Pradesh" + ".";
				parameters.put("RTA_ADDR", rtaAddress);
				parameters.put("office_name",
						officeDTO.getOfficeName() == null ? StringUtils.EMPTY : officeDTO.getOfficeName());
			}
		}
		String applNoAndDate = regServiceDTO.getApplicationNo();
		parameters.put("APPL_DATE", applNoAndDate);
		String dataEntryDynamic2 = "Appln dated "
				+ ((regServiceDTO.getnOCDetails() == null || regServiceDTO.getnOCDetails().getIssueDate() == null)
						? StringUtils.EMPTY
						: regServiceDTO.getnOCDetails().getIssueDate())
				+ " from Shri " + regServiceDTO.getRegistrationDetails().getApplicantDetails().getFirstName() + " .";
		parameters.put("reference", dataEntryDynamic2);
		String covCode = regServiceDTO.getRegistrationDetails().getClassOfVehicle();
		MasterCovDTO masterCovDTO = masterCovDAO.findByCovcode(covCode);
		if (masterCovDTO != null) {
			parameters.put("COV", replaceDefaults(masterCovDTO.getCovdescription()).isEmpty() ? StringUtils.EMPTY
					: masterCovDTO.getCovdescription());
		}
		String dataEntryDynamic1 = "Motor Vehicles - Vehicle No. "
				+ (regServiceDTO.getRegistrationDetails().getPrNo() == null ? "----"
						: regServiceDTO.getRegistrationDetails().getPrNo())
				+ " "
				+ (masterCovDTO.getCovdescription() == null ? StringUtils.EMPTY : masterCovDTO.getCovdescription())
				+ "- NOC issued by your office -Confirmation of genuineness of NOC - Requested - Reg.";
		parameters.put("sub_ref", dataEntryDynamic1);
		String otherStateContent = "In the reference cited, Shri "
				+ regServiceDTO.getRegistrationDetails().getApplicantDetails().getFirstName()
				+ ", transferee of Vehicle No."
				+ (regServiceDTO.getRegistrationDetails().getPrNo() == null ? StringUtils.EMPTY
						: regServiceDTO.getRegistrationDetails().getPrNo())
				+ " "
				+ (masterCovDTO.getCovdescription() == null ? StringUtils.EMPTY : masterCovDTO.getCovdescription())
				+ " has applied for RREGREG along with NOC purportedly issued by your office. The vehicle particulars are mentioned below.";
		parameters.put("other_state_content", otherStateContent);

		parameters.put("MAKERS_NAME",
				replaceDefaults(regServiceDTO.getRegistrationDetails().getVahanDetails().getMakersModel()).isEmpty()
						? StringUtils.EMPTY
						: regServiceDTO.getRegistrationDetails().getVahanDetails().getMakersModel());
		parameters.put("MAKERS_CLASS",
				replaceDefaults(regServiceDTO.getRegistrationDetails().getVahanDetails().getMakersDesc()).isEmpty()
						? StringUtils.EMPTY
						: regServiceDTO.getRegistrationDetails().getVahanDetails().getMakersDesc());

		parameters.put("CHASSIS_NUM",
				replaceDefaults(regServiceDTO.getRegistrationDetails().getVahanDetails().getChassisNumber()).isEmpty()
						? StringUtils.EMPTY
						: regServiceDTO.getRegistrationDetails().getVahanDetails().getChassisNumber());

		parameters.put("ENGINE_NUM",
				replaceDefaults(regServiceDTO.getRegistrationDetails().getVahanDetails().getEngineNumber()).isEmpty()
						? StringUtils.EMPTY
						: regServiceDTO.getRegistrationDetails().getVahanDetails().getEngineNumber());

		parameters.put("NOC_date", StringUtils.EMPTY);
		if (regServiceDTO.getnOCDetails() != null) {
			parameters.put("NOC_date", (regServiceDTO.getnOCDetails().getIssueDate() == null ? StringUtils.EMPTY
					: regServiceDTO.getnOCDetails().getIssueDate().format(formatter)));
		}
		if (regServiceDTO.getRegistrationDetails().getPrNo() != null) {
			parameters.put("Veh_No", regServiceDTO.getRegistrationDetails().getPrNo() == null ? StringUtils.EMPTY
					: regServiceDTO.getRegistrationDetails().getPrNo());
		}
		parameters.put("issue_rta_office", StringUtils.EMPTY);
		if (regServiceDTO.getnOCDetails() != null) {
			parameters.put("issue_rta_office", (regServiceDTO.getnOCDetails().getRtaOffice() == null ? StringUtils.EMPTY
					: regServiceDTO.getnOCDetails().getRtaOffice() + ","));
		}

		parameters.put("state", StringUtils.EMPTY);
		if (regServiceDTO.getnOCDetails() != null) {
			parameters.put("state", (regServiceDTO.getnOCDetails().getState() == null ? StringUtils.EMPTY
					: regServiceDTO.getnOCDetails().getState() + "."));
		}

		parameters.put("QR_SCAN", qrCode);

		return parameters;

	}

	public Map<String, Object> getNocDetails(String applicationNo) {
		RegServiceDTO regServiceDTO = null;
		OfficeDTO officeDTO = null;
		UserDTO userDTO = null;
		Optional<RegServiceDTO> regServiceDTOOptional = regServiceDAO.findByApplicationNo(applicationNo);
		if (!regServiceDTOOptional.isPresent()) {
			logger.error("Application not available");
			throw new BadRequestException("Application not available");
		}
		regServiceDTO = regServiceDTOOptional.get();
		String qrCode = StringUtils.EMPTY;
		try {
			qrCode = qRCodeService.sendPDF(getRegistrationQRCodeForNoc(regServiceDTO.getApplicationNo()));
			if (qrCode == null)
				qrCode = StringUtils.EMPTY;
		} catch (Exception e) {
			logger.debug(" Exception :[] ", e);
			logger.error(" Exception :[] ", e.getMessage());
		}

		Map<String, Object> parameters = new HashMap<>();
		parameters.put("AP_LOGO", getLogo(ReportFiles.APLOGO));
		parameters.put("otsilogo", getLogo(ReportFiles.OTSILOGO));
		parameters.put("FINC_DATE", LocalDateTime.now().format(formatter));
		parameters.put("WATER_MARK", getLogo(ReportFiles.WATER_MARK));
		parameters.put("DIGITAL_SIGN", getLogo(ReportFiles.DIGITAL_SIGN));

		if (regServiceDTO.getRegistrationDetails() != null
				&& regServiceDTO.getRegistrationDetails().getPrNo() != null) {
			parameters.put("Veh_No", regServiceDTO.getRegistrationDetails().getPrNo() == null ? StringUtils.EMPTY
					: regServiceDTO.getRegistrationDetails().getPrNo());
			String fullName = StringUtils.EMPTY;
			if (!regServiceDTO.getRegistrationDetails().getOwnerType().equals(OwnerTypeEnum.Individual)) {
				if (regServiceDTO.getRegistrationDetails().getApplicantDetails().getEntityName() != null) {
					fullName = regServiceDTO.getRegistrationDetails().getApplicantDetails().getEntityName();
				}
			} else {
				if (regServiceDTO.getRegistrationDetails().getApplicantDetails().getFirstName() != null
						&& regServiceDTO.getRegistrationDetails().getApplicantDetails() != null) {
					fullName = regServiceDTO.getRegistrationDetails().getApplicantDetails().getFirstName() + " "
							+ (regServiceDTO.getRegistrationDetails().getApplicantDetails().getLastName() == null
									? StringUtils.EMPTY
									: regServiceDTO.getRegistrationDetails().getApplicantDetails().getLastName());
				}
			}

			parameters.put("OWNER_NAME", fullName);
			parameters.put("FATHER_NAME",
					(regServiceDTO.getRegistrationDetails().getApplicantDetails() == null
							|| regServiceDTO.getRegistrationDetails().getApplicantDetails().getFatherName() == null)
									? StringUtils.EMPTY
									: regServiceDTO.getRegistrationDetails().getApplicantDetails().getFatherName());
		}
		String covCode = regServiceDTO.getRegistrationDetails().getClassOfVehicle();
		MasterCovDTO masterCovDTO = masterCovDAO.findByCovcode(covCode);
		if (masterCovDTO != null) {
			parameters.put("COV", replaceDefaults(masterCovDTO.getCovdescription()).isEmpty() ? StringUtils.EMPTY
					: masterCovDTO.getCovdescription());
		}

		parameters.put("CHASSIS_NUM",
				replaceDefaults(regServiceDTO.getRegistrationDetails().getVahanDetails().getChassisNumber()).isEmpty()
						? StringUtils.EMPTY
						: regServiceDTO.getRegistrationDetails().getVahanDetails().getChassisNumber());

		parameters.put("ENGINE_NUM",
				replaceDefaults(regServiceDTO.getRegistrationDetails().getVahanDetails().getEngineNumber()).isEmpty()
						? StringUtils.EMPTY
						: regServiceDTO.getRegistrationDetails().getVahanDetails().getEngineNumber());
		String officeDetails = StringUtils.EMPTY;
		if (regServiceDTO.getOfficeDetails() != null) {
			officeDetails = ((regServiceDTO.getOfficeDetails() == null
					|| regServiceDTO.getOfficeDetails().getOfficeName() == null) ? StringUtils.EMPTY
							: regServiceDTO.getOfficeDetails().getOfficeName())
					+ "\n"
					+ ((regServiceDTO.getOfficeDetails() == null
							|| regServiceDTO.getOfficeDetails().getOfficeAddress1() == null) ? StringUtils.EMPTY
									: regServiceDTO.getOfficeDetails().getOfficeAddress1())
					+ "\n"
					+ ((regServiceDTO.getOfficeDetails() == null
							|| regServiceDTO.getOfficeDetails().getOfficeAddress1() == null) ? StringUtils.EMPTY
									: regServiceDTO.getOfficeDetails().getOfficeAddress1());
			parameters.put("OTHER_RTA", officeDetails);
		}
		parameters.put("PERIOD_STAY",
				(regServiceDTO.getnOCDetails() == null || regServiceDTO.getnOCDetails().getPeriodOfStay() == null
						? StringUtils.EMPTY
						: regServiceDTO.getnOCDetails().getPeriodOfStay()));

		parameters.put("office_name", StringUtils.EMPTY);
		if (regServiceDTO.getRegistrationDetails().getOfficeDetails() != null
				&& regServiceDTO.getRegistrationDetails().getOfficeDetails().getOfficeCode() != null) {
			Optional<OfficeDTO> OfficeDTOOptional = officeDAO
					.findByOfficeCode(regServiceDTO.getRegistrationDetails().getOfficeDetails().getOfficeCode());
			parameters.put("office_name", StringUtils.EMPTY);
			if (OfficeDTOOptional != null) {
				officeDTO = OfficeDTOOptional.get();
				parameters.put("office_name",
						officeDTO.getOfficeName() == null ? StringUtils.EMPTY : officeDTO.getOfficeName());
			}
		}
		String nocDym = StringUtils.EMPTY;
		nocDym = "I/we intend to transfer the vehicle to the jurisdiction of the Registering Authority. "
				+ (regServiceDTO.getnOCDetails() == null || regServiceDTO.getnOCDetails().getRtaOffice() == null
						? StringUtils.EMPTY
						: regServiceDTO.getnOCDetails().getRtaOffice().toUpperCase())
				+ " I/we intend to sell the vehicle to Shri/Smt./Kumari " + "________________________________________"
				+ ". Who resides in the jurisdiction of the Registering authority "
				+ ((regServiceDTO.getnOCDetails() == null || regServiceDTO.getnOCDetails().getDistrict() == null
						|| regServiceDTO.getnOCDetails().getRtaOffice() == null)
								? StringUtils.EMPTY
								: (regServiceDTO.getnOCDetails().getRtaOffice().toUpperCase() + " , "
										+ regServiceDTO.getnOCDetails().getDistrict().toUpperCase()))
				+ " of the state of "
				+ ((regServiceDTO.getnOCDetails() == null || regServiceDTO.getnOCDetails().getState() == null)
						? StringUtils.EMPTY
						: regServiceDTO.getnOCDetails().getState().toUpperCase())
				+ " I/we therefore request for the issue of a no objection certificate for my/our vehicle the particulars of which are famished below:";

		parameters.put("NOC_CONTENT", nocDym);
		String PRESENT_ADDRESS = StringUtils.EMPTY;
		if (regServiceDTO.getRegistrationDetails().getApplicantDetails() != null
				&& regServiceDTO.getRegistrationDetails().getApplicantDetails().getPresentAddress() != null) {
			PRESENT_ADDRESS = replaceDefaults(
					regServiceDTO.getRegistrationDetails().getApplicantDetails().getPresentAddress().getDoorNo() == null
							? StringUtils.EMPTY
							: regServiceDTO.getRegistrationDetails().getApplicantDetails().getPresentAddress()
									.getDoorNo().toUpperCase())
					+ ","
					+ replaceDefaults(regServiceDTO.getRegistrationDetails().getApplicantDetails().getPresentAddress()
							.getStreetName() == null
									? StringUtils.EMPTY
									: regServiceDTO.getRegistrationDetails().getApplicantDetails().getPresentAddress()
											.getStreetName().toUpperCase())
					+ ","
					+ replaceDefaults(regServiceDTO.getRegistrationDetails().getApplicantDetails().getPresentAddress()
							.getTownOrCity() == null
									? StringUtils.EMPTY
									: regServiceDTO.getRegistrationDetails().getApplicantDetails().getPresentAddress()
											.getTownOrCity().toUpperCase())
					+ "\n"
					+ replaceDefaults((regServiceDTO.getRegistrationDetails().getApplicantDetails().getPresentAddress()
							.getVillage() == null)
							|| regServiceDTO.getRegistrationDetails().getApplicantDetails().getPresentAddress()
									.getVillage().getVillageName() == null
											? StringUtils.EMPTY
											: regServiceDTO.getRegistrationDetails().getApplicantDetails()
													.getPresentAddress().getVillage().getVillageName().toUpperCase())
					+ ","
					+ replaceDefaults(((regServiceDTO.getRegistrationDetails().getApplicantDetails().getPresentAddress()
							.getMandal() == null)
							|| null == regServiceDTO.getRegistrationDetails().getApplicantDetails().getPresentAddress()
									.getMandal().getMandalName())
											? ""
											: regServiceDTO.getRegistrationDetails().getApplicantDetails()
													.getPresentAddress().getMandal().getMandalName().toUpperCase())
					+ "\n"
					+ replaceDefaults(
							(regServiceDTO.getRegistrationDetails().getApplicantDetails().getPresentAddress()
									.getDistrict() == null
											? ""
											: regServiceDTO.getRegistrationDetails().getApplicantDetails()
													.getPresentAddress().getDistrict().getDistrictName().toUpperCase()))
					+ "\n"
					+ replaceDefaults((regServiceDTO.getRegistrationDetails().getApplicantDetails().getPresentAddress()
							.getState() == null ? ""

									: regServiceDTO.getRegistrationDetails().getApplicantDetails().getPresentAddress()

											.getState().getStateName().toUpperCase()))
					+ ","
					+ replaceDefaults((regServiceDTO.getRegistrationDetails().getApplicantDetails().getPresentAddress()
							.getCountry() == null
									? ""
									: regServiceDTO.getRegistrationDetails().getApplicantDetails().getPresentAddress()
											.getCountry().getCountryName().toUpperCase()))

					+ ","
					+ replaceDefaults((regServiceDTO.getRegistrationDetails().getApplicantDetails().getPresentAddress()
							.getPostOffice() == null ? ""

									: regServiceDTO.getRegistrationDetails().getApplicantDetails().getPresentAddress()

											.getPostOffice().getPostOfficeCode()));

			parameters.put("OWNER_ADDRES", PRESENT_ADDRESS + ".");
		}
		parameters.put("tax_period",
				(regServiceDTO.getRegistrationDetails() == null
						|| regServiceDTO.getRegistrationDetails().getRegistrationValidity() == null
						|| regServiceDTO.getRegistrationDetails().getRegistrationValidity().getTaxValidity() == null)
								? StringUtils.EMPTY
								: regServiceDTO.getRegistrationDetails().getRegistrationValidity().getTaxValidity()
										.format(formatter));
		parameters.put("tax_pend", "");
		parameters.put("theft_period", "");
		parameters.put("auth_check", "");
		parameters.put("proh_good", "");

		parameters.put("QR_SCAN", qrCode);
		parameters.put("citizen_Qr", qrCode);
		PRESENT_ADDRESS = replaceDefaults(
				regServiceDTO.getRegistrationDetails().getApplicantDetails().getPresentAddress().getDoorNo() == null
						? StringUtils.EMPTY
						: regServiceDTO.getRegistrationDetails().getApplicantDetails().getPresentAddress().getDoorNo()
								.toUpperCase())
				+ ","
				+ replaceDefaults(regServiceDTO.getRegistrationDetails().getApplicantDetails().getPresentAddress()
						.getStreetName() == null
								? StringUtils.EMPTY
								: regServiceDTO.getRegistrationDetails().getApplicantDetails().getPresentAddress()
										.getStreetName().toUpperCase())
				+ ","
				+ replaceDefaults(regServiceDTO.getRegistrationDetails().getApplicantDetails().getPresentAddress()
						.getTownOrCity() == null
								? StringUtils.EMPTY
								: regServiceDTO.getRegistrationDetails().getApplicantDetails().getPresentAddress()
										.getTownOrCity().toUpperCase())
				+ "\n"
				+ replaceDefaults((regServiceDTO.getRegistrationDetails().getApplicantDetails().getPresentAddress()
						.getVillage() == null)
						|| regServiceDTO.getRegistrationDetails().getApplicantDetails().getPresentAddress().getVillage()
								.getVillageName() == null
										? StringUtils.EMPTY
										: regServiceDTO.getRegistrationDetails().getApplicantDetails()
												.getPresentAddress().getVillage().getVillageName().toUpperCase())
				+ ", "
				+ replaceDefaults(((regServiceDTO.getRegistrationDetails().getApplicantDetails().getPresentAddress()
						.getMandal() == null)
						|| null == regServiceDTO.getRegistrationDetails().getApplicantDetails().getPresentAddress()
								.getMandal().getMandalName())
										? ""
										: regServiceDTO.getRegistrationDetails().getApplicantDetails()
												.getPresentAddress().getMandal().getMandalName().toUpperCase())
				+ ", "
				+ replaceDefaults(
						(regServiceDTO.getRegistrationDetails().getApplicantDetails().getPresentAddress()
								.getDistrict() == null
										? ""
										: regServiceDTO.getRegistrationDetails().getApplicantDetails()
												.getPresentAddress().getDistrict().getDistrictName().toUpperCase()))
				+ ", "
				+ replaceDefaults((regServiceDTO.getRegistrationDetails().getApplicantDetails().getPresentAddress()
						.getState() == null ? ""

								: regServiceDTO.getRegistrationDetails().getApplicantDetails().getPresentAddress()

										.getState().getStateName().toUpperCase()))
				+ ", "
				+ replaceDefaults((regServiceDTO.getRegistrationDetails().getApplicantDetails().getPresentAddress()
						.getCountry() == null
								? ""
								: regServiceDTO.getRegistrationDetails().getApplicantDetails().getPresentAddress()
										.getCountry().getCountryName().toUpperCase()))

				+ ", "
				+ replaceDefaults((regServiceDTO.getRegistrationDetails().getApplicantDetails().getPresentAddress()
						.getPostOffice() == null ? ""

								: regServiceDTO.getRegistrationDetails().getApplicantDetails().getPresentAddress()

										.getPostOffice().getPostOfficeCode()));

		String financer_address = StringUtils.EMPTY;
		parameters.put("hypo_name", financer_address);
		if (regServiceDTO.getRegistrationDetails() != null
				&& regServiceDTO.getRegistrationDetails().getFinanceDetails() != null
				&& regServiceDTO.getRegistrationDetails().getFinanceDetails().getUserId() != null
				&& (!regServiceDTO.getServiceType().contains(ServiceEnum.HIREPURCHASETERMINATION))) {
			Optional<UserDTO> user = userDAO
					.findByUserId(regServiceDTO.getRegistrationDetails().getFinanceDetails().getUserId());
			if (user.isPresent()) {
				userDTO = user.get();
			}
			if (userDTO != null && regServiceDTO.getRegistrationDetails().getIsFinancier() == Boolean.TRUE) {

				financer_address = ((userDTO.getFirstName() == null) ? StringUtils.EMPTY : userDTO.getFirstName())
						+ "\n"
						+ ((userDTO.getMandal() == null || userDTO.getMandal().getMandalName() == null)
								? StringUtils.EMPTY
								: userDTO.getMandal().getMandalName())
						+ "\n"
						+ ((userDTO.getState() == null || userDTO.getState().getStateName() == null) ? StringUtils.EMPTY
								: userDTO.getState().getStateName())
						+ " - "
						+ ((userDTO.getPincode() == null || userDTO.getPincode().getPostOfficeCode() == null)
								? StringUtils.EMPTY
								: userDTO.getPincode().getPostOfficeCode());
			}

			parameters.put("hypo_name", financer_address);
		} else if (regServiceDTO.getRegistrationDetails() != null
				&& regServiceDTO.getRegistrationDetails().getFinanceDetails() != null
				&& (!regServiceDTO.getServiceType().contains(ServiceEnum.HIREPURCHASETERMINATION))) {
			financer_address = (regServiceDTO.getRegistrationDetails().getFinanceDetails().getFinancerName() == null
					? StringUtils.EMPTY
					: regServiceDTO.getRegistrationDetails().getFinanceDetails().getFinancerName())
					+ "\n"
					+ (regServiceDTO.getRegistrationDetails().getFinanceDetails().getAddress() == null
							? StringUtils.EMPTY
							: regServiceDTO.getRegistrationDetails().getFinanceDetails().getAddress())
					+ ".";

			parameters.put("hypo_name", financer_address);
		}

		parameters.put("noc_off_data",
				(((regServiceDTO.getRegistrationDetails().getApplicantDetails() == null
						|| regServiceDTO.getRegistrationDetails().getApplicantDetails().getFirstName() == null)
								? StringUtils.EMPTY
								: regServiceDTO.getRegistrationDetails().getApplicantDetails().getFirstName()
										.toUpperCase())
						+ " , " + "Son / wife/ daughter of: "
						+ ((regServiceDTO.getRegistrationDetails().getApplicantDetails() == null
								|| regServiceDTO.getRegistrationDetails().getApplicantDetails().getFatherName() == null)
										? StringUtils.EMPTY
										: regServiceDTO.getRegistrationDetails().getApplicantDetails().getFatherName()
												.toUpperCase())
						+ "," + PRESENT_ADDRESS + " ; "
						+ (regServiceDTO.getnOCDetails() == null || regServiceDTO.getnOCDetails().getRtaOffice() == null
								? StringUtils.EMPTY
								: regServiceDTO.getnOCDetails().getRtaOffice().toUpperCase())));

		parameters.put("noc_appNo", replaceDefaults(regServiceDTO.getApplicationNo()));
		parameters.put("issue_date", regServiceDTO.getApprovedDate() == null ? StringUtils.EMPTY
				: regServiceDTO.getApprovedDate().format(formatter));
		parameters.put("noc_officeName",
				regServiceDTO.getnOCDetails() == null || regServiceDTO.getnOCDetails().getRtaOffice() == null
						? StringUtils.EMPTY
						: regServiceDTO.getnOCDetails().getRtaOffice().toUpperCase());
		parameters.put("issue_NocDate", regServiceDTO.getApprovedDate() == null ? StringUtils.EMPTY
				: regServiceDTO.getApprovedDate().format(formatter));
		String nocAddress = StringUtils.EMPTY;
		nocAddress = regServiceDTO.getOfficeDetails() == null
				|| regServiceDTO.getOfficeDetails().getOfficeName() == null ? StringUtils.EMPTY
						: regServiceDTO.getOfficeDetails().getOfficeName();
		nocAddress = nocAddress + ", "
				+ (regServiceDTO.getOfficeDetails() == null
						|| regServiceDTO.getOfficeDetails().getOfficeAddress1() == null ? StringUtils.EMPTY
								: regServiceDTO.getOfficeDetails().getOfficeAddress1());
		parameters.put("noc_address", nocAddress);
		parameters.put("prNo", replaceDefaults(regServiceDTO.getPrNo()));
		parameters.put("noc_IssueDate", regServiceDTO.getApprovedDate() == null ? StringUtils.EMPTY
				: regServiceDTO.getApprovedDate().format(formatter));

		return parameters;

	}

	public Map<String, Object> getRegCitizenServices(String applicationNo) {
		RegServiceDTO regServiceDTO = null;
		Map<String, Object> parameters = null;
		List<ServiceEnum> serviceIds = null;
		Optional<RegistrationDetailsDTO> regDTOOptional = null;
		RegistrationDetailsDTO registrationDetailsDTO = null;
		List<ServiceEnum> serviceEnumsList = new ArrayList<>();
		Optional<RegServiceDTO> regServiceDTOOptional = regServiceDAO.findByApplicationNo(applicationNo);
		if (!regServiceDTOOptional.isPresent()) {
			regDTOOptional = registrationDetailDAO.findByApplicationNo(applicationNo);
			registrationDetailsDTO = regDTOOptional.get();
			parameters = getTransportDetails(registrationDetailsDTO.getApplicationNo());
		}
		if (regServiceDTOOptional.isPresent()) {
			regServiceDTO = regServiceDTOOptional.get();
			parameters = getTransportDetails(regServiceDTO.getRegistrationDetails().getApplicationNo());
		}
		String qrCode = StringUtils.EMPTY;
		try {
			qrCode = qRCodeService.sendPDF(getRegistrationQRCodeForTransportCitizen(applicationNo));
			if (qrCode == null)
				qrCode = StringUtils.EMPTY;
		} catch (Exception e) {
			logger.error(" Exception :[] ", e);
		}
		parameters.put("IMAGE_SCAN", qrCode);
		if (regServiceDTO != null) {
			if (regServiceDTO.getServiceIds() != null) {
				serviceIds = regServiceDTO.getServiceIds().stream().map(id -> ServiceEnum.getServiceEnumById(id))
						.collect(Collectors.toList());
			}
			parameters.put("DUPL", "");
			parameters.put("NOC_remarks", "");
			parameters.put("Trans_type", "");
			for (ServiceEnum serviceEnum : serviceIds) {
				if (serviceEnum != null && serviceEnum.getDesc().equals("Duplicate")) {
					parameters.put("DUPL", "DUPLICATE");
				} else if (serviceEnum != null && serviceEnum.getDesc().equals("Issue of NOC")) {
					parameters.put("NOC_remarks",
							"NOC ISSUED TO "
									+ ((regServiceDTO.getnOCDetails().getRtaOffice() == null) ? StringUtils.EMPTY
											: regServiceDTO.getnOCDetails().getRtaOffice())
									+ " ON " + ((regServiceDTO.getApprovedDate() == null) ? StringUtils.EMPTY
											: regServiceDTO.getApprovedDate().format(formatter)));
				} else if (serviceEnum != null && serviceEnum.getDesc().equals("Transfer of Ownership")) {
					parameters.put("adate",
							(regServiceDTO.getOfficeDetails() == null
									|| regServiceDTO.getOfficeDetails().getOfficeName() == null) ? StringUtils.EMPTY
											: regServiceDTO.getOfficeDetails().getOfficeName());
				} else if (serviceEnum != null && serviceEnum.getDesc().equals("Change of Address")) {
					if (regServiceDTO.getOfficeDetails() != null) {
						parameters.put("adate",
								replaceDefaults(
										(regServiceDTO.getOfficeDetails().getOfficeName() == null) ? StringUtils.EMPTY
												: regServiceDTO.getOfficeDetails().getOfficeName()));
					}
				}

				serviceEnumsList.add(serviceEnum);
			}
		}
		parameters.put("Trans_type", StringUtils.EMPTY);
		parameters.put("Trans_date", StringUtils.EMPTY);
		if (regServiceDTO != null) {
			parameters.put("Trans_type", serviceEnumsList.toString().replace("[", "").replace("]", ""));
			parameters.put("Trans_date", (regServiceDTO.getCreatedDate() == null) ? StringUtils.EMPTY
					: regServiceDTO.getCreatedDate().format(formatter));
		}
		return parameters;
	}

	public Map<String, Object> getSuspendShowCauseDetails(String applicationNo) {
		RegistrationDetailsDTO registrationDetailsDTO = null;
		Optional<RegistrationDetailsDTO> registrationDetails = registrationDetailDAO.findByApplicationNo(applicationNo);
		if (registrationDetails.isPresent()) {
			registrationDetailsDTO = registrationDetails.get();
		}
		Map<String, Object> parameters = new HashMap<>();
		parameters.put("chassisNumber",
				replaceDefaults((registrationDetailsDTO.getVahanDetails().getChassisNumber() == null
						|| registrationDetailsDTO.getVahanDetails() == null) ? StringUtils.EMPTY
								: registrationDetailsDTO.getVahanDetails().getChassisNumber()));
		parameters.put("engineNumber",
				replaceDefaults((registrationDetailsDTO.getVahanDetails() == null
						|| registrationDetailsDTO.getVahanDetails().getEngineNumber() == null) ? StringUtils.EMPTY
								: registrationDetailsDTO.getVahanDetails().getEngineNumber()));
		parameters.put("makersDesc",
				replaceDefaults((registrationDetailsDTO.getVahanDetails() == null
						|| registrationDetailsDTO.getVahanDetails().getMakersDesc() == null) ? StringUtils.EMPTY
								: registrationDetailsDTO.getVahanDetails().getMakersDesc().toUpperCase()));
		parameters.put("makers",
				replaceDefaults((registrationDetailsDTO.getVahanDetails() == null
						|| registrationDetailsDTO.getVahanDetails().getMakersModel() == null) ? StringUtils.EMPTY
								: registrationDetailsDTO.getVahanDetails().getMakersModel().toUpperCase()));

		parameters.put("susp_content1",
				"Motor Vehicles -- Transport Department - DTC & Secrtary,RTA, NA - Vehicle No: NA "
						+ "Non Payment of tax and permit of the vehicle expired - Cancellation of Registration U/S 55 (3) of "
						+ "M.V. Act - Proceedings issued - Regarding.");
		if (registrationDetailsDTO.getPrNo() != null
				&& registrationDetailsDTO.getOfficeDetails().getOfficeName() != null) {
			parameters.put("susp_content1", "Motor Vehicles -- Transport Department - DTC & Secrtary, RTA, "
					+ registrationDetailsDTO.getPrNo() + " Vehicle No: "
					+ registrationDetailsDTO.getOfficeDetails().getOfficeName()
					+ " Non Payment of tax and permit of the vehicle expired - Cancellation of Registration U/S 55 (3) of"
					+ "M.V. Act - Proceedings issued - Regarding.");
		}
		parameters.put("susp_content2",
				"On verification of this office records, it is found that the registered owner of the vehicle No:____"
						+ " Vehicle Class:___has paid tax up to the quarter ending:____only and there after no "
						+ "payments made by him and no permit to the vehicle.");
		parameters.put("susp_content3", "");
		return parameters;

	}

	public Map<String, Object> dispatchReport(DispatchInputVo dispatchInputVo, String officeCode) {

		List<DispatcherSubmissionDTO> despatcherDto = new ArrayList<DispatcherSubmissionDTO>();
		Map<String, LocalDateTime> dates = mapper.stringToDateConvertor(dispatchInputVo.getFromDate(),
				dispatchInputVo.getToDate());
		LocalDateTime fromDate = dates.get("from");
		LocalDateTime toDate = dates.get("to");
		despatcherDto = dispatcherSubmissionRepo.findByPostedDateBetweenAndOfficeCode(fromDate, toDate, officeCode);

		if (despatcherDto.isEmpty()) {
			logger.error("Records Not Found");
			throw new BadRequestException("Records Not Found");
		}
		Map<String, Object> parameter = new HashMap<>();

		List<DispatcherVO> dispatcherVOList = new ArrayList<>();
		for (DispatcherSubmissionDTO dispatcherSubmissionDTO : despatcherDto) {
			DispatcherVO dispatcherVO = new DispatcherVO();
			dispatcherVO.setName((dispatcherSubmissionDTO.getName() == null ? StringUtils.EMPTY
					: dispatcherSubmissionDTO.getName()));
			dispatcherVO.setPrNo((dispatcherSubmissionDTO.getPrNo() == null ? StringUtils.EMPTY
					: dispatcherSubmissionDTO.getPrNo()));
			dispatcherVO.setApplicationNo((dispatcherSubmissionDTO.getApplicationNo() == null ? StringUtils.EMPTY
					: dispatcherSubmissionDTO.getApplicationNo()));
			dispatcherVO.setEmsNum((dispatcherSubmissionDTO.getEmsNumber() == null ? StringUtils.EMPTY
					: dispatcherSubmissionDTO.getEmsNumber()));
			dispatcherVO.setRemarks((dispatcherSubmissionDTO.getRemarks() == null ? StringUtils.EMPTY
					: dispatcherSubmissionDTO.getRemarks()));
			dispatcherVO.setPostedDate(dispatcherSubmissionDTO.getPostedDate() == null ? StringUtils.EMPTY
					: dispatcherSubmissionDTO.getPostedDate().format(formatter));
			dispatcherVOList.add(dispatcherVO);
		}

		JRBeanCollectionDataSource beanRENEWAL = new JRBeanCollectionDataSource(dispatcherVOList);
		parameter.put("dispatch", beanRENEWAL);

		return parameter;
	}

	public Map<String, Object> getFitnessDetails(String applicationNo, Integer serviceId) {

		List<RegServiceDTO> regServiceList = regServiceDAO
				.findByRegistrationDetailsApplicationNoAndServiceIds(applicationNo, serviceId);
		if (regServiceList.isEmpty()) {
			logger.error("No record found");
			throw new BadRequestException("No record found");
		}
		regServiceList.sort((p1, p2) -> p2.getCreatedDate().compareTo(p1.getCreatedDate()));
		RegServiceDTO regServiceDTO = regServiceList.stream().findFirst().get();
		String qrCode = StringUtils.EMPTY;
		try {
			qrCode = qRCodeService.sendPDF(getRegistrationQRCodeForFitness(regServiceDTO.getApplicationNo()));
			if (qrCode == null)
				qrCode = StringUtils.EMPTY;
		} catch (Exception e) {
			logger.error(" Exception :[] ", e);
		}

		Map<String, Object> parameter = new HashMap<>();
		parameter.put("AP_LOGO", getLogo(ReportFiles.APLOGO));
		parameter.put("otsilogo", getLogo(ReportFiles.OTSILOGO));
		parameter.put("vehicleNo", (regServiceDTO.getPrNo() == null ? StringUtils.EMPTY : regServiceDTO.getPrNo()));

		parameter.put("datetimeplace", StringUtils.EMPTY);
		if (regServiceDTO != null && regServiceDTO.getSlotDetails() != null) {
			parameter.put("datetimeplace", regServiceDTO.getSlotDetails().getSlotDate().format(formatter));
		}
		parameter.put("", (regServiceDTO.getPrNo() == null ? StringUtils.EMPTY : regServiceDTO.getPrNo()));
		String covCode = regServiceDTO.getRegistrationDetails().getClassOfVehicle();
		MasterCovDTO masterCovDTO = masterCovDAO.findByCovcode(covCode);
		parameter.put("cov", StringUtils.EMPTY);
		if (masterCovDTO != null) {
			parameter.put("cov", replaceDefaults(masterCovDTO.getCovdescription()).isEmpty() ? StringUtils.EMPTY
					: masterCovDTO.getCovdescription());
		}

		String village_address = StringUtils.EMPTY;
		/*
		 * if(regServiceDTO.getRegistrationDetails().getApplicantDetails().
		 * getPresentAddress().getVillage().getVillageName()=="OTHER"){
		 * 
		 * }else{
		 * 
		 * }
		 */
		String PRESENT_ADDRESS = StringUtils.EMPTY;
		if (regServiceDTO.getRegistrationDetails().getApplicantDetails() != null
				&& regServiceDTO.getRegistrationDetails().getApplicantDetails().getPresentAddress() != null) {
			PRESENT_ADDRESS = replaceDefaults(
					regServiceDTO.getRegistrationDetails().getApplicantDetails().getPresentAddress().getDoorNo())
					+ ","
					+ replaceDefaults(regServiceDTO.getRegistrationDetails().getApplicantDetails().getPresentAddress()
							.getStreetName().toUpperCase())
					+ ","
					+ replaceDefaults(regServiceDTO.getRegistrationDetails().getApplicantDetails().getPresentAddress()
							.getTownOrCity().toUpperCase())
					+ "\n"
					+ replaceDefaults((regServiceDTO.getRegistrationDetails().getApplicantDetails().getPresentAddress()
							.getVillage() == null)
							|| regServiceDTO.getRegistrationDetails().getApplicantDetails().getPresentAddress()
									.getVillage().getVillageName() == null
											? StringUtils.EMPTY
											: regServiceDTO.getRegistrationDetails().getApplicantDetails()
													.getPresentAddress().getVillage().getVillageName().toUpperCase())
					+ ","
					+ replaceDefaults(((regServiceDTO.getRegistrationDetails().getApplicantDetails().getPresentAddress()
							.getMandal() == null)
							|| null == regServiceDTO.getRegistrationDetails().getApplicantDetails().getPresentAddress()
									.getMandal().getMandalName())
											? ""
											: regServiceDTO.getRegistrationDetails().getApplicantDetails()
													.getPresentAddress().getMandal().getMandalName().toUpperCase())
					+ "\n"
					+ replaceDefaults(
							(regServiceDTO.getRegistrationDetails().getApplicantDetails().getPresentAddress()
									.getDistrict() == null
											? ""
											: regServiceDTO.getRegistrationDetails().getApplicantDetails()
													.getPresentAddress().getDistrict().getDistrictName().toUpperCase()))
					+ "\n"
					+ replaceDefaults((regServiceDTO.getRegistrationDetails().getApplicantDetails().getPresentAddress()
							.getState() == null ? ""

									: regServiceDTO.getRegistrationDetails().getApplicantDetails().getPresentAddress()

											.getState().getStateName().toUpperCase()))
					+ ","
					+ replaceDefaults((regServiceDTO.getRegistrationDetails().getApplicantDetails().getPresentAddress()
							.getCountry() == null
									? ""
									: regServiceDTO.getRegistrationDetails().getApplicantDetails().getPresentAddress()
											.getCountry().getCountryName().toUpperCase()))

					+ ","
					+ replaceDefaults((regServiceDTO.getRegistrationDetails().getApplicantDetails().getPresentAddress()
							.getPostOffice() == null ? ""

									: regServiceDTO.getRegistrationDetails().getApplicantDetails().getPresentAddress()

											.getPostOffice().getPostOfficeCode()));

		}
		parameter.put("nameAndaddress",
				((regServiceDTO.getRegistrationDetails() == null
						|| regServiceDTO.getRegistrationDetails().getApplicantDetails() == null
						|| regServiceDTO.getRegistrationDetails().getApplicantDetails().getDisplayName() == null)
								? StringUtils.EMPTY
								: regServiceDTO.getRegistrationDetails().getApplicantDetails().getDisplayName())
						+ "\n" + PRESENT_ADDRESS + ".");
		parameter.put("inspectionaddr",
				((regServiceDTO.getRegistrationDetails() == null
						|| regServiceDTO.getRegistrationDetails().getApplicantDetails() == null
						|| regServiceDTO.getRegistrationDetails().getApplicantDetails().getDisplayName() == null)
								? StringUtils.EMPTY
								: regServiceDTO.getRegistrationDetails().getApplicantDetails().getDisplayName())
						+ "\n" + PRESENT_ADDRESS + ".");

		parameter.put("owner_name",
				(regServiceDTO.getRegistrationDetails() == null
						|| regServiceDTO.getRegistrationDetails().getApplicantDetails() == null
						|| regServiceDTO.getRegistrationDetails().getApplicantDetails().getDisplayName() == null)
								? StringUtils.EMPTY
								: regServiceDTO.getRegistrationDetails().getApplicantDetails().getDisplayName());

		parameter.put("WATER_MARK", getLogo(ReportFiles.WATER_MARK));
		parameter.put("DIGITAL_SIGN", getLogo(ReportFiles.DIGITAL_SIGN));
		parameter.put("IMAGE_SCAN", qrCode);
		parameter.put("defeets_noticed", (regServiceDTO.getReasonForRejection() == null ? StringUtils.EMPTY
				: regServiceDTO.getReasonForRejection()));
		parameter.put("mviName", StringUtils.EMPTY);
		parameter.put("officeName", StringUtils.EMPTY);
		if (regServiceDTO.getOfficeDetails() != null) {
			parameter.put("office_name",
					replaceDefaults((regServiceDTO.getMviOfficeDetails().getOfficeName() == null) ? StringUtils.EMPTY
							: regServiceDTO.getMviOfficeDetails().getOfficeName()));
		}
		parameter.put("owner_name", StringUtils.EMPTY);
		parameter.put("re_inspectDate", regServiceDTO.getReInspectionDate() == null ? StringUtils.EMPTY
				: regServiceDTO.getReInspectionDate().format(formatter));
		return parameter;
	}

	/**
	 * related to citizen side token receipts
	 * 
	 * @param applicationNo
	 * @return
	 */
	public RegServiceDTO getRegistrationServiceDetails(String applicationNo) {
		RegServiceDTO regServiceDTO = null;
		Optional<RegServiceDTO> regServiceDTOOptional = regServiceDAO.findByApplicationNo(applicationNo);

		if (regServiceDTOOptional.isPresent()) {

			regServiceDTO = regServiceDTOOptional.get();
		} else {
			logger.error("no record found");
			throw new BadRequestException("no record found");
		}
		return regServiceDTO;
	}

	public Boolean checkPaymentDoneOrNot(String applicationNo) {
		PaymentTransactionDTO paymentTransactionDTO = null;
		Optional<PaymentTransactionDTO> paymentTransactionDTOOpt = paymentTransactionDAO
				.findByApplicationFormRefNumOrderByRequestRequestTimeDesc(applicationNo);
		if (paymentTransactionDTOOpt.isPresent()) {
			paymentTransactionDTO = paymentTransactionDTOOpt.get();
			if (paymentTransactionDTO.getServiceIds().contains(50)) {
				return true;
			}
		} else {
			return false;
		}
		return null;
	}

	public Map<String, Object> getFitnessDetailsForCfx(String applicationNo) {
		RegistrationDetailsDTO regDetailsDTO = null;
		FcDetailsDTO fcDetailsDTO = null;
		Optional<RegistrationDetailsDTO> regServiceOptional = registrationDetailDAO.findByApplicationNo(applicationNo);
		if (regServiceOptional.isPresent()) {
			regDetailsDTO = regServiceOptional.get();
		} else {
			logger.error("No record found");
			throw new BadRequestException("No record found");
		}
		String qrCode = StringUtils.EMPTY;
		try {
			qrCode = qRCodeService.sendPDF(getRegistrationQRCodeForFitness(regDetailsDTO.getApplicationNo()));
			if (qrCode == null)
				qrCode = StringUtils.EMPTY;
		} catch (Exception e) {
			logger.error(" Exception :[] ", e);
		}

		Map<String, Object> parameter = new HashMap<>();
		parameter.put("AP_LOGO", getLogo(ReportFiles.APLOGO));
		parameter.put("otsilogo", getLogo(ReportFiles.OTSILOGO));
		parameter.put("vehicleNo", (regDetailsDTO.getPrNo() == null ? StringUtils.EMPTY : regDetailsDTO.getPrNo()));

		parameter.put("", (regDetailsDTO.getPrNo() == null ? StringUtils.EMPTY : regDetailsDTO.getPrNo()));
		String covCode = regDetailsDTO.getClassOfVehicle();
		MasterCovDTO masterCovDTO = masterCovDAO.findByCovcode(covCode);
		parameter.put("cov", StringUtils.EMPTY);
		if (masterCovDTO != null) {
			parameter.put("cov", replaceDefaults(masterCovDTO.getCovdescription()).isEmpty() ? StringUtils.EMPTY
					: masterCovDTO.getCovdescription());
		}

		String village_address = StringUtils.EMPTY;
		/*
		 * if(regDetailsDTO.getApplicantDetails().getPresentAddress().getVillage
		 * ().getVillageName()=="OTHER"){
		 * 
		 * }else{
		 * 
		 * }
		 */
		String PRESENT_ADDRESS = StringUtils.EMPTY;
		if (regDetailsDTO.getApplicantDetails() != null
				&& regDetailsDTO.getApplicantDetails().getPresentAddress() != null) {
			PRESENT_ADDRESS = replaceDefaults(regDetailsDTO.getApplicantDetails().getPresentAddress().getDoorNo()) + ","
					+ replaceDefaults(
							regDetailsDTO.getApplicantDetails().getPresentAddress().getStreetName().toUpperCase())
					+ ","
					+ replaceDefaults(
							regDetailsDTO.getApplicantDetails().getPresentAddress().getTownOrCity().toUpperCase())
					+ "\n"
					+ replaceDefaults((regDetailsDTO.getApplicantDetails().getPresentAddress().getVillage() == null)
							|| regDetailsDTO.getApplicantDetails().getPresentAddress().getVillage()
									.getVillageName() == null
											? StringUtils.EMPTY
											: regDetailsDTO.getApplicantDetails().getPresentAddress().getVillage()
													.getVillageName().toUpperCase())
					+ ","
					+ replaceDefaults(((regDetailsDTO.getApplicantDetails().getPresentAddress().getMandal() == null)
							|| null == regDetailsDTO.getApplicantDetails().getPresentAddress().getMandal()
									.getMandalName())
											? ""
											: regDetailsDTO.getApplicantDetails().getPresentAddress().getMandal()
													.getMandalName().toUpperCase())
					+ "\n"
					+ replaceDefaults(
							(regDetailsDTO.getApplicantDetails().getPresentAddress().getDistrict() == null ? ""
									: regDetailsDTO.getApplicantDetails().getPresentAddress().getDistrict()
											.getDistrictName().toUpperCase()))
					+ "\n"
					+ replaceDefaults((regDetailsDTO.getApplicantDetails().getPresentAddress().getState() == null ? ""

							: regDetailsDTO.getApplicantDetails().getPresentAddress()

									.getState().getStateName().toUpperCase()))
					+ ","
					+ replaceDefaults((regDetailsDTO.getApplicantDetails().getPresentAddress().getCountry() == null ? ""
							: regDetailsDTO.getApplicantDetails().getPresentAddress().getCountry().getCountryName()
									.toUpperCase()))

					+ ","
					+ replaceDefaults(
							(regDetailsDTO.getApplicantDetails().getPresentAddress().getPostOffice() == null ? ""

									: regDetailsDTO.getApplicantDetails().getPresentAddress()

											.getPostOffice().getPostOfficeCode()));

		}
		parameter.put("nameAndaddress",
				((regDetailsDTO == null || regDetailsDTO.getApplicantDetails() == null
						|| regDetailsDTO.getApplicantDetails().getDisplayName() == null) ? StringUtils.EMPTY
								: regDetailsDTO.getApplicantDetails().getDisplayName())
						+ "\n" + PRESENT_ADDRESS + ".");
		parameter.put("inspectionaddr",
				((regDetailsDTO == null || regDetailsDTO.getApplicantDetails() == null
						|| regDetailsDTO.getApplicantDetails().getDisplayName() == null) ? StringUtils.EMPTY
								: regDetailsDTO.getApplicantDetails().getDisplayName())
						+ "\n" + PRESENT_ADDRESS + ".");

		parameter.put("owner_name",
				(regDetailsDTO == null || regDetailsDTO.getApplicantDetails() == null
						|| regDetailsDTO.getApplicantDetails().getDisplayName() == null) ? StringUtils.EMPTY
								: regDetailsDTO.getApplicantDetails().getDisplayName());
		List<FcDetailsDTO> fcDetailsDtoList = fcDetailsDAO
				.findFirst5ByStatusIsTrueAndPrNoOrderByCreatedDateDesc(regDetailsDTO.getPrNo());
		parameter.put("WATER_MARK", getLogo(ReportFiles.WATER_MARK));
		parameter.put("DIGITAL_SIGN", getLogo(ReportFiles.DIGITAL_SIGN));
		parameter.put("IMAGE_SCAN", qrCode);
		parameter.put("defeets_noticed", StringUtils.EMPTY);
		if (fcDetailsDtoList != null) {

			fcDetailsDtoList.sort((p1, p2) -> p2.getCreatedDate().compareTo(p1.getCreatedDate()));
			if (fcDetailsDtoList.stream().findFirst().isPresent())
				fcDetailsDTO = fcDetailsDtoList.stream().findFirst().get();
			parameter.put("dlNum", (fcDetailsDTO.getDlNumber() == null ? StringUtils.EMPTY
					: fcDetailsDTO.getDlNumber().toUpperCase()));
			parameter.put("driverName", (fcDetailsDTO.getDriverName() == null ? StringUtils.EMPTY
					: fcDetailsDTO.getDriverName().toUpperCase()));
			parameter.put("vcrNum", (fcDetailsDTO.getVcrNumber() == null ? StringUtils.EMPTY
					: fcDetailsDTO.getVcrNumber().toUpperCase()));
			parameter.put("placeOfCheck", (fcDetailsDTO.getPlaceOfChecking() == null ? StringUtils.EMPTY
					: fcDetailsDTO.getPlaceOfChecking().toUpperCase()));
			parameter.put("destination", (fcDetailsDTO.getDestination() == null ? StringUtils.EMPTY
					: fcDetailsDTO.getDestination().toUpperCase()));
			parameter.put("maxSpeed", (fcDetailsDTO.getMaxSpeed() == null ? StringUtils.EMPTY
					: fcDetailsDTO.getMaxSpeed().toUpperCase()));
			parameter.put("defeets_noticed", (fcDetailsDTO.getDefectComment() == null ? StringUtils.EMPTY
					: fcDetailsDTO.getDefectComment().toUpperCase()));
		} else {
			logger.error("No record found");
			throw new BadRequestException("No record found");
		}
		parameter.put("datetimeplace", StringUtils.EMPTY);
		if (fcDetailsDTO != null && fcDetailsDTO.getInspectedDate() != null) {
			parameter.put("datetimeplace", fcDetailsDTO.getInspectedDate().format(formatter));
		}
		parameter.put("mviName", StringUtils.EMPTY);
		parameter.put("officeName", StringUtils.EMPTY);
		if (regDetailsDTO.getOfficeDetails() != null) {
			parameter.put("officeName",
					replaceDefaults((fcDetailsDTO.getCfxIssuedOfficeName() == null) ? StringUtils.EMPTY
							: fcDetailsDTO.getCfxIssuedOfficeName()));
		}
		return parameter;
	}

	public Map<String, Object> getPermitSpcDetails(String applicationNo, String permitNo, String permitType) {
		PermitDetailsDTO permitDetailsDTO = null;
		RegistrationDetailsDTO registrationDetailsDTO = null;
		OfficeDTO officeDTO = null;
		String qrCode = StringUtils.EMPTY;
		try {
			qrCode = qRCodeService.sendPDF(getRegistrationQRCodeForPermitspvt(applicationNo));
			if (qrCode == null)
				qrCode = StringUtils.EMPTY;
		} catch (Exception e) {
			logger.error(" Exception :[] ", e);
		}
		Map<String, Object> parameters = new HashMap<>();
		Optional<PermitDetailsDTO> permitDetailOptional = permitDetailsDAO
				.findByPrNoAndPermitNoAndPermitTypePermitTypeAndPermitStatus(applicationNo, permitNo, permitType,
						PermitsEnum.ACTIVE.getDescription());
		Optional<PermitDetailsDTO> permenantPermitDetail = permitDetailsDAO
				.findByPrNoAndPermitStatusAndPermitClassPermitClassId(applicationNo,
						PermitsEnum.ACTIVE.getDescription(), 1);
		if (permitDetailOptional.isPresent()) {
			permitDetailsDTO = permitDetailOptional.get();
		} else {
			logger.error("Record Not found");
			throw new BadRequestException("Record Not found");
		}

		Optional<RegistrationDetailsDTO> registrationDetails = registrationDetailDAO.findByPrNo(applicationNo);
		if (registrationDetails.isPresent()) {
			registrationDetailsDTO = registrationDetails.get();
		}
		String PRESENT_ADDRESS = StringUtils.EMPTY;
		if (registrationDetailsDTO.getApplicantDetails().getPresentAddress() != null) {

			PRESENT_ADDRESS = replaceDefaults(
					registrationDetailsDTO.getApplicantDetails().getPresentAddress().getDoorNo() == null
							? StringUtils.EMPTY
							: registrationDetailsDTO.getApplicantDetails().getPresentAddress().getDoorNo())
					+ "\n"
					+ replaceDefaults(
							registrationDetailsDTO.getApplicantDetails().getPresentAddress().getStreetName() == null
									? StringUtils.EMPTY
									: registrationDetailsDTO
											.getApplicantDetails().getPresentAddress().getStreetName().toUpperCase())
					+ ","
					+ replaceDefaults((registrationDetailsDTO.getApplicantDetails().getPresentAddress() == null
							|| registrationDetailsDTO.getApplicantDetails().getPresentAddress().getTownOrCity() == null)
									? StringUtils.EMPTY
									: registrationDetailsDTO
											.getApplicantDetails().getPresentAddress().getTownOrCity().toUpperCase())
					+ "\n"
					+ replaceDefaults(
							(registrationDetailsDTO.getApplicantDetails().getPresentAddress().getVillage() == null
									|| registrationDetailsDTO.getApplicantDetails().getPresentAddress().getVillage()
											.getVillageName() == null)
													? StringUtils.EMPTY
													: registrationDetailsDTO.getApplicantDetails().getPresentAddress()
															.getVillage().getVillageName().toUpperCase())
					+ ","
					+ replaceDefaults(
							((registrationDetailsDTO.getApplicantDetails().getPresentAddress().getMandal() == null
									|| registrationDetailsDTO.getApplicantDetails().getPresentAddress().getMandal()
											.getMandalName() == null)
													? ""
													: registrationDetailsDTO.getApplicantDetails().getPresentAddress()
															.getMandal().getMandalName().toUpperCase())
									+ ","
									+ replaceDefaults(((registrationDetailsDTO.getApplicantDetails().getPresentAddress()
											.getDistrict() == null
											|| registrationDetailsDTO.getApplicantDetails().getPresentAddress()
													.getDistrict().getDistrictName() == null)
															? ""
															: registrationDetailsDTO
																	.getApplicantDetails().getPresentAddress()
																	.getDistrict().getDistrictName().toUpperCase()))
									+ "\n"
									+ replaceDefaults(
											((registrationDetailsDTO.getApplicantDetails().getPresentAddress()
													.getState() == null
													|| registrationDetailsDTO.getApplicantDetails().getPresentAddress()
															.getState().getStateName() == null)
																	? ""
																	: registrationDetailsDTO
																			.getApplicantDetails().getPresentAddress()
																			.getState().getStateName().toUpperCase()))
									+ "\n"
									+ replaceDefaults((registrationDetailsDTO.getApplicantDetails().getPresentAddress()
											.getPostOffice() == null ? ""
													: registrationDetailsDTO.getApplicantDetails().getPresentAddress()
															.getPostOffice().getPostOfficeCode())));

		}

		String PERMENT_ADDRESS = StringUtils.EMPTY;
		if (registrationDetailsDTO.getApplicantDetails().getPresentAddress() != null) {

			PERMENT_ADDRESS = replaceDefaults((registrationDetailsDTO.getApplicantDetails().getAadharResponse() == null
					|| registrationDetailsDTO.getApplicantDetails().getAadharResponse().getDoorNo() == null)
							? StringUtils.EMPTY
							: registrationDetailsDTO.getApplicantDetails().getAadharResponse().getDoorNo()
									.toUpperCase())
					+ "\n"
					+ replaceDefaults((registrationDetailsDTO.getApplicantDetails().getAadharResponse() == null
							|| registrationDetailsDTO.getApplicantDetails().getAadharResponse().getStreet() == null)
									? StringUtils.EMPTY
									: registrationDetailsDTO.getApplicantDetails().getAadharResponse().getStreet())
					+ ","

					+ replaceDefaults((registrationDetailsDTO.getApplicantDetails().getAadharResponse() == null
							|| registrationDetailsDTO.getApplicantDetails().getAadharResponse().getVillage() == null)
									? StringUtils.EMPTY
									: registrationDetailsDTO
											.getApplicantDetails().getAadharResponse().getVillage().toUpperCase())
					+ "\n"
					+ replaceDefaults(((registrationDetailsDTO.getApplicantDetails().getAadharResponse() == null
							|| registrationDetailsDTO.getApplicantDetails().getAadharResponse()
									.getMandal_name() == null)
											? ""
											: registrationDetailsDTO.getApplicantDetails().getAadharResponse()
													.getMandal_name().toUpperCase())
							+ ","
							+ replaceDefaults(((registrationDetailsDTO.getApplicantDetails().getAadharResponse() == null
									|| registrationDetailsDTO.getApplicantDetails().getAadharResponse()
											.getDistrict_name() == null)
													? ""
													: registrationDetailsDTO.getApplicantDetails().getAadharResponse()
															.getDistrict_name().toUpperCase()))
							+ "\n"
							+ replaceDefaults(((registrationDetailsDTO.getApplicantDetails().getAadharResponse() == null
									|| registrationDetailsDTO.getApplicantDetails().getAadharResponse()
											.getPincode() == null) ? ""
													: registrationDetailsDTO.getApplicantDetails().getAadharResponse()
															.getPincode().toUpperCase())));

		}
		parameters.put("presentAddr",
				(registrationDetailsDTO.getApplicantDetails().getFatherName() == null ? StringUtils.EMPTY
						: registrationDetailsDTO.getApplicantDetails().getFatherName()) + "\n" + " (Permanent address) "
						+ PERMENT_ADDRESS);
		RegistrationDetailsDTO dto = null;
		if (permitDetailsDTO.getRdto() != null) {
			dto = permitDetailsDTO.getRdto();
		} else {
			dto = registrationDetailsDTO;
		}
		parameters.put("office_fname",
				"Registered by the registering Authority "
						+ ((dto == null
								|| dto.getOfficeDetails() == null
								|| registrationDetailsDTO.getOfficeDetails().getOfficeName() == null)
										? StringUtils.EMPTY
										: dto.getOfficeDetails().getOfficeName())
						+ " and owned by "
						+ ((dto == null || dto.getApplicantDetails() == null
								|| dto.getApplicantDetails().getFirstName() == null)
										? StringUtils.EMPTY
										: dto.getApplicantDetails().getFirstName())
						+ " "
						+ ((dto.getApplicantDetails().getPresentAddress().getDistrict() == null || dto
								.getApplicantDetails().getPresentAddress().getDistrict().getDistrictName() == null) ? ""
										: dto.getApplicantDetails().getPresentAddress().getDistrict()
												.getDistrictName()));
		parameters.put("chassis_no",
				replaceDefaults((dto.getVahanDetails() == null || dto.getVahanDetails().getChassisNumber() == null)
						? StringUtils.EMPTY
						: dto.getVahanDetails().getChassisNumber()));
		parameters.put("engine_no",
				replaceDefaults((dto.getVahanDetails() == null || dto.getVahanDetails().getEngineNumber() == null)
						? StringUtils.EMPTY
						: dto.getVahanDetails().getEngineNumber()));
		parameters.put("reg_no", dto.getPrNo() == null ? StringUtils.EMPTY : dto.getPrNo().toUpperCase());
		parameters.put("seat_capacity",
				replaceDefaults(
						(dto.getVahanDetails() == null || dto.getVahanDetails().getSeatingCapacity() == null) ? "NA"
								: dto.getVahanDetails().getSeatingCapacity()));
		String covCode = dto.getClassOfVehicle();
		MasterCovDTO masterCovDTO = masterCovDAO.findByCovcode(covCode);
		parameters.put("cov", "");
		if (masterCovDTO != null) {
			parameters.put("cov", replaceDefaults(masterCovDTO.getCovdescription()).isEmpty() ? StringUtils.EMPTY
					: masterCovDTO.getCovdescription().toUpperCase());
		}
		parameters.put("permit_no",
				permitDetailsDTO.getPermitNo() == null ? StringUtils.EMPTY : permitDetailsDTO.getPermitNo());
		if (permenantPermitDetail != null) {
			parameters.put("ssp_dyn1", "covered by permit number "
					+ (permenantPermitDetail.get().getPermitNo() == null ? StringUtils.EMPTY
							: permenantPermitDetail.get().getPermitNo())
					+ " Valid Upto "
					+ ((permenantPermitDetail.get().getPermitValidityDetails() == null
							|| permenantPermitDetail.get().getPermitValidityDetails().getPermitValidTo() == null)
									? StringUtils.EMPTY
									: permenantPermitDetail.get().getPermitValidityDetails().getPermitValidTo()));
		}
		parameters.put("ssp_dyn2", "issued by the State/Regional Transport Authority"
				+ ((registrationDetailsDTO == null || registrationDetailsDTO.getOfficeDetails() == null
						|| registrationDetailsDTO.getOfficeDetails().getOfficeName() == null) ? StringUtils.EMPTY
								: registrationDetailsDTO.getOfficeDetails().getOfficeName()));

		if (dto.getOwnerType() != null && dto.getOwnerType().getCode().equals(OwnerTypeEnum.Individual.getCode())) {
			parameters.put("full_name",
					replaceDefaults(dto.getApplicantDetails().getFirstName() == null ? StringUtils.EMPTY
							: dto.getApplicantDetails().getFirstName().toUpperCase()));
		} else {

			parameters.put("full_name",
					replaceDefaults(dto.getApplicantDetails().getEntityName() == null ? StringUtils.EMPTY
							: dto.getApplicantDetails().getEntityName().toUpperCase()));
		}
		parameters.put("f_name", (dto.getApplicantDetails().getFatherName() == null ? StringUtils.EMPTY
				: dto.getApplicantDetails().getFatherName()));
		parameters.put("age", StringUtils.EMPTY);
		if (dto.getApplicantDetails().getDateOfBirth() != null) {
			LocalDate dob = dto.getApplicantDetails().getDateOfBirth().plusDays(1);
			LocalDate presentDate = LocalDate.now();
			Long age = ChronoUnit.YEARS.between(dob, presentDate);
			parameters.put("age", age.toString());
		}
		parameters.put("presentAddr1", PRESENT_ADDRESS);
		parameters.put("for_route",
				(permitDetailsDTO.getRouteDetails() == null
						|| permitDetailsDTO.getRouteDetails().getForwardRoute() == null) ? StringUtils.EMPTY
								: permitDetailsDTO.getRouteDetails().getForwardRoute());

		parameters.put("ret_route",
				(permitDetailsDTO.getRouteDetails() == null
						|| permitDetailsDTO.getRouteDetails().getReturnRoute() == null) ? StringUtils.EMPTY
								: permitDetailsDTO.getRouteDetails().getReturnRoute());

		parameters.put("p_validfrom",
				"FROM " + ((permitDetailsDTO.getPermitValidityDetails() == null
						|| permitDetailsDTO.getPermitValidityDetails().getPermitValidFrom() == null)
								? "---"
								: permitDetailsDTO.getPermitValidityDetails().getPermitValidFrom().format(formatter))
						+ " TO "
						+ ((permitDetailsDTO.getPermitValidityDetails() == null
								|| permitDetailsDTO.getPermitValidityDetails().getPermitValidTo() == null) ? "---"
										: permitDetailsDTO.getPermitValidityDetails().getPermitValidTo()
												.format(formatter))
						+ " (One Round Trip Only)");
		parameters.put("IMAGE_SCAN", qrCode);
		parameters.put("tax_paid", (registrationDetailsDTO.getTaxvalidity() == null ? StringUtils.EMPTY
				: registrationDetailsDTO.getTaxvalidity().format(formatter)));

		parameters.put("office_name", StringUtils.EMPTY);
		if (registrationDetailsDTO.getOfficeDetails() != null
				&& registrationDetailsDTO.getOfficeDetails().getOfficeCode() != null) {
			Optional<OfficeDTO> officeDtoOptional = officeDAO
					.findByOfficeCode(registrationDetailsDTO.getOfficeDetails().getOfficeCode());
			parameters.put("office_name", StringUtils.EMPTY);
			if (officeDtoOptional.isPresent()) {
				officeDTO = officeDtoOptional.get();
				parameters.put("office_name",
						officeDTO.getOfficeName() == null ? StringUtils.EMPTY : officeDTO.getOfficeName());
			}
		}
		parameters.put("ssp_dyn3", "The validity of this permit is extended upto "
				+ ((permitDetailsDTO.getPermitValidityDetails() == null
						|| permitDetailsDTO.getPermitValidityDetails().getPermitValidTo() == null) ? "---"
								: permitDetailsDTO.getPermitValidityDetails().getPermitValidTo().format(formatter))
				+ " during this period the party may visit the following places also.");
		parameters.put("AP_LOGO", getLogo(ReportFiles.APLOGO));
		parameters.put("otsilogo", getLogo(ReportFiles.OTSILOGO));
		parameters.put("p_date", LocalDateTime.now().format(formatter));
		parameters.put("TIME", LocalTime.now().toString());
		parameters.put("WATER_MARK", getLogo(ReportFiles.WATER_MARK));
		parameters.put("DIGITAL_SIGN", getLogo(ReportFiles.DIGITAL_SIGN));
		return parameters;
	}

	/**
	 * temperarory related pdfs
	 */
	public Map<String, Object> getPermitTempDetails(String applicationNo, String permitNo, String permitType) {
		String qrCode = StringUtils.EMPTY;
		try {
			qrCode = qRCodeService.sendPDF(getRegistrationQRCodeForPermitspvt(applicationNo));
			if (qrCode == null)
				qrCode = StringUtils.EMPTY;
		} catch (Exception e) {
			logger.error(" Exception :[] ", e);
		}
		Map<String, Object> parameters = new HashMap<>();
		RegistrationDetailsDTO registrationDetailsDTO = null;
		PermitDetailsDTO permitDetailsDTO = null;
		OfficeDTO officeDTO = null;
		Optional<PermitDetailsDTO> permitDetailOptional = permitDetailsDAO
				.findByPrNoAndPermitNoAndPermitTypePermitTypeAndPermitStatus(applicationNo, permitNo, permitType,
						PermitsEnum.ACTIVE.getDescription());
		if (permitDetailOptional.isPresent()) {
			permitDetailsDTO = permitDetailOptional.get();
		} else {
			logger.error("Record Not found");
			throw new BadRequestException("Record Not found");
		}
		Optional<RegistrationDetailsDTO> registrationDetails = registrationDetailDAO.findByPrNo(applicationNo);
		if (registrationDetails.isPresent()) {
			registrationDetailsDTO = registrationDetails.get();
		}
		String PRESENT_ADDRESS = StringUtils.EMPTY;
		if (registrationDetailsDTO.getApplicantDetails().getPresentAddress() != null) {

			PRESENT_ADDRESS = replaceDefaults(
					registrationDetailsDTO.getApplicantDetails().getPresentAddress().getDoorNo() == null
							? StringUtils.EMPTY
							: registrationDetailsDTO.getApplicantDetails().getPresentAddress().getDoorNo())
					+ "\n"
					+ replaceDefaults(
							registrationDetailsDTO.getApplicantDetails().getPresentAddress().getStreetName() == null
									? StringUtils.EMPTY
									: registrationDetailsDTO
											.getApplicantDetails().getPresentAddress().getStreetName().toUpperCase())
					+ ","
					+ replaceDefaults((registrationDetailsDTO.getApplicantDetails().getPresentAddress() == null
							|| registrationDetailsDTO.getApplicantDetails().getPresentAddress().getTownOrCity() == null)
									? StringUtils.EMPTY
									: registrationDetailsDTO
											.getApplicantDetails().getPresentAddress().getTownOrCity().toUpperCase())
					+ "\n"
					+ replaceDefaults(
							(registrationDetailsDTO.getApplicantDetails().getPresentAddress().getVillage() == null
									|| registrationDetailsDTO.getApplicantDetails().getPresentAddress().getVillage()
											.getVillageName() == null)
													? StringUtils.EMPTY
													: registrationDetailsDTO.getApplicantDetails().getPresentAddress()
															.getVillage().getVillageName().toUpperCase())
					+ ","
					+ replaceDefaults(
							((registrationDetailsDTO.getApplicantDetails().getPresentAddress().getMandal() == null
									|| registrationDetailsDTO.getApplicantDetails().getPresentAddress().getMandal()
											.getMandalName() == null)
													? ""
													: registrationDetailsDTO.getApplicantDetails().getPresentAddress()
															.getMandal().getMandalName().toUpperCase())
									+ ","
									+ replaceDefaults(((registrationDetailsDTO.getApplicantDetails().getPresentAddress()
											.getDistrict() == null
											|| registrationDetailsDTO.getApplicantDetails().getPresentAddress()
													.getDistrict().getDistrictName() == null)
															? ""
															: registrationDetailsDTO
																	.getApplicantDetails().getPresentAddress()
																	.getDistrict().getDistrictName().toUpperCase()))
									+ "\n"
									+ replaceDefaults(
											((registrationDetailsDTO.getApplicantDetails().getPresentAddress()
													.getState() == null
													|| registrationDetailsDTO.getApplicantDetails().getPresentAddress()
															.getState().getStateName() == null)
																	? ""
																	: registrationDetailsDTO
																			.getApplicantDetails().getPresentAddress()
																			.getState().getStateName().toUpperCase()))
									+ "\n"
									+ replaceDefaults((registrationDetailsDTO.getApplicantDetails().getPresentAddress()
											.getPostOffice() == null ? ""
													: registrationDetailsDTO.getApplicantDetails().getPresentAddress()
															.getPostOffice().getPostOfficeCode())));

		}
		RegistrationDetailsDTO dto = null;
		if (permitDetailsDTO.getRdto() != null) {
			dto = permitDetailsDTO.getRdto();
		} else {
			dto = registrationDetailsDTO;
		}
		parameters = new HashMap<>();
		parameters.put("p_tvpNo",
				permitDetailsDTO.getPermitNo() == null ? StringUtils.EMPTY : permitDetailsDTO.getPermitNo());
		if (dto.getOwnerType() != null && dto.getOwnerType().getCode().equals(OwnerTypeEnum.Individual.getCode())) {
			parameters.put("p_holdername",
					replaceDefaults(dto.getApplicantDetails().getFirstName() == null ? StringUtils.EMPTY
							: dto.getApplicantDetails().getFirstName().toUpperCase()));
		} else {

			parameters.put("p_holdername",
					replaceDefaults(dto.getApplicantDetails().getEntityName() == null ? StringUtils.EMPTY
							: dto.getApplicantDetails().getEntityName().toUpperCase()));
		}
		parameters.put("p_fname",
				(dto.getApplicantDetails() == null || dto.getApplicantDetails().getFatherName() == null)
						? StringUtils.EMPTY
						: dto.getApplicantDetails().getFatherName().toUpperCase());
		parameters.put("p_addr", PRESENT_ADDRESS);
		parameters.put("p_regnum",
				permitDetailsDTO.getPrNo() == null ? StringUtils.EMPTY : permitDetailsDTO.getPrNo().toUpperCase());
		String covCode = dto.getClassOfVehicle();
		MasterCovDTO masterCovDTO = masterCovDAO.findByCovcode(covCode);
		parameters.put("p_cov", "");
		if (masterCovDTO != null) {
			parameters.put("p_cov", replaceDefaults(masterCovDTO.getCovdescription()).isEmpty() ? StringUtils.EMPTY
					: masterCovDTO.getCovdescription().toUpperCase());
		}
		parameters.put("p_cn",
				replaceDefaults((dto.getVahanDetails().getChassisNumber() == null || dto.getVahanDetails() == null)
						? StringUtils.EMPTY
						: dto.getVahanDetails().getChassisNumber()));
		parameters.put("p_engine",
				replaceDefaults((dto.getVahanDetails() == null || dto.getVahanDetails().getEngineNumber() == null)
						? StringUtils.EMPTY
						: dto.getVahanDetails().getEngineNumber()));
		parameters.put("p_max_pass_cap",
				replaceDefaults(
						(dto.getVahanDetails() == null || dto.getVahanDetails().getSeatingCapacity() == null) ? "NA"
								: dto.getVahanDetails().getSeatingCapacity()));
		if (CollectionUtils.isNotEmpty(registrationDetailsDTO.getVahanDetails().getTrailerChassisDetailsDTO())) {
			Integer max = registrationDetailsDTO.getVahanDetails().getTrailerChassisDetailsDTO().stream()
					.mapToInt(v -> v.getGtw()).max().orElseThrow(NoSuchElementException::new);
			Integer gcwTotal = max + registrationDetailsDTO.getVahanDetails().getGvw();
			parameters.put("p_gvw",
					replaceDefaults((registrationDetailsDTO.getVahanDetails().getGvw() == null) ? StringUtils.EMPTY
							: (gcwTotal) + "Kgs"));
		} else {
			parameters.put("p_gvw",
					replaceDefaults((dto.getVahanDetails() == null || dto.getVahanDetails().getGvw() == null)
							? StringUtils.EMPTY
							: dto.getVahanDetails().getGvw()) + " Kgs");
		}
		if (permitDetailsDTO.getPermitType().getPermitType().equalsIgnoreCase(PermitTypeEnum.TCCP.toString())
				|| permitDetailsDTO.getPermitType().getPermitType().equalsIgnoreCase(PermitTypeEnum.TGCP.toString())
				|| permitDetailsDTO.getPermitType().getPermitType().equalsIgnoreCase(PermitTypeEnum.TSCP.toString())
				|| permitDetailsDTO.getPermitType().getPermitType().equalsIgnoreCase(PermitTypeEnum.SSPSO.toString())) {
			parameters.put("P_forword",
					((permitDetailsDTO.getRouteDetails() == null
							|| permitDetailsDTO.getRouteDetails().getForwardRoute() == null) ? StringUtils.EMPTY
									: permitDetailsDTO.getRouteDetails().getForwardRoute()));
			parameters.put("p_return",
					((permitDetailsDTO.getRouteDetails() == null
							|| permitDetailsDTO.getRouteDetails().getReturnRoute() == null) ? StringUtils.EMPTY
									: permitDetailsDTO.getRouteDetails().getReturnRoute()));
		}
		parameters.put("p_validfrom",
				"FROM " + ((permitDetailsDTO.getPermitValidityDetails() == null
						|| permitDetailsDTO.getPermitValidityDetails().getPermitValidFrom() == null)
								? "---"
								: permitDetailsDTO.getPermitValidityDetails().getPermitValidFrom().format(formatter))
						+ " TO "
						+ ((permitDetailsDTO.getPermitValidityDetails() == null
								|| permitDetailsDTO.getPermitValidityDetails().getPermitValidTo() == null) ? "---"
										: permitDetailsDTO.getPermitValidityDetails().getPermitValidTo()
												.format(formatter)));
		parameters.put("p_nature",
				((permitDetailsDTO.getPermitValidityDetails() == null
						|| permitDetailsDTO.getGoodsDetails().getPermitAllowedgoods() == null) ? StringUtils.EMPTY
								: permitDetailsDTO.getGoodsDetails().getPermitAllowedgoods()));
		parameters.put("purpose_eib",
				(permitDetailsDTO.getGoodsDetails() == null
						|| permitDetailsDTO.getGoodsDetails().getPermitAllowedgoods() == null) ? StringUtils.EMPTY
								: permitDetailsDTO.getGoodsDetails().getPermitAllowedgoods());
		parameters.put("office_name", StringUtils.EMPTY);
		if (registrationDetailsDTO.getOfficeDetails() != null
				&& registrationDetailsDTO.getOfficeDetails().getOfficeCode() != null) {
			Optional<OfficeDTO> officeDtoOptional = officeDAO
					.findByOfficeCode(registrationDetailsDTO.getOfficeDetails().getOfficeCode());
			parameters.put("office_name", StringUtils.EMPTY);
			if (officeDtoOptional.isPresent()) {
				officeDTO = officeDtoOptional.get();
				parameters.put("office_name",
						officeDTO.getOfficeName() == null ? StringUtils.EMPTY : officeDTO.getOfficeName());
			}
		}
		parameters.put("tax_paid", StringUtils.EMPTY);
		List<String> taxType = new ArrayList<>();
		taxType.add(TaxTypeEnum.QuarterlyTax.getDesc());
		taxType.add(TaxTypeEnum.HalfyearlyTax.getDesc());
		taxType.add(TaxTypeEnum.YearlyTax.getDesc());
		taxType.add(TaxTypeEnum.LifeTax.getDesc());
		List<TaxDetailsDTO> taxdetailOptional = taxDetailsDAO
				.findFirst10ByPrNoAndTaxStatusAndPaymentPeriodInOrderByCreatedDateDesc(permitDetailsDTO.getPrNo(),
						TaxStatusEnum.ACTIVE.getCode(), taxType);
		if (!taxdetailOptional.isEmpty()) {
			registrationService.updatePaidDateAsCreatedDate(taxdetailOptional);
			taxdetailOptional.sort((p1, p2) -> p2.getCreatedDate().compareTo(p1.getCreatedDate()));
			TaxDetailsDTO taxdetailsDto = taxdetailOptional.stream().findFirst().get();
			parameters.put("tax_paid", (taxdetailsDto.getTaxPeriodEnd() == null ? StringUtils.EMPTY
					: taxdetailsDto.getTaxPeriodEnd().format(formatter)));
			taxdetailOptional.clear();
		}
		parameters.put("AP_LOGO", getLogo(ReportFiles.APLOGO));
		parameters.put("otsilogo", getLogo(ReportFiles.OTSILOGO));
		parameters.put("WATER_MARK", getLogo(ReportFiles.WATER_MARK));
		parameters.put("DIGITAL_SIGN", getLogo(ReportFiles.DIGITAL_SIGN));
		parameters.put("IMAGE_SCAN", qrCode);
		return parameters;
	}

	public String getRegistrationQRCodeForPermitAuth(String prNo, String permitNo, String type) {

		return serverURL + ReportUrls.P_AUTH + prNo + "&permitNo=" + permitNo + "&permitType=" + type;
	}

	public Map<String, Object> getPermitAuth(String prNo, String permitNo, String permitType) {
		String qrCode = StringUtils.EMPTY;
		try {
			qrCode = qRCodeService.sendPDF(getRegistrationQRCodeForPermitAuth(prNo, permitNo, permitType));
			if (qrCode == null)
				qrCode = StringUtils.EMPTY;
		} catch (Exception e) {
			logger.error(" Exception :[] ", e);
		}
		Map<String, Object> parameters = new HashMap<>();
		RegistrationDetailsDTO registrationDetailsDTO = null;
		PermitDetailsDTO permitDetailsDTO = null;
		OfficeDTO officeDTO = null;
		Optional<PermitDetailsDTO> permitDetailOptional = permitDetailsDAO
				.findByPrNoAndPermitNoAndPermitTypePermitTypeAndPermitStatus(prNo, permitNo, permitType,
						PermitsEnum.ACTIVE.getDescription());
		if (permitDetailOptional.isPresent()) {
			permitDetailsDTO = permitDetailOptional.get();
		} else {
			logger.error("Record Not found");
			throw new BadRequestException("Record Not found");
		}
		Optional<RegistrationDetailsDTO> registrationDetails = registrationDetailDAO.findByPrNo(prNo);
		if (registrationDetails.isPresent()) {
			registrationDetailsDTO = registrationDetails.get();
		}

		RegistrationDetailsDTO dto = null;
		if (permitDetailsDTO.getRdto() != null) {
			dto = permitDetailsDTO.getRdto();
		} else {
			dto = registrationDetailsDTO;
		}

		String PRESENT_ADDRESS = StringUtils.EMPTY;
		if (dto.getApplicantDetails().getPresentAddress() != null) {

			PRESENT_ADDRESS = replaceDefaults(
					dto.getApplicantDetails().getPresentAddress().getDoorNo() == null ? StringUtils.EMPTY
							: dto.getApplicantDetails().getPresentAddress().getDoorNo())
					+ "\n"
					+ replaceDefaults(
							dto.getApplicantDetails().getPresentAddress().getStreetName() == null ? StringUtils.EMPTY
									: dto.getApplicantDetails().getPresentAddress().getStreetName().toUpperCase())
					+ ","
					+ replaceDefaults((dto.getApplicantDetails().getPresentAddress() == null
							|| dto.getApplicantDetails().getPresentAddress().getTownOrCity() == null)
									? StringUtils.EMPTY
									: dto.getApplicantDetails().getPresentAddress().getTownOrCity().toUpperCase())
					+ "\n"
					+ replaceDefaults((dto.getApplicantDetails().getPresentAddress().getVillage() == null
							|| dto.getApplicantDetails().getPresentAddress().getVillage().getVillageName() == null)
									? StringUtils.EMPTY
									: dto.getApplicantDetails().getPresentAddress().getVillage().getVillageName()
											.toUpperCase())
					+ ","
					+ replaceDefaults(((dto.getApplicantDetails().getPresentAddress().getMandal() == null
							|| dto.getApplicantDetails().getPresentAddress().getMandal().getMandalName() == null)
									? ""
									: dto.getApplicantDetails().getPresentAddress().getMandal().getMandalName()
											.toUpperCase())
							+ ","
							+ replaceDefaults(
									((dto.getApplicantDetails().getPresentAddress().getDistrict() == null
											|| dto.getApplicantDetails().getPresentAddress().getDistrict()
													.getDistrictName() == null)
															? ""
															: dto.getApplicantDetails().getPresentAddress()
																	.getDistrict().getDistrictName().toUpperCase()))
							+ "\n"
							+ replaceDefaults(((dto.getApplicantDetails().getPresentAddress().getState() == null
									|| dto.getApplicantDetails().getPresentAddress().getState().getStateName() == null)
											? ""
											: dto.getApplicantDetails().getPresentAddress().getState().getStateName()
													.toUpperCase()))
							+ "\n"
							+ replaceDefaults(
									(dto.getApplicantDetails().getPresentAddress().getPostOffice() == null ? ""
											: dto.getApplicantDetails().getPresentAddress().getPostOffice()
													.getPostOfficeCode())));

		}
		parameters = new HashMap<>();
		if (StringUtils.isBlank(permitDetailsDTO.getPermitAuthorizationNo())) {
			parameters.put("p_tvpNo",
					permitDetailsDTO.getPermitNo() == null ? StringUtils.EMPTY : permitDetailsDTO.getPermitNo());
		} else {
			parameters.put("p_tvpNo", permitDetailsDTO.getPermitAuthorizationNo() == null ? StringUtils.EMPTY
					: permitDetailsDTO.getPermitAuthorizationNo());
		}
		if (dto.getOwnerType() != null && dto.getOwnerType().getCode().equals(OwnerTypeEnum.Individual.getCode())) {
			parameters
					.put("p_holdername",
							replaceDefaults(dto.getApplicantDetails().getDisplayName() == null ? StringUtils.EMPTY
									: dto.getApplicantDetails().getDisplayName().toUpperCase()) + "\n"
									+ PRESENT_ADDRESS);
		} else {

			parameters.put("p_holdername",
					replaceDefaults(dto.getApplicantDetails().getEntityName() == null ? StringUtils.EMPTY
							: dto.getApplicantDetails().getEntityName().toUpperCase() + "\n" + PRESENT_ADDRESS));
		}
		parameters.put("p_regnum", dto.getPrNo() == null ? StringUtils.EMPTY : dto.getPrNo().toUpperCase());
		String covCode = dto.getClassOfVehicle();
		MasterCovDTO masterCovDTO = masterCovDAO.findByCovcode(covCode);
		parameters.put("p_cov", "");
		if (masterCovDTO != null) {
			parameters.put("p_cov", replaceDefaults(masterCovDTO.getCovdescription()).isEmpty() ? StringUtils.EMPTY
					: masterCovDTO.getCovdescription().toUpperCase());
		}
		parameters.put("p_cn",
				replaceDefaults((dto.getVahanDetails().getChassisNumber() == null || dto.getVahanDetails() == null)
						? StringUtils.EMPTY
						: dto.getVahanDetails().getChassisNumber()));
		parameters.put("p_engine",
				replaceDefaults((dto.getVahanDetails() == null || dto.getVahanDetails().getEngineNumber() == null)
						? StringUtils.EMPTY
						: dto.getVahanDetails().getEngineNumber()));
		parameters.put("p_max_pass_cap",
				replaceDefaults(
						(dto.getVahanDetails() == null || dto.getVahanDetails().getSeatingCapacity() == null) ? "NA"
								: dto.getVahanDetails().getSeatingCapacity()));
		if (dto.getVahanDetails().getTrailerChassisDetailsDTO() != null
				&& (!dto.getVahanDetails().getTrailerChassisDetailsDTO().isEmpty())) {
			Integer max = dto.getVahanDetails().getTrailerChassisDetailsDTO().stream().mapToInt(v -> v.getGtw()).max()
					.orElseThrow(NoSuchElementException::new);
			Integer gcwTotal = max + dto.getVahanDetails().getGvw();
			parameters.put("p_gvw",
					replaceDefaults((dto.getVahanDetails().getGvw() == null) ? StringUtils.EMPTY : (gcwTotal) + "Kgs"));
		} else {
			parameters.put("p_gvw",
					replaceDefaults((dto.getVahanDetails() == null || dto.getVahanDetails().getGvw() == null)
							? StringUtils.EMPTY
							: dto.getVahanDetails().getGvw()) + " Kgs");
		}
		if (dto.getSource() != null) {
			if (dto.getVahanDetails().getManufacturedMonthYear().length() < 6
					&& (dto.getSource().equalsIgnoreCase(SourceEnum.CFST0.getDesc())
							|| dto.getSource().equalsIgnoreCase(SourceEnum.CFST1.getDesc()))) {
				String[] dateSplited = dto.getVahanDetails().getManufacturedMonthYear().split("-");
				String manufacturdate = dateSplited[1] + dateSplited[0];
				parameters.put("YofMrg",
						replaceDefaults((dto.getVahanDetails() == null
								|| dto.getVahanDetails().getManufacturedMonthYear() == null) ? StringUtils.EMPTY
										: manufacturdate));
			}
		} else {
			parameters.put("YofMrg",
					replaceDefaults(
							(dto.getVahanDetails() == null || dto.getVahanDetails().getManufacturedMonthYear() == null)
									? StringUtils.EMPTY
									: dto.getVahanDetails().getManufacturedMonthYear()));
		}
		parameters.put("dyn_validity", "13. Period of validity of the authorisation from "
				+ ((permitDetailsDTO.getPermitValidityDetails() == null
						|| permitDetailsDTO.getPermitValidityDetails().getPermitAuthorizationValidFrom() == null)
								? "---"
								: permitDetailsDTO
										.getPermitValidityDetails().getPermitAuthorizationValidFrom().format(formatter))
				+ " to "
				+ ((permitDetailsDTO.getPermitValidityDetails() == null
						|| permitDetailsDTO.getPermitValidityDetails().getPermitAuthorizationValidTo() == null) ? "---"
								: permitDetailsDTO.getPermitValidityDetails().getPermitAuthorizationValidTo()
										.format(formatter)));
		parameters.put("expire_data",
				((permitDetailsDTO.getPermitValidityDetails() == null
						|| permitDetailsDTO.getPermitValidityDetails().getPermitValidTo() == null) ? "---"
								: permitDetailsDTO.getPermitValidityDetails().getPermitValidTo().format(formatter)));
		parameters.put("p_uw",
				replaceDefaults((dto.getVahanDetails() == null || dto.getVahanDetails().getUnladenWeight() == null)
						? StringUtils.EMPTY
						: dto.getVahanDetails().getUnladenWeight()) + " Kgs");
		parameters.put("office_name", StringUtils.EMPTY);
		if (dto.getOfficeDetails() != null && dto.getOfficeDetails().getOfficeCode() != null) {
			Optional<OfficeDTO> officeDtoOptional = officeDAO.findByOfficeCode(dto.getOfficeDetails().getOfficeCode());
			parameters.put("office_name", StringUtils.EMPTY);
			if (officeDtoOptional.isPresent()) {
				officeDTO = officeDtoOptional.get();
				parameters.put("office_name",
						officeDTO.getOfficeName() == null ? StringUtils.EMPTY : officeDTO.getOfficeName());
			}
		}
		parameters.put("Auth_fee", StringUtils.EMPTY);
		parameters.put("AP_LOGO", getLogo(ReportFiles.APLOGO));
		parameters.put("otsilogo", getLogo(ReportFiles.OTSILOGO));
		parameters.put("p_date", LocalDateTime.now().format(formatter));
		parameters.put("TIME", LocalTime.now().toString());
		parameters.put("WATER_MARK", getLogo(ReportFiles.WATER_MARK));
		parameters.put("DIGITAL_SIGN", getLogo(ReportFiles.DIGITAL_SIGN));
		parameters.put("IMAGE_SCAN", qrCode);
		return parameters;
	}

	public Map<String, Object> getTaxAndGreenTaxAndFcDetails(String inputNumber, String chassisNumber,
			String moduleType, String selectedRole) {

		if (moduleType.equalsIgnoreCase(ServiceEnum.VOLUNTARYTAX.getCode())) {
			return this.getVoluntaryTax(inputNumber);
		}
		RegistrationDetailsDTO registrationdetails = null;
		Map<String, Object> parameters = new HashMap<>();
		Optional<RegistrationDetailsDTO> regDetailOptional = registrationDetailDAO.findByPrNo(inputNumber);

		if (regDetailOptional.isPresent()) {
			registrationdetails = regDetailOptional.get();
		} else {
			logger.error("Record not found");
			throw new BadRequestException("Record not found");
		}
		if (StringUtils.isEmpty(selectedRole)) {
			if (!registrationdetails.getVahanDetails().getChassisNumber().equalsIgnoreCase(chassisNumber)) {
				logger.error("Invalid chassis Number");
				throw new BadRequestException("Invalid chassis Number");
			}
		}
		if (registrationdetails.isVehicleStoppaged()) {
			logger.error("vehicle is under stoppage");
			throw new BadRequestException("vehicle is under stoppage");
		}
		if (registrationdetails.getActionStatus() != null) {
			if (registrationdetails.getActionStatus().contains(RCActionStatus.INITIATED.getDesc())
					|| registrationdetails.getActionStatus().contains(RCActionStatus.SUSPEND.getDesc())
					|| registrationdetails.getActionStatus().contains(RCActionStatus.CANCELED.getDesc())) {
				logger.error("Vehicle RC is" + registrationdetails.getActionStatus());
				throw new BadRequestException("Vehicle RC is" + registrationdetails.getActionStatus());
			}
		}
		switch (moduleType) {
		case "fc":
			parameters = getFCDetails(registrationdetails.getApplicationNo());
			break;
		case "tax":
			parameters = getTaxAndGreenTax(registrationdetails.getApplicationNo(), registrationdetails.getPrNo(),
					moduleType);
			break;
		case "greentax":
			parameters = getTaxAndGreenTax(registrationdetails.getApplicationNo(), registrationdetails.getPrNo(),
					moduleType);
			break;
		default:
			break;
		}
		return parameters;
	}

	private Map<String, Object> getTaxAndGreenTax(String applicationNo, String prNo, String moduleType) {
		TaxDetailsDTO taxDetailDTO = null;
		RegistrationDetailsDTO registrationDetailsDTO = null;
		OfficeDTO officeDTO = null;
		Optional<RegistrationDetailsDTO> registrationDetailsDTOOptional = registrationDetailDAO
				.findByApplicationNo(applicationNo);
		if (registrationDetailsDTOOptional.isPresent()) {
			registrationDetailsDTO = registrationDetailsDTOOptional.get();
		} else {
			throw new BadRequestException("No record found");
		}
		Optional<TaxDetailsDTO> taxDetailOptional = taxDetailsDAO
				.findByApplicationNoOrderByCreatedDateDesc(applicationNo);
		if (taxDetailOptional.isPresent()) {
			taxDetailDTO = taxDetailOptional.get();
		} else {
			throw new BadRequestException("Record not found for ApplNo::" + applicationNo);
		}
		String qrCode = StringUtils.EMPTY;
		try {
			qrCode = qRCodeService.sendPDF(getRegistrationQRCodeForFc(registrationDetailsDTO.getApplicationNo()));
			if (qrCode == null)
				qrCode = StringUtils.EMPTY;
		} catch (Exception e) {
			logger.error(" Exception :[] ", e);
		}
		Map<String, Object> parameters = new HashMap<>();

		List<Map<String, TaxComponentDTO>> list = new ArrayList<Map<String, TaxComponentDTO>>();

		List<Map<String, TaxComponentDTO>> taxMap = taxDetailDTO.getTaxDetails();
		if (taxMap != null) {
			for (int i = 0; i <= list.size(); i++) {
				Map<String, TaxComponentDTO> currentList = taxMap.get(i);
				for (Entry<String, TaxComponentDTO> entry : currentList.entrySet()) {
					TaxComponentDTO value = entry.getValue();
					if (!value.getTaxName().equalsIgnoreCase("GreenTax")) {
						parameters.put("ULW",
								replaceDefaults((registrationDetailsDTO.getVahanDetails() == null
										|| registrationDetailsDTO.getVahanDetails().getUnladenWeight() == null)
												? StringUtils.EMPTY
												: registrationDetailsDTO.getVahanDetails().getUnladenWeight())
										+ " Kgs");
						if (CollectionUtils
								.isNotEmpty(registrationDetailsDTO.getVahanDetails().getTrailerChassisDetailsDTO())) {
							Integer max = registrationDetailsDTO.getVahanDetails().getTrailerChassisDetailsDTO()
									.stream().mapToInt(v -> v.getGtw()).max().orElseThrow(NoSuchElementException::new);
							Integer gcwTotal = max + registrationDetailsDTO.getVahanDetails().getGvw();
							parameters.put("GVW",
									replaceDefaults((registrationDetailsDTO.getVahanDetails().getGvw() == null)
											? StringUtils.EMPTY
											: (gcwTotal) + "Kgs"));
						} else {
							parameters.put("GVW",
									replaceDefaults((registrationDetailsDTO.getVahanDetails().getGvw() == null)
											? StringUtils.EMPTY
											: registrationDetailsDTO.getVahanDetails().getGvw() + "Kgs"));
						}
						parameters.put("SEAT_CAP",
								replaceDefaults((registrationDetailsDTO.getVahanDetails() == null
										|| registrationDetailsDTO.getVahanDetails().getSeatingCapacity() == null)
												? StringUtils.EMPTY
												: registrationDetailsDTO.getVahanDetails().getSeatingCapacity()));

						parameters.put("reg_serv_num",
								replaceDefaults((taxDetailDTO.getApplicationNo() == null) ? StringUtils.EMPTY
										: taxDetailDTO.getApplicationNo()));
						parameters.put("prno", replaceDefaults(
								(taxDetailDTO.getPrNo() == null) ? StringUtils.EMPTY : taxDetailDTO.getPrNo()));
						parameters.put("reg_num",
								replaceDefaults((taxDetailDTO.getApplicationNo() == null) ? StringUtils.EMPTY
										: taxDetailDTO.getApplicationNo()));

						parameters.put("cur_date",
								replaceDefaults((taxDetailDTO.getTaxPaidDate() == null) ? StringUtils.EMPTY
										: taxDetailDTO.getTaxPaidDate().format(formatter)));
						parameters.put("taxtype", replaceDefaults(
								(value.getTaxName() == null) ? StringUtils.EMPTY : value.getTaxName().toUpperCase()));
						parameters.put("penality",
								replaceDefaults((value.getPenalty() == null) ? "None" : value.getPenalty()));

						Optional<PropertiesDTO> optionalTAxServiceFee = Optional.empty();
						if (taxDetailDTO.getServiceFee() != null) {
							parameters.put("service_charge", (taxDetailDTO.getServiceFee() == null) ? "None"
									: taxDetailDTO.getServiceFee().toString());
						} else {

							optionalTAxServiceFee = propertiesDAO
									.findByModuleAndTaxAmountToGreaterThanEqualAndTaxAmountFromLessThanEqual(
											ModuleEnum.TAX.toString(), taxDetailDTO.getTaxAmount(),
											taxDetailDTO.getTaxAmount());
							parameters.put("service_charge",
									(String.valueOf(optionalTAxServiceFee.get().getAmount())) == null ? "None"
											: String.valueOf(optionalTAxServiceFee.get().getAmount()));
						}

						parameters.put("cess_tax",
								(taxDetailDTO.getCessFee() == null) ? "None" : taxDetailDTO.getCessFee().toString());
						parameters.put("pen_arrers", replaceDefaults(
								(value.getPenaltyArrears() == null) ? "None" : value.getPenaltyArrears()));
						parameters.put("tax_arrears",
								replaceDefaults((value.getTaxArrears() == null) ? "None" : value.getTaxArrears()));
						parameters.put("collect_amt", StringUtils.EMPTY);
						Double collectedAmt = 0d;
						if (taxDetailDTO.getTaxAmount() != null || taxDetailDTO.getServiceFee() != null
								|| taxDetailDTO.getCessFee() != null || value.getTaxArrears() != null
								|| value.getPenaltyArrears() != null || value.getPenalty() != null) {
							collectedAmt = (taxDetailDTO.getTaxAmount() == null ? 0.0 : taxDetailDTO.getTaxAmount())
									+ (taxDetailDTO.getServiceFee() == null ? optionalTAxServiceFee.get().getAmount()
											: taxDetailDTO.getServiceFee())
									+ (taxDetailDTO.getCessFee() == null ? 0.0 : taxDetailDTO.getCessFee())
									+ (value.getTaxArrears() == null ? 0.0 : value.getTaxArrears())
									+ (value.getPenaltyArrears() == null ? 0.0 : value.getPenaltyArrears())
									+ (value.getPenalty() == null ? 0.0 : value.getPenalty());
							parameters.put("collect_amt", collectedAmt.toString());
						}

						parameters.put("tax_valid",
								replaceDefaults((taxDetailDTO.getTaxPeriodEnd() == null) ? StringUtils.EMPTY
										: taxDetailDTO.getTaxPeriodEnd().format(formatter)));
						parameters.put("tax_amt",
								replaceDefaults((taxDetailDTO.getTaxAmount() == null) ? StringUtils.EMPTY
										: taxDetailDTO.getTaxAmount()));
						MasterCovDTO masterCovDTO = masterCovDAO.findByCovcode(taxDetailDTO.getClassOfVehicle());
						parameters.put("cov", StringUtils.EMPTY);
						if (masterCovDTO != null) {
							parameters.put("cov",
									replaceDefaults((masterCovDTO.getCovdescription() == null) ? StringUtils.EMPTY
											: masterCovDTO.getCovdescription().toUpperCase()));
						}
						if (registrationDetailsDTO.getOwnerType().getCode()
								.equalsIgnoreCase(OwnerTypeEnum.Individual.getCode())) {
							parameters.put("own_name",
									replaceDefaults((registrationDetailsDTO.getApplicantDetails() == null
											|| registrationDetailsDTO.getApplicantDetails().getDisplayName() == null)
													? StringUtils.EMPTY
													: registrationDetailsDTO.getApplicantDetails().getDisplayName()));
						} else {
							parameters.put("own_name",
									replaceDefaults((registrationDetailsDTO.getApplicantDetails() == null
											|| registrationDetailsDTO.getApplicantDetails().getEntityName() == null)
													? StringUtils.EMPTY
													: registrationDetailsDTO.getApplicantDetails().getEntityName()));
						}
						parameters.put("officeName", StringUtils.EMPTY);
						if (registrationDetailsDTO.getOfficeDetails() != null
								&& registrationDetailsDTO.getOfficeDetails().getOfficeCode() != null) {
							Optional<OfficeDTO> officeDtoOptional = officeDAO
									.findByOfficeCode(registrationDetailsDTO.getOfficeDetails().getOfficeCode());
							parameters.put("officeName", StringUtils.EMPTY);
							if (officeDtoOptional.isPresent()) {
								officeDTO = officeDtoOptional.get();
								parameters.put("officeName", officeDTO.getOfficeName() == null ? StringUtils.EMPTY
										: officeDTO.getOfficeName());
							}
						}

					} else {
						parameters.put("ULW",
								replaceDefaults((registrationDetailsDTO.getVahanDetails() == null
										|| registrationDetailsDTO.getVahanDetails().getUnladenWeight() == null)
												? StringUtils.EMPTY
												: registrationDetailsDTO.getVahanDetails().getUnladenWeight())
										+ " Kgs");
						parameters.put("GVW",
								replaceDefaults((registrationDetailsDTO.getVahanDetails() == null
										|| registrationDetailsDTO.getVahanDetails().getGvw() == null)
												? StringUtils.EMPTY
												: registrationDetailsDTO.getVahanDetails().getGvw())
										+ " Kgs");
						parameters.put("SEAT_CAP",
								replaceDefaults((registrationDetailsDTO.getVahanDetails() == null
										|| registrationDetailsDTO.getVahanDetails().getSeatingCapacity() == null)
												? StringUtils.EMPTY
												: registrationDetailsDTO.getVahanDetails().getSeatingCapacity()));

						parameters.put("reg_serv_num",
								replaceDefaults((taxDetailDTO.getApplicationNo() == null) ? StringUtils.EMPTY
										: taxDetailDTO.getApplicationNo()));
						parameters.put("prno", replaceDefaults(
								(taxDetailDTO.getPrNo() == null) ? StringUtils.EMPTY : taxDetailDTO.getPrNo()));
						parameters.put("reg_num",
								replaceDefaults((taxDetailDTO.getApplicationNo() == null) ? StringUtils.EMPTY
										: taxDetailDTO.getApplicationNo()));
						parameters.put("cur_date", LocalDate.now().format(formatter));
						parameters.put("taxtype", replaceDefaults(
								(taxDetailDTO.getTaxDetails() == null) ? StringUtils.EMPTY : value.getTaxName()));
						parameters.put("tax_valid",
								replaceDefaults((taxDetailDTO.getTaxPeriodEnd() == null) ? StringUtils.EMPTY
										: taxDetailDTO.getTaxPeriodEnd().format(formatter)));
						parameters.put("tax_amt",
								replaceDefaults((taxDetailDTO.getTaxAmount() == null) ? StringUtils.EMPTY
										: taxDetailDTO.getTaxAmount()));
						parameters.put("tax_arrears",
								replaceDefaults((value.getTaxArrears() == null) ? "None" : value.getTaxArrears()));
						parameters.put("collect_amt", StringUtils.EMPTY);

						Double totalAmt = 0d;
						if (taxDetailDTO.getGreenTaxAmount() != null || taxDetailDTO.getServiceFee() != null
								|| taxDetailDTO.getCessFee() != null || value.getTaxArrears() != null
								|| value.getPenaltyArrears() != null || value.getPenalty() != null) {
							totalAmt = (taxDetailDTO.getGreenTaxAmount() == null ? 0.0
									: taxDetailDTO.getGreenTaxAmount())
									+ (taxDetailDTO.getServiceFee() == null ? 0.0 : taxDetailDTO.getServiceFee())
									+ (taxDetailDTO.getCessFee() == null ? 0.0 : taxDetailDTO.getCessFee())
									+ (value.getTaxArrears() == null ? 0.0 : value.getTaxArrears())
									+ (value.getPenaltyArrears() == null ? 0.0 : value.getPenaltyArrears())
									+ (value.getPenalty() == null ? 0.0 : value.getPenalty());
							parameters.put("collect_amt", totalAmt.toString());
						}
						MasterCovDTO masterCovDTO = masterCovDAO.findByCovcode(taxDetailDTO.getClassOfVehicle());
						parameters.put("cov", StringUtils.EMPTY);
						if (masterCovDTO != null) {
							parameters.put("cov",
									replaceDefaults((masterCovDTO.getCovdescription() == null) ? StringUtils.EMPTY
											: masterCovDTO.getCovdescription().toUpperCase()));
						}
						if (registrationDetailsDTO.getOwnerType().getCode()
								.equalsIgnoreCase(OwnerTypeEnum.Individual.getCode())) {
							parameters.put("own_name",
									replaceDefaults((registrationDetailsDTO.getApplicantDetails() == null
											|| registrationDetailsDTO.getApplicantDetails().getDisplayName() == null)
													? StringUtils.EMPTY
													: registrationDetailsDTO.getApplicantDetails().getDisplayName()));
						} else {
							parameters.put("own_name",
									replaceDefaults((registrationDetailsDTO.getApplicantDetails() == null
											|| registrationDetailsDTO.getApplicantDetails().getEntityName() == null)
													? StringUtils.EMPTY
													: registrationDetailsDTO.getApplicantDetails().getEntityName()));
						}
						parameters.put("officeName", StringUtils.EMPTY);
						if (registrationDetailsDTO.getOfficeDetails() != null
								&& registrationDetailsDTO.getOfficeDetails().getOfficeCode() != null) {
							Optional<OfficeDTO> officeDtoOptional = officeDAO
									.findByOfficeCode(registrationDetailsDTO.getOfficeDetails().getOfficeCode());
							parameters.put("officeName", StringUtils.EMPTY);
							if (officeDtoOptional.isPresent()) {
								officeDTO = officeDtoOptional.get();
								parameters.put("officeName", officeDTO.getOfficeName() == null ? StringUtils.EMPTY
										: officeDTO.getOfficeName());
							}

						}

					}
				}
			}
		}
		// for greenTax receipt
		if (moduleType.equalsIgnoreCase("greentax")) {
			parameters.put("g_taxtype", "GREEN TAX");

			List<TaxDetailsDTO> allTaxList = taxDetailsDAO
					.findByApplicationNoInOrderByCreatedDateDesc(Arrays.asList(applicationNo));
			TaxComponentDTO greenTaxComponent = null;
			Optional<TaxDetailsDTO> greenTaxOptional = allTaxList.stream().filter(val -> val.getTaxDetails() != null
					&& val.getTaxDetails().stream().anyMatch(m -> m.get("GreenTax") != null)).findFirst();

			if (greenTaxOptional.isPresent()) {
				TaxDetailsDTO greenTaxDetails = greenTaxOptional.get();
				greenTaxComponent = greenTaxDetails.getTaxDetails().stream().filter(val -> val.get("GreenTax") != null)
						.map(mapper -> mapper.get("GreenTax")).findFirst().get();

			} else {
				throw new BadRequestException("No Green Tax records found ");
			}

			parameters.put("g_tax_valid",
					replaceDefaults((greenTaxComponent.getValidityTo() == null) ? StringUtils.EMPTY
							: greenTaxComponent.getValidityTo().format(formatter)));
			parameters.put("g_tax_amt", replaceDefaults(
					(greenTaxComponent.getAmount() == null) ? StringUtils.EMPTY : greenTaxComponent.getAmount()));

			parameters.put("collect_amt", replaceDefaults(
					(greenTaxComponent.getAmount() == null) ? StringUtils.EMPTY : greenTaxComponent.getAmount()));
			// parameters.put("cess_tax", (taxDetailDTO.getCessFee()==null ? "NA" :
			// taxDetailDTO.getCessFee().toString()));
		}
		parameters.put("local_date", LocalDate.now().format(formatter));
		parameters.put("TIME", LocalDateTime.now().format(timeFormatter));
		parameters.put("AP_LOGO", getLogo(ReportFiles.APLOGO));
		parameters.put("AP_LOGO", getLogo(ReportFiles.APLOGO));
		parameters.put("otsilogo", getLogo(ReportFiles.OTSILOGO));
		parameters.put("WATER_MARK", getLogo(ReportFiles.WATER_MARK));
		parameters.put("DIGITAL_SIGN", getLogo(ReportFiles.DIGITAL_SIGN));
		parameters.put("IMAGE_SCAN", qrCode);

		return parameters;
	}


	public Map<String, Object> getRegisterReportDetails(String inputNumber, boolean isForView) {
		RegistrationDetailsDTO registrationDetailsDTO = null;
		RegServiceDTO prvRec = null;
		Integer prvSize = 0;
		int nocListSize = 0;
		BregisterServiceVo bsServiceVo = null;
		BregisterOwnerVo bregisterVo = null;
		BregisterTheiftVO bregTheift = null;
		BregisterFinaceVo bFinaceVo = null;
		String manDate = StringUtils.EMPTY;
		List<TrailerChassisDetailsDTO> trailerChassisDetailsDTOList = null;
		List<TaxDetailsDTO> listOfPaidTax = null;
		List<UserDTO> userOfficedto = null;
		MasterUsersDTO masterUsersDTO = null;
		String qrCode = StringUtils.EMPTY;
		try {
			qrCode = qRCodeService.sendPDF(getRegistrationQRCodeForBreg(inputNumber));
			if (qrCode == null)
				qrCode = StringUtils.EMPTY;
		} catch (Exception e) {
			logger.error(" Exception :[] ", e);
		}
		Map<String, Object> parameters = new HashMap<>();

		Map<String, Object> tax = new HashMap<>();

		List<ServiceEnum> serviceEnums = new ArrayList<>();
		serviceEnums.add(ServiceEnum.getServiceEnumById(50));
		serviceEnums.add(ServiceEnum.getServiceEnumById(54));
		List<BregisterOwnerVo> ownerDetailss = new ArrayList<>();
		List<BregisterFinaceVo> financeDetailss = new ArrayList<>();
		List<BregisterServiceVo> listOfBregVos2 = new ArrayList<>();
		List<BregisterTheiftVO> theftDetailsList = new ArrayList<>();
		List<RegServiceDTO> towTransactionList = null;
		List<RegServiceDTO> listOfServiceIdsnotexist = null;
		registrationDetailsDTO = getCurrentUser(inputNumber.trim());
		List<RegServiceDTO> listOfRegServices = getListRegServicesDetails(inputNumber.trim());
		if (!CollectionUtils.isEmpty(listOfRegServices) && listOfRegServices.size() != 0) {
			listOfServiceIdsnotexist = listOfRegServices.stream()
					.filter(a -> (a.getServiceIds() == null && (a.getSource().equals(SourceEnum.CFST0.getDesc())
							|| a.getSource().equals(SourceEnum.CFST1.getDesc()))))
					.collect(Collectors.toList());
		}
		if (!CollectionUtils.isEmpty(listOfServiceIdsnotexist) && listOfServiceIdsnotexist.size() != 0) {
			for (RegServiceDTO regServiceDTO : listOfServiceIdsnotexist) {
				listOfRegServices.remove(regServiceDTO);
			}
		}
		parameters.put("regno",
				(registrationDetailsDTO.getPrNo() == null ? StringUtils.EMPTY : registrationDetailsDTO.getPrNo()));
		parameters.put("tr_num",
				(registrationDetailsDTO.getTrNo() == null ? StringUtils.EMPTY : registrationDetailsDTO.getTrNo()));
		parameters.put("tr_date", (registrationDetailsDTO.getTrGeneratedDate() == null ? StringUtils.EMPTY
				: registrationDetailsDTO.getTrGeneratedDate().format(formatter)));
		if (registrationDetailsDTO.getOfficeDetails() != null) {
			Optional<OfficeDTO> optionalOfficeDTO = officeDAO
					.findByOfficeCode(registrationDetailsDTO.getOfficeDetails().getOfficeCode());
			if (!optionalOfficeDTO.isPresent()) {
				throw new BadRequestException("office details Not found...!");
			}
			 userOfficedto =
			  userDAO.findByPrimaryRoleNameOrAdditionalRolesNameAndOfficeOfficeCodeNative( "MVI", "MVI",optionalOfficeDTO.get().
			  getOfficeCode()); 
			 if (CollectionUtils.isEmpty(userOfficedto)) {
			  
			  throw new BadRequestException("office not found for respective user");
			  
			  } 
			  parameters.put("officer",
			  (registrationDetailsDTO.getOfficeDetails().getOfficeCode() == null||!optionalOfficeDTO.isPresent() ?
			  StringUtils.EMPTY : userOfficedto.get(0).getUserId()));
			 
			parameters.put("officeName", ((optionalOfficeDTO.get().getOfficeName() == null) ? StringUtils.EMPTY
					: optionalOfficeDTO.get().getOfficeName()));

		} else {
			throw new BadRequestException("office details Not found...!");
		}
		parameters.put("doreg", (registrationDetailsDTO.getPrGeneratedDate() == null ? StringUtils.EMPTY
				: registrationDetailsDTO.getPrGeneratedDate().format(formatter)));
		parameters.put("endoreg",
				((registrationDetailsDTO.getRegistrationValidity() == null
						|| registrationDetailsDTO.getRegistrationValidity().getRegistrationValidity() == null)
								? StringUtils.EMPTY
								: registrationDetailsDTO.getRegistrationValidity().getRegistrationValidity()
										.format(formatter)));

		// present address and contact no
		parameters.put("contact", StringUtils.EMPTY);
		if (registrationDetailsDTO.getApplicantDetails() != null
				&& registrationDetailsDTO.getApplicantDetails().getContact() != null) {
			parameters.put("contact",
					(registrationDetailsDTO.getApplicantDetails().getContact().getMobile() == null ? StringUtils.EMPTY
							: registrationDetailsDTO.getApplicantDetails().getContact().getMobile()));

		}

		String tenpStr = isForView ? StringUtils.EMPTY : "\n";

		listOfRegServices.sort((p1, p2) -> p2.getCreatedDate().compareTo(p1.getCreatedDate()));
		// previous regNo and office rto
		parameters.put("pr_privous", StringUtils.EMPTY);
		parameters.put("rto_previous", StringUtils.EMPTY);
		parameters.put("old_pr", StringUtils.EMPTY);
		parameters.put("tr", StringUtils.EMPTY);
		parameters.put("noctooffice", StringUtils.EMPTY);
		parameters.put("nocfromoffice", StringUtils.EMPTY);
		parameters.put("nocissueDate", StringUtils.EMPTY);
		parameters.put("catogary", "NEW");
		if (!listOfRegServices.isEmpty() || registrationDetailsDTO != null) {
			if (!listOfRegServices.isEmpty()) {
				prvSize = listOfRegServices.size() - 1;
				prvRec = listOfRegServices.get(prvSize);
			} else {
				prvSize = 1;
			}
			if (prvRec != null) {
				parameters.put("pr_privous", (prvRec.getPrNo() == null ? StringUtils.EMPTY : prvRec.getPrNo()));
				parameters.put("rto_previous",
						(prvRec.getOfficeDetails() == null || prvRec.getOfficeDetails().getOfficeName() == null)
								? StringUtils.EMPTY
								: prvRec.getOfficeDetails().getOfficeName().toUpperCase());
				if (prvRec.getRegistrationDetails() != null && prvRec.getRegistrationDetails().getTrNo() != null) {
					parameters.put("tr", (null == prvRec.getRegistrationDetails().getTrNo()) ? StringUtils.EMPTY
							: prvRec.getRegistrationDetails().getTrNo());
				} else {
					parameters.put("old_pr",
							replaceDefaults(prvRec.getPrNo() == null ? StringUtils.EMPTY : prvRec.getPrNo()));
				}
			}
			bregisterVo = new BregisterOwnerVo();
			String PRESENT_ADDRESS = StringUtils.EMPTY;
			if (registrationDetailsDTO.getApplicantDetails() != null) {

				bregisterVo.setRefnumber(registrationDetailsDTO.getPrGeneratedDate() == null ? StringUtils.EMPTY
						: registrationDetailsDTO.getPrGeneratedDate().format(formatter));

				bregisterVo.setFromDate(StringUtils.EMPTY);
				if (registrationDetailsDTO.getOwnerType().equals(OwnerTypeEnum.Individual)) {
					bregisterVo.setToDate((registrationDetailsDTO.getApplicantDetails() == null
							&& registrationDetailsDTO.getApplicantDetails().getFirstName() == null) ? StringUtils.EMPTY
									: registrationDetailsDTO.getApplicantDetails().getFirstName());
					bregisterVo.setFirstName((registrationDetailsDTO.getApplicantDetails() == null
							&& registrationDetailsDTO.getApplicantDetails().getFirstName() == null) ? StringUtils.EMPTY
									: registrationDetailsDTO.getApplicantDetails().getFirstName());
					bregisterVo.setDisplayName((registrationDetailsDTO.getApplicantDetails() == null
							&& registrationDetailsDTO.getApplicantDetails().getDisplayName() == null)
									? StringUtils.EMPTY
									: registrationDetailsDTO.getApplicantDetails().getDisplayName());

					bregisterVo.setRepName(" N/A");
					bregisterVo.setType((registrationDetailsDTO.getApplicantDetails() == null
							&& registrationDetailsDTO.getApplicantDetails().getFatherName() == null) ? StringUtils.EMPTY
									: registrationDetailsDTO.getApplicantDetails().getFatherName());
				} else {
					bregisterVo.setToDate((registrationDetailsDTO.getApplicantDetails() == null
							&& registrationDetailsDTO.getApplicantDetails().getEntityName() == null) ? StringUtils.EMPTY
									: registrationDetailsDTO.getApplicantDetails().getEntityName());

					bregisterVo.setFirstName((registrationDetailsDTO.getApplicantDetails() == null
							&& registrationDetailsDTO.getApplicantDetails().getFirstName() == null) ? StringUtils.EMPTY
									: registrationDetailsDTO.getApplicantDetails().getFirstName());

					bregisterVo.setDisplayName((registrationDetailsDTO.getApplicantDetails() == null
							&& registrationDetailsDTO.getApplicantDetails().getDisplayName() == null)
									? StringUtils.EMPTY
									: registrationDetailsDTO.getApplicantDetails().getDisplayName());

					bregisterVo.setRepName((registrationDetailsDTO.getApplicantDetails() == null
							&& registrationDetailsDTO.getApplicantDetails().getRepresentativeName() == null)
									? StringUtils.EMPTY
									: registrationDetailsDTO.getApplicantDetails().getRepresentativeName());

					bregisterVo.setType((registrationDetailsDTO.getApplicantDetails() == null
							&& registrationDetailsDTO.getApplicantDetails().getFatherName() == null) ? StringUtils.EMPTY
									: registrationDetailsDTO.getApplicantDetails().getFatherName());
				}

				bregisterVo.setContactNum((registrationDetailsDTO.getApplicantDetails().getContact() == null
						|| registrationDetailsDTO.getApplicantDetails().getContact().getMobile() == null)
								? StringUtils.EMPTY
								: registrationDetailsDTO.getApplicantDetails().getContact().getMobile());
				PRESENT_ADDRESS = StringUtils.EMPTY;
				if (registrationDetailsDTO.getApplicantDetails().getPresentAddress() != null) {
					PRESENT_ADDRESS = replaceDefaults(
							registrationDetailsDTO.getApplicantDetails().getPresentAddress().getDoorNo() == null
									? StringUtils.EMPTY
									: registrationDetailsDTO.getApplicantDetails().getPresentAddress().getDoorNo())
							+ (",")
							+ replaceDefaults(
									registrationDetailsDTO.getApplicantDetails().getPresentAddress()
											.getStreetName() == null
													? StringUtils.EMPTY
													: registrationDetailsDTO
															.getApplicantDetails().getPresentAddress().getStreetName())
							+ (",")
							+ replaceDefaults(registrationDetailsDTO.getApplicantDetails().getPresentAddress()
									.getTownOrCity() == null
											? StringUtils.EMPTY
											: registrationDetailsDTO.getApplicantDetails().getPresentAddress()
													.getTownOrCity())
							+ (",")
							+ replaceDefaults(
									registrationDetailsDTO.getApplicantDetails().getPresentAddress().getMandal() == null
											|| registrationDetailsDTO.getApplicantDetails().getPresentAddress()
													.getMandal().getMandalName() == null
															? StringUtils.EMPTY
															: registrationDetailsDTO.getApplicantDetails()
																	.getPresentAddress().getMandal().getMandalName())
							+ (",")
							+ replaceDefaults(registrationDetailsDTO.getApplicantDetails().getPresentAddress()
									.getDistrict() == null
									|| registrationDetailsDTO.getApplicantDetails().getPresentAddress().getDistrict()
											.getDistrictName() == null
													? StringUtils.EMPTY
													: registrationDetailsDTO.getApplicantDetails().getPresentAddress()
															.getDistrict().getDistrictName())
							+ (",")
							+ replaceDefaults(
									registrationDetailsDTO.getApplicantDetails().getPresentAddress().getState() == null
											|| registrationDetailsDTO.getApplicantDetails().getPresentAddress()
													.getState().getStateName() == null ? StringUtils.EMPTY
															: registrationDetailsDTO.getApplicantDetails()
																	.getPresentAddress().getState().getStateName());

				}
				bregisterVo.setAddress(PRESENT_ADDRESS);
				if (listOfRegServices != null) {
					towTransactionList = listOfRegServices.stream()
							.filter(a -> a.getServiceIds().contains(ServiceEnum.TRANSFEROFOWNERSHIP.getId())
									|| a.getServiceIds().contains(ServiceEnum.CHANGEOFADDRESS.getId()))
							.collect(Collectors.toList());

				}
				if (towTransactionList.size() >= 1) {
					towTransactionList.sort((p1, p2) -> p2.getCreatedDate().compareTo(p1.getCreatedDate()));
					for (RegServiceDTO towLists : towTransactionList) {
						if (towLists.getServiceIds().contains(ServiceEnum.TRANSFEROFOWNERSHIP.getId())
								|| towLists.getServiceIds().contains(ServiceEnum.CHANGEOFADDRESS.getId())) {
							bregisterVo.setRefnumber(
									(towLists.getlUpdate() == null) ? towLists.getCreatedDate().format(formatter)
											: towLists.getlUpdate().format(formatter));
							bregisterVo.setFromDate("");
						}
						break;
					}

				}
				ownerDetailss.add(bregisterVo);
			}

			String FINANCE_ADDRESS = StringUtils.EMPTY;

			if (registrationDetailsDTO.getFinanceDetails() != null) {
				bFinaceVo = new BregisterFinaceVo();
				if (registrationDetailsDTO.getFinanceDetails().getUserId() != null) {
					masterUsersDTO = masterUsersDAO
							.findByUserId(registrationDetailsDTO.getFinanceDetails().getUserId());
				}
				if (masterUsersDTO == null) {
					FINANCE_ADDRESS = replaceDefaults((registrationDetailsDTO.getFinanceDetails() == null
							|| registrationDetailsDTO.getFinanceDetails().getDoorNumber() == null) ? StringUtils.EMPTY
									: registrationDetailsDTO.getFinanceDetails().getDoorNumber())
							+ ","
							+ replaceDefaults(
									((registrationDetailsDTO.getFinanceDetails() == null
											|| registrationDetailsDTO.getFinanceDetails().getStreetName() == null)
													? StringUtils.EMPTY
													: registrationDetailsDTO.getFinanceDetails().getStreetName()
															.toUpperCase())
											+ ","
											+ replaceDefaults((registrationDetailsDTO.getFinanceDetails() == null
													|| registrationDetailsDTO.getFinanceDetails().getMandal() == null
													|| registrationDetailsDTO.getFinanceDetails().getMandal()
															.getMandalName() == null)
																	? StringUtils.EMPTY
																	: registrationDetailsDTO.getFinanceDetails()
																			.getMandal().getMandalName().toUpperCase())
											+ tenpStr
											+ replaceDefaults((registrationDetailsDTO.getFinanceDetails() == null
													|| registrationDetailsDTO.getFinanceDetails().getState() == null
													|| registrationDetailsDTO.getFinanceDetails().getState()
															.getStateName() == null) ? StringUtils.EMPTY
																	: registrationDetailsDTO.getFinanceDetails()
																			.getState().getStateName().toUpperCase()));

					bFinaceVo.setFaddress(FINANCE_ADDRESS);
					bFinaceVo.setFcity((registrationDetailsDTO.getFinanceDetails() == null
							|| registrationDetailsDTO.getFinanceDetails().getDistrict() == null
							|| registrationDetailsDTO.getFinanceDetails().getDistrict().getDistrictName() == null)
									? StringUtils.EMPTY
									: registrationDetailsDTO.getFinanceDetails().getDistrict().getDistrictName()
											.toUpperCase());
				} else {
					FINANCE_ADDRESS = replaceDefaults(
							(null == masterUsersDTO.getDoorNo() || masterUsersDTO.getDoorNo().isEmpty())
									? StringUtils.EMPTY
									: masterUsersDTO.getDoorNo())
							+ ","
							+ replaceDefaults(
									(null == masterUsersDTO.getStreetName() || masterUsersDTO.getStreetName().isEmpty())
											? StringUtils.EMPTY
											: masterUsersDTO.getStreetName().toUpperCase())
							+ ","
							+ replaceDefaults(
									(masterUsersDTO.getMandal() == null || masterUsersDTO.getMandal() == null
											|| masterUsersDTO.getMandal().getMandalName() == null) ? StringUtils.EMPTY
													: masterUsersDTO.getMandal().getMandalName().toUpperCase())
							+ tenpStr
							+ replaceDefaults(masterUsersDTO.getState() == null
									|| masterUsersDTO.getState().getStateName() == null ? StringUtils.EMPTY
											: masterUsersDTO.getState().getStateName().toUpperCase());
					bFinaceVo.setFaddress(FINANCE_ADDRESS);
					bFinaceVo.setFcity((masterUsersDTO == null || masterUsersDTO.getCity() == null
							|| masterUsersDTO.getDistrict() == null
							|| masterUsersDTO.getDistrict().getDistrictName() == null) ? ""
									: masterUsersDTO.getDistrict().getDistrictName());
				}

				bFinaceVo.setFtoDate((registrationDetailsDTO.getFinanceDetails() == null
						|| registrationDetailsDTO.getFinanceDetails().getTerminateDate() == null) ? ""
								: registrationDetailsDTO.getFinanceDetails().getTerminateDate().format(formatter));
				bFinaceVo.setFfromDate((registrationDetailsDTO.getFinanceDetails() == null
						|| registrationDetailsDTO.getFinanceDetails().getAgreementDate() == null) ? ""
								: registrationDetailsDTO.getFinanceDetails().getAgreementDate().format(formatter));
				bFinaceVo.setFname((registrationDetailsDTO.getFinanceDetails() == null
						|| registrationDetailsDTO.getFinanceDetails().getFinancerName() == null) ? ""
								: registrationDetailsDTO.getFinanceDetails().getFinancerName());

				bFinaceVo.setFcity((registrationDetailsDTO.getFinanceDetails() == null
						|| registrationDetailsDTO.getFinanceDetails().getDistrict() == null
						|| registrationDetailsDTO.getFinanceDetails().getDistrict().getDistrictName() == null)
								? StringUtils.EMPTY
								: registrationDetailsDTO.getFinanceDetails().getDistrict().getDistrictName()
										.toUpperCase());

				financeDetailss.add(bFinaceVo);

			}

			for (RegServiceDTO regServiceDTO : listOfRegServices) {
				if (regServiceDTO.getServiceIds() == null) {
					throw new BadRequestException(
							"Service Types not found for this application..!" + regServiceDTO.getApplicationNo());
				}
				if (regServiceDTO != null && regServiceDTO.getServiceIds() != null) {
					List<ServiceEnum> serviceIds = regServiceDTO.getServiceIds().stream()
							.map(id -> ServiceEnum.getServiceEnumById(id)).collect(Collectors.toList());
					if (serviceIds != null) {
						for (ServiceEnum serviceEnum : serviceIds) {
							bsServiceVo = new BregisterServiceVo();
							if (serviceEnum.getDesc().equals("Fr")) {
								bsServiceVo.setServiceName("Fresh Registration");

							} else {
								bsServiceVo.setServiceName(serviceEnum.getDesc());
							}
							bsServiceVo.setCreatedDate((regServiceDTO.getlUpdate() == null)
									? regServiceDTO.getCreatedDate().format(formatter)
									: regServiceDTO.getlUpdate().format(formatter));
							bsServiceVo.setApplicationNo(regServiceDTO.getApplicationNo());
							listOfBregVos2.add(bsServiceVo);

							if ((serviceEnum.equals(ServiceEnum.TRANSFEROFOWNERSHIP)
									|| serviceEnum.equals(ServiceEnum.CHANGEOFADDRESS)
									|| serviceEnum.equals(ServiceEnum.FR) || serviceEnum.equals(ServiceEnum.DATAENTRY))
									&& serviceEnum != null) {
								bregisterVo = new BregisterOwnerVo();

								PRESENT_ADDRESS = StringUtils.EMPTY;
								if (regServiceDTO.getRegistrationDetails() != null) {

									if (regServiceDTO.getServiceIds().contains(ServiceEnum.DATAENTRY.getId())
											|| regServiceDTO.getServiceIds().contains(ServiceEnum.FR.getId())) {
										bregisterVo.setRefnumber(
												(regServiceDTO.getRegistrationDetails().getPrGeneratedDate() == null)
														? registrationDetailsDTO.getPrGeneratedDate().format(formatter)
														: regServiceDTO.getRegistrationDetails().getPrGeneratedDate()
																.format(formatter));
									} else {

										bregisterVo.setRefnumber((regServiceDTO.getlUpdate() == null)
												? regServiceDTO.getCreatedDate().format(formatter)
												: regServiceDTO.getlUpdate().format(formatter));

									}
									if (!CollectionUtils.isEmpty(towTransactionList) && towTransactionList.size() == 1
											&& (regServiceDTO.getSource() == null
													|| StringUtils.isEmpty(regServiceDTO.getSource()))) {
										bregisterVo.setRefnumber(
												(regServiceDTO.getRegistrationDetails().getPrGeneratedDate() == null)
														? registrationDetailsDTO.getPrGeneratedDate().format(formatter)
														: regServiceDTO.getRegistrationDetails().getPrGeneratedDate()
																.format(formatter));
									}

									bregisterVo.setFromDate(ownerDetailss.get(ownerDetailss.size() - 1).getRefnumber());

									if (regServiceDTO.getBuyerDetails() != null
											&& regServiceDTO.getBuyerDetails().getBuyerApplicantDetails() != null
											&& regServiceDTO.getBuyerDetails().getBuyerApplicantDetails()
													.getPresentAddress() != null
											&& (!CollectionUtils.isEmpty(towTransactionList)
													&& towTransactionList.size() > 1)
											&& (regServiceDTO.getSource() == null
													|| StringUtils.isEmpty(regServiceDTO.getSource()))) {
										if(regServiceDTO.getBuyerDetails().getOwnerShipType()==null||regServiceDTO.getBuyerDetails().getOwnerShipType()==null)
										{
											throw new BadRequestException(
													"ownner type is missing..!" + regServiceDTO.getApplicationNo());
										}

										if (regServiceDTO.getBuyerDetails().getOwnerShipType().getDescription()
												.equals(OwnerTypeEnum.Individual.toString())) {
											bregisterVo.setToDate((regServiceDTO.getBuyerDetails()
													.getBuyerApplicantDetails().getFirstName() == null
													&& regServiceDTO.getBuyerDetails().getBuyerApplicantDetails()
															.getFirstName() == null) ? StringUtils.EMPTY
																	: regServiceDTO.getBuyerDetails()
																			.getBuyerApplicantDetails().getFirstName());

											bregisterVo.setFirstName(
													(regServiceDTO.getBuyerDetails().getBuyerApplicantDetails()
															.getFirstName() == null) ? StringUtils.EMPTY
																	: regServiceDTO.getBuyerDetails()
																			.getBuyerApplicantDetails().getFirstName());

											bregisterVo.setDisplayName((regServiceDTO.getBuyerDetails()
													.getBuyerApplicantDetails().getDisplayName() == null)
															? StringUtils.EMPTY
															: regServiceDTO.getBuyerDetails().getBuyerApplicantDetails()
																	.getDisplayName());

											bregisterVo.setRepName(" N/A");

											bregisterVo.setType((regServiceDTO.getBuyerDetails()
													.getBuyerApplicantDetails().getFatherName() == null)
															? StringUtils.EMPTY
															: regServiceDTO.getBuyerDetails().getBuyerApplicantDetails()
																	.getFatherName());
										} else {
											bregisterVo.setToDate((regServiceDTO.getBuyerDetails()
													.getBuyerApplicantDetails().getEntityName() == null)
															? StringUtils.EMPTY
															: regServiceDTO.getBuyerDetails().getBuyerApplicantDetails()
																	.getEntityName());

											bregisterVo.setFirstName(
													(regServiceDTO.getBuyerDetails().getBuyerApplicantDetails()
															.getFirstName() == null) ? StringUtils.EMPTY
																	: regServiceDTO.getBuyerDetails()
																			.getBuyerApplicantDetails().getFirstName());

											bregisterVo.setDisplayName((regServiceDTO.getBuyerDetails()
													.getBuyerApplicantDetails().getDisplayName() == null)
															? StringUtils.EMPTY
															: regServiceDTO.getBuyerDetails().getBuyerApplicantDetails()
																	.getDisplayName());

											bregisterVo.setRepName((regServiceDTO.getBuyerDetails()
													.getBuyerApplicantDetails().getRepresentativeName() == null)
															? StringUtils.EMPTY
															: regServiceDTO.getBuyerDetails().getBuyerApplicantDetails()
																	.getRepresentativeName());

											bregisterVo.setType((regServiceDTO.getBuyerDetails()
													.getBuyerApplicantDetails().getFatherName() == null)
															? StringUtils.EMPTY
															: regServiceDTO.getBuyerDetails().getBuyerApplicantDetails()
																	.getFatherName());

										}

										bregisterVo.setContactNum((regServiceDTO.getBuyerDetails()
												.getBuyerApplicantDetails().getContact() == null
												|| regServiceDTO.getBuyerDetails().getBuyerApplicantDetails()
														.getContact().getMobile() == null)
																? StringUtils.EMPTY
																: regServiceDTO.getBuyerDetails()
																		.getBuyerApplicantDetails().getContact()
																		.getMobile());

										if (regServiceDTO.getBuyerDetails().getBuyerApplicantDetails()
												.getPresentAddress() != null) {

											PRESENT_ADDRESS = replaceDefaults(regServiceDTO.getBuyerDetails()
													.getBuyerApplicantDetails().getPresentAddress().getDoorNo() == null
															? StringUtils.EMPTY
															: regServiceDTO.getBuyerDetails().getBuyerApplicantDetails()
																	.getPresentAddress().getDoorNo())
													+ tenpStr
													+ replaceDefaults(
															regServiceDTO.getBuyerDetails().getBuyerApplicantDetails()
																	.getPresentAddress().getStreetName() == null
																			? StringUtils.EMPTY
																			: regServiceDTO.getBuyerDetails()
																					.getBuyerApplicantDetails()
																					.getPresentAddress().getStreetName()
																					.toUpperCase())
													+ ","
													+ replaceDefaults((regServiceDTO.getBuyerDetails()
															.getBuyerApplicantDetails().getPresentAddress() == null
															|| regServiceDTO.getBuyerDetails()
																	.getBuyerApplicantDetails().getPresentAddress()
																	.getTownOrCity() == null)
																			? StringUtils.EMPTY
																			: regServiceDTO.getBuyerDetails()
																					.getBuyerApplicantDetails()
																					.getPresentAddress().getTownOrCity()
																					.toUpperCase())
													+ tenpStr
													+ replaceDefaults((regServiceDTO.getBuyerDetails()
															.getBuyerApplicantDetails().getPresentAddress()
															.getVillage() == null
															|| regServiceDTO.getBuyerDetails()
																	.getBuyerApplicantDetails().getPresentAddress()
																	.getVillage().getVillageName() == null)
																			? StringUtils.EMPTY
																			: regServiceDTO.getBuyerDetails()
																					.getBuyerApplicantDetails()
																					.getPresentAddress().getVillage()
																					.getVillageName().toUpperCase())
													+ ","
													+ replaceDefaults(((regServiceDTO.getBuyerDetails()
															.getBuyerApplicantDetails().getPresentAddress()
															.getMandal() == null
															|| regServiceDTO.getBuyerDetails()
																	.getBuyerApplicantDetails().getPresentAddress()
																	.getMandal().getMandalName() == null)
																			? ""
																			: regServiceDTO.getBuyerDetails()
																					.getBuyerApplicantDetails()
																					.getPresentAddress().getMandal()
																					.getMandalName().toUpperCase())
															+ ","
															+ replaceDefaults(((regServiceDTO.getBuyerDetails()
																	.getBuyerApplicantDetails().getPresentAddress()
																	.getDistrict() == null
																	|| regServiceDTO.getBuyerDetails()
																			.getBuyerApplicantDetails()
																			.getPresentAddress().getDistrict()
																			.getDistrictName() == null)
																					? ""
																					: regServiceDTO.getBuyerDetails()
																							.getBuyerApplicantDetails()
																							.getPresentAddress()
																							.getDistrict()
																							.getDistrictName()
																							.toUpperCase()))
															+ tenpStr
															+ replaceDefaults(((regServiceDTO.getBuyerDetails()
																	.getBuyerApplicantDetails().getPresentAddress()
																	.getState() == null
																	|| regServiceDTO.getBuyerDetails()
																			.getBuyerApplicantDetails()
																			.getPresentAddress().getState()
																			.getStateName() == null)
																					? ""
																					: regServiceDTO.getBuyerDetails()
																							.getBuyerApplicantDetails()
																							.getPresentAddress()
																							.getState().getStateName()
																							.toUpperCase()))
															+ tenpStr
															+ replaceDefaults((regServiceDTO.getBuyerDetails()
																	.getBuyerApplicantDetails().getPresentAddress()
																	.getPostOffice() == null
																			? ""
																			: regServiceDTO.getBuyerDetails()
																					.getBuyerApplicantDetails()
																					.getPresentAddress().getPostOffice()
																					.getPostOfficeCode())));

										}

									} else {
										
										if(regServiceDTO.getRegistrationDetails()!=null&&regServiceDTO.getRegistrationDetails().getOwnerType()==null)
										{
											throw new BadRequestException(
													"ownner type is missing..!" + regServiceDTO.getApplicationNo());
										}
										if (regServiceDTO.getRegistrationDetails().getOwnerType()
												.equals(OwnerTypeEnum.Individual)) {
											bregisterVo.setToDate((regServiceDTO.getRegistrationDetails()
													.getApplicantDetails().getFirstName() == null) ? StringUtils.EMPTY
															: regServiceDTO.getRegistrationDetails()
																	.getApplicantDetails().getFirstName());

											bregisterVo.setFirstName((regServiceDTO.getRegistrationDetails()
													.getApplicantDetails().getFirstName() == null) ? StringUtils.EMPTY
															: regServiceDTO.getRegistrationDetails()
																	.getApplicantDetails().getFirstName());

											bregisterVo.setDisplayName((regServiceDTO.getRegistrationDetails()
													.getApplicantDetails().getDisplayName() == null) ? StringUtils.EMPTY
															: regServiceDTO.getRegistrationDetails()
																	.getApplicantDetails().getDisplayName());

											bregisterVo.setRepName(" N/A");

											bregisterVo.setType((regServiceDTO.getRegistrationDetails()
													.getApplicantDetails().getFatherName() == null) ? StringUtils.EMPTY
															: regServiceDTO.getRegistrationDetails()
																	.getApplicantDetails().getFatherName());
										} else {
											bregisterVo.setToDate((regServiceDTO.getRegistrationDetails()
													.getApplicantDetails().getFirstName() == null) ? StringUtils.EMPTY
															: regServiceDTO.getRegistrationDetails()
																	.getApplicantDetails().getEntityName());

											bregisterVo.setFirstName((regServiceDTO.getRegistrationDetails()
													.getApplicantDetails().getFirstName() == null) ? StringUtils.EMPTY
															: regServiceDTO.getRegistrationDetails()
																	.getApplicantDetails().getFirstName());

											bregisterVo.setDisplayName((regServiceDTO.getRegistrationDetails()
													.getApplicantDetails().getDisplayName() == null) ? StringUtils.EMPTY
															: regServiceDTO.getRegistrationDetails()
																	.getApplicantDetails().getDisplayName());

											bregisterVo.setRepName((regServiceDTO.getRegistrationDetails()
													.getApplicantDetails().getRepresentativeName() == null)
															? StringUtils.EMPTY
															: regServiceDTO.getRegistrationDetails()
																	.getApplicantDetails().getRepresentativeName());

											bregisterVo.setType((regServiceDTO.getRegistrationDetails()
													.getApplicantDetails().getFatherName() == null) ? StringUtils.EMPTY
															: regServiceDTO.getRegistrationDetails()
																	.getApplicantDetails().getFatherName());

										}

										bregisterVo.setContactNum((regServiceDTO.getRegistrationDetails()
												.getApplicantDetails().getContact() == null
												|| regServiceDTO.getRegistrationDetails().getApplicantDetails()
														.getContact().getMobile() == null)
																? StringUtils.EMPTY
																: regServiceDTO.getRegistrationDetails()
																		.getApplicantDetails().getContact()
																		.getMobile());

										if (regServiceDTO.getRegistrationDetails().getApplicantDetails()
												.getPresentAddress() != null) {

											PRESENT_ADDRESS = replaceDefaults(regServiceDTO.getRegistrationDetails()
													.getApplicantDetails().getPresentAddress().getDoorNo() == null
															? StringUtils.EMPTY
															: regServiceDTO.getRegistrationDetails()
																	.getApplicantDetails().getPresentAddress()
																	.getDoorNo())
													+ tenpStr
													+ replaceDefaults(
															regServiceDTO.getRegistrationDetails().getApplicantDetails()
																	.getPresentAddress().getStreetName() == null
																			? StringUtils.EMPTY
																			: regServiceDTO.getRegistrationDetails()
																					.getApplicantDetails()
																					.getPresentAddress().getStreetName()
																					.toUpperCase())
													+ ","
													+ replaceDefaults((regServiceDTO.getRegistrationDetails()
															.getApplicantDetails().getPresentAddress() == null
															|| regServiceDTO.getRegistrationDetails()
																	.getApplicantDetails().getPresentAddress()
																	.getTownOrCity() == null)
																			? StringUtils.EMPTY
																			: regServiceDTO.getRegistrationDetails()
																					.getApplicantDetails()
																					.getPresentAddress().getTownOrCity()
																					.toUpperCase())
													+ tenpStr
													+ replaceDefaults((regServiceDTO.getRegistrationDetails()
															.getApplicantDetails().getPresentAddress()
															.getVillage() == null
															|| regServiceDTO.getRegistrationDetails()
																	.getApplicantDetails().getPresentAddress()
																	.getVillage().getVillageName() == null)
																			? StringUtils.EMPTY
																			: regServiceDTO.getRegistrationDetails()
																					.getApplicantDetails()
																					.getPresentAddress().getVillage()
																					.getVillageName().toUpperCase())
													+ ","
													+ replaceDefaults(((regServiceDTO.getRegistrationDetails()
															.getApplicantDetails().getPresentAddress()
															.getMandal() == null
															|| regServiceDTO.getRegistrationDetails()
																	.getApplicantDetails().getPresentAddress()
																	.getMandal().getMandalName() == null)
																			? ""
																			: regServiceDTO.getRegistrationDetails()
																					.getApplicantDetails()
																					.getPresentAddress().getMandal()
																					.getMandalName().toUpperCase())
															+ ","
															+ replaceDefaults(((regServiceDTO.getRegistrationDetails()
																	.getApplicantDetails().getPresentAddress()
																	.getDistrict() == null
																	|| regServiceDTO.getRegistrationDetails()
																			.getApplicantDetails().getPresentAddress()
																			.getDistrict().getDistrictName() == null)
																					? ""
																					: regServiceDTO
																							.getRegistrationDetails()
																							.getApplicantDetails()
																							.getPresentAddress()
																							.getDistrict()
																							.getDistrictName()
																							.toUpperCase()))
															+ tenpStr
															+ replaceDefaults(((regServiceDTO.getRegistrationDetails()
																	.getApplicantDetails().getPresentAddress()
																	.getState() == null
																	|| regServiceDTO.getRegistrationDetails()
																			.getApplicantDetails().getPresentAddress()
																			.getState().getStateName() == null)
																					? ""
																					: regServiceDTO
																							.getRegistrationDetails()
																							.getApplicantDetails()
																							.getPresentAddress()
																							.getState().getStateName()
																							.toUpperCase()))
															+ tenpStr
															+ replaceDefaults((regServiceDTO.getRegistrationDetails()
																	.getApplicantDetails().getPresentAddress()
																	.getPostOffice() == null
																			? ""
																			: regServiceDTO.getRegistrationDetails()
																					.getApplicantDetails()
																					.getPresentAddress().getPostOffice()
																					.getPostOfficeCode())));

										}

									}

									if (regServiceDTO.getPresentAdderss() != null) {

										PRESENT_ADDRESS = replaceDefaults(
												regServiceDTO.getPresentAdderss().getDoorNo() == null
														? StringUtils.EMPTY
														: regServiceDTO.getPresentAdderss().getDoorNo())
												+ (",")
												+ replaceDefaults(
														regServiceDTO.getPresentAdderss().getStreetName() == null
																? StringUtils.EMPTY
																: regServiceDTO.getPresentAdderss().getStreetName())
												+ (",")
												+ replaceDefaults(
														regServiceDTO.getPresentAdderss().getTownOrCity() == null
																? StringUtils.EMPTY
																: regServiceDTO.getPresentAdderss().getTownOrCity())
												+ (",")
												+ replaceDefaults(regServiceDTO.getPresentAdderss().getMandal() == null
														|| regServiceDTO.getPresentAdderss().getMandal()
																.getMandalName() == null
																		? StringUtils.EMPTY
																		: regServiceDTO.getPresentAdderss().getMandal()
																				.getMandalName())
												+ (",")
												+ replaceDefaults(
														regServiceDTO.getPresentAdderss().getDistrict() == null
																|| regServiceDTO.getPresentAdderss().getDistrict()
																		.getDistrictName() == null
																				? StringUtils.EMPTY
																				: regServiceDTO.getPresentAdderss()
																						.getDistrict()
																						.getDistrictName())
												+ (",")
												+ replaceDefaults(regServiceDTO.getPresentAdderss().getState() == null
														|| regServiceDTO.getPresentAdderss().getState()
																.getStateName() == null ? StringUtils.EMPTY
																		: regServiceDTO.getPresentAdderss().getState()
																				.getStateName());

									}
									bregisterVo.setAddress(PRESENT_ADDRESS);
								} // else {break;}
								if (!(ownerDetailss.size() == 1 && doCompareBregisterOwnerVoISNull(bregisterVo)
										&& doCompareBregisterOwnerVo(ownerDetailss.get(0), bregisterVo))) {
									ownerDetailss.add(bregisterVo);
								}

							}

							if (serviceEnum.equals(ServiceEnum.HIREPURCHASETERMINATION)

									|| serviceEnum.equals((ServiceEnum.HPA)) && serviceEnum != null) {
								bFinaceVo = new BregisterFinaceVo();
								FINANCE_ADDRESS = StringUtils.EMPTY;
								parameters.put("HYPO", StringUtils.EMPTY);
								if (regServiceDTO.getFinanceDetails() == null
										&& (regServiceDTO.getRegistrationDetails() == null || regServiceDTO
												.getRegistrationDetails().getFinanceDetails() == null)) {
									throw new BadRequestException(
											"Finacier DATA not found..!" + regServiceDTO.getApplicationNo());
									/*
									 * bFinaceVo.setFname( "Finacier Data not Availble..!" +
									 * regServiceDTO.getApplicationNo()); break;
									 */
								}
								if (regServiceDTO.getFinanceDetails() != null) {

									if (regServiceDTO.getFinanceDetails().getUserId() != null) {
										masterUsersDTO = masterUsersDAO
												.findByUserId(regServiceDTO.getFinanceDetails().getUserId());
									}
									if (masterUsersDTO == null) {
										FINANCE_ADDRESS = replaceDefaults((regServiceDTO.getFinanceDetails() == null
												|| regServiceDTO.getFinanceDetails().getDoorNumber() == null)
														? StringUtils.EMPTY
														: regServiceDTO.getFinanceDetails().getDoorNumber())
												+ ","
												+ replaceDefaults(((regServiceDTO.getFinanceDetails() == null
														|| regServiceDTO.getFinanceDetails().getStreetName() == null)
																? StringUtils.EMPTY
																: regServiceDTO.getFinanceDetails().getStreetName()
																		.toUpperCase())
														+ ","
														+ replaceDefaults((regServiceDTO.getFinanceDetails() == null
																|| regServiceDTO.getFinanceDetails().getMandal() == null
																|| regServiceDTO.getFinanceDetails().getMandal()
																		.getMandalName() == null)
																				? StringUtils.EMPTY
																				: regServiceDTO
																						.getFinanceDetails().getMandal()
																						.getMandalName().toUpperCase())
														+ tenpStr
														+ replaceDefaults((regServiceDTO.getFinanceDetails() == null
																|| regServiceDTO.getFinanceDetails().getState() == null
																|| regServiceDTO.getFinanceDetails().getState()
																		.getStateName() == null)
																				? StringUtils.EMPTY
																				: regServiceDTO.getFinanceDetails()
																						.getState().getStateName()
																						.toUpperCase()));

										bFinaceVo.setFaddress(FINANCE_ADDRESS);
										bFinaceVo.setFcity((regServiceDTO.getFinanceDetails() == null
												|| regServiceDTO.getFinanceDetails().getDistrict() == null
												|| regServiceDTO.getFinanceDetails().getDistrict()
														.getDistrictName() == null) ? StringUtils.EMPTY
																: regServiceDTO.getFinanceDetails().getDistrict()
																		.getDistrictName().toUpperCase());
									} else {
										FINANCE_ADDRESS = replaceDefaults((null == masterUsersDTO.getDoorNo()
												|| masterUsersDTO.getDoorNo().isEmpty()) ? StringUtils.EMPTY
														: masterUsersDTO.getDoorNo())
												+ ","
												+ replaceDefaults(
														(null == masterUsersDTO.getStreetName()
																|| masterUsersDTO.getStreetName().isEmpty())
																		? StringUtils.EMPTY
																		: masterUsersDTO.getStreetName().toUpperCase())
												+ ","
												+ replaceDefaults((masterUsersDTO.getMandal() == null
														|| masterUsersDTO.getMandal().getMandalName() == null)
																? StringUtils.EMPTY
																: masterUsersDTO
																		.getMandal().getMandalName().toUpperCase())
												+ tenpStr
												+ replaceDefaults(masterUsersDTO.getState() == null
														|| masterUsersDTO.getState().getStateName() == null
																? StringUtils.EMPTY
																: masterUsersDTO.getState().getStateName()
																		.toUpperCase());
										bFinaceVo.setFaddress(FINANCE_ADDRESS);
										bFinaceVo.setFcity((masterUsersDTO == null || masterUsersDTO.getCity() == null
												|| masterUsersDTO.getDistrict() == null
												|| masterUsersDTO.getDistrict().getDistrictName() == null) ? ""
														: masterUsersDTO.getDistrict().getDistrictName());
									}

									if (regServiceDTO.getServiceIds()
											.contains(ServiceEnum.HIREPURCHASETERMINATION.getId())
											&& regServiceDTO.getFinanceDetails().getTerminateDate() == null) {
										bFinaceVo.setFtoDate((regServiceDTO.getFinanceDetails() == null
												|| regServiceDTO.getFinanceDetails().getTerminateDate() == null)
														? regServiceDTO.getCreatedDate().format(formatter)
														: regServiceDTO.getFinanceDetails().getTerminateDate()
																.format(formatter));
									} else {
										bFinaceVo.setFtoDate((regServiceDTO.getFinanceDetails() == null
												|| regServiceDTO.getFinanceDetails().getTerminateDate() == null) ? ""
														: regServiceDTO.getFinanceDetails().getTerminateDate()
																.format(formatter));
									}

									bFinaceVo.setFfromDate((regServiceDTO.getFinanceDetails() == null
											|| regServiceDTO.getFinanceDetails().getAgreementDate() == null) ? ""
													: regServiceDTO.getFinanceDetails().getAgreementDate()
															.format(formatter));
									bFinaceVo.setFname((regServiceDTO.getFinanceDetails() == null
											|| regServiceDTO.getFinanceDetails().getFinancerName() == null) ? ""
													: regServiceDTO.getFinanceDetails().getFinancerName());

									bFinaceVo.setFcity((regServiceDTO.getFinanceDetails() == null
											|| regServiceDTO.getFinanceDetails().getDistrict() == null
											|| regServiceDTO.getFinanceDetails().getDistrict()
													.getDistrictName() == null) ? StringUtils.EMPTY
															: regServiceDTO.getFinanceDetails().getDistrict()
																	.getDistrictName().toUpperCase());

									if (financeDetailss.size() >= 1 && !(doCompareBregisterFinacierVo(
											financeDetailss.get(financeDetailss.size() - 1), bFinaceVo))) {
										financeDetailss.add(bFinaceVo);
									}
									if (financeDetailss.size() == 0) {
										financeDetailss.add(bFinaceVo);

									}

								}
								if (regServiceDTO.getRegistrationDetails()!=null && regServiceDTO.getRegistrationDetails().getFinanceDetails() != null) {

									if (regServiceDTO.getRegistrationDetails().getFinanceDetails()
											.getUserId() != null) {
										masterUsersDTO = masterUsersDAO.findByUserId(
												regServiceDTO.getRegistrationDetails().getFinanceDetails().getUserId());
									}
									if (masterUsersDTO == null) {
										FINANCE_ADDRESS = replaceDefaults(
												(regServiceDTO.getRegistrationDetails().getFinanceDetails() == null
														|| regServiceDTO.getRegistrationDetails().getFinanceDetails()
																.getDoorNumber() == null)
																		? StringUtils.EMPTY
																		: regServiceDTO.getRegistrationDetails()
																				.getFinanceDetails().getDoorNumber())
												+ ","
												+ replaceDefaults(((regServiceDTO.getRegistrationDetails()
														.getFinanceDetails() == null
														|| regServiceDTO.getRegistrationDetails().getFinanceDetails()
																.getStreetName() == null)
																		? StringUtils.EMPTY
																		: regServiceDTO.getRegistrationDetails()
																				.getFinanceDetails().getStreetName()
																				.toUpperCase())
														+ ","
														+ replaceDefaults((regServiceDTO.getRegistrationDetails()
																.getFinanceDetails() == null
																|| regServiceDTO.getRegistrationDetails()
																		.getFinanceDetails().getMandal() == null
																|| regServiceDTO.getRegistrationDetails()
																		.getFinanceDetails().getMandal()
																		.getMandalName() == null)
																				? StringUtils.EMPTY
																				: regServiceDTO.getRegistrationDetails()
																						.getFinanceDetails().getMandal()
																						.getMandalName().toUpperCase())
														+ tenpStr
														+ replaceDefaults((regServiceDTO.getRegistrationDetails()
																.getFinanceDetails() == null
																|| regServiceDTO.getRegistrationDetails()
																		.getFinanceDetails().getState() == null
																|| regServiceDTO.getRegistrationDetails().getFinanceDetails().getState()
																		.getStateName() == null)
																				? StringUtils.EMPTY
																				: regServiceDTO.getRegistrationDetails().getFinanceDetails()
																						.getState().getStateName()
																						.toUpperCase()));

										bFinaceVo.setFaddress(FINANCE_ADDRESS);
										bFinaceVo.setFcity(
												(regServiceDTO.getRegistrationDetails().getFinanceDetails() == null
														|| regServiceDTO.getRegistrationDetails().getFinanceDetails()
																.getDistrict() == null|| regServiceDTO.getRegistrationDetails().getFinanceDetails()
																.getDistrict().getDistrictName() == null)
																		? StringUtils.EMPTY
																		: regServiceDTO.getRegistrationDetails()
																				.getFinanceDetails().getDistrict()
																				.getDistrictName().toUpperCase());
									} else {
										FINANCE_ADDRESS = replaceDefaults((null == masterUsersDTO.getDoorNo()
												|| masterUsersDTO.getDoorNo().isEmpty()) ? StringUtils.EMPTY
														: masterUsersDTO.getDoorNo())
												+ ","
												+ replaceDefaults(
														(null == masterUsersDTO.getStreetName()
																|| masterUsersDTO.getStreetName().isEmpty())
																		? StringUtils.EMPTY
																		: masterUsersDTO.getStreetName().toUpperCase())
												+ ","
												+ replaceDefaults((masterUsersDTO.getMandal() == null
														|| masterUsersDTO.getMandal().getMandalName() == null)
																? StringUtils.EMPTY
																: masterUsersDTO
																		.getMandal().getMandalName().toUpperCase())
												+ tenpStr
												+ replaceDefaults(masterUsersDTO.getState() == null
														|| masterUsersDTO.getState().getStateName() == null
																? StringUtils.EMPTY
																: masterUsersDTO.getState().getStateName()
																		.toUpperCase());
										bFinaceVo.setFaddress(FINANCE_ADDRESS);
										bFinaceVo.setFcity((masterUsersDTO == null || masterUsersDTO.getCity() == null
												|| masterUsersDTO.getDistrict() == null
												|| masterUsersDTO.getDistrict().getDistrictName() == null) ? ""
														: masterUsersDTO.getDistrict().getDistrictName());
									}
									if (regServiceDTO.getServiceIds()
											.contains(ServiceEnum.HIREPURCHASETERMINATION.getId())) {
										bFinaceVo.setFtoDate(
												(regServiceDTO.getRegistrationDetails().getFinanceDetails() == null
														|| regServiceDTO.getRegistrationDetails().getFinanceDetails()
																.getTerminateDate() == null)
																		? regServiceDTO.getCreatedDate()
																				.format(formatter)
																		: regServiceDTO.getRegistrationDetails()
																				.getFinanceDetails().getTerminateDate()
																				.format(formatter));
									} else {
										bFinaceVo.setFtoDate(
												(regServiceDTO.getRegistrationDetails().getFinanceDetails() == null
														|| regServiceDTO.getRegistrationDetails().getFinanceDetails()
																.getTerminateDate() == null)
																		? ""
																		: regServiceDTO.getRegistrationDetails()
																				.getFinanceDetails().getTerminateDate()
																				.format(formatter));
									}
									bFinaceVo.setFfromDate(
											(regServiceDTO.getRegistrationDetails().getFinanceDetails() == null
													|| regServiceDTO.getRegistrationDetails().getFinanceDetails()
															.getAgreementDate() == null)
																	? ""
																	: regServiceDTO.getRegistrationDetails()
																			.getFinanceDetails().getAgreementDate()
																			.format(formatter));
									bFinaceVo.setFname(
											(regServiceDTO.getRegistrationDetails().getFinanceDetails() == null
													|| regServiceDTO.getRegistrationDetails().getFinanceDetails()
															.getFinancerName() == null) ? ""
																	: regServiceDTO.getRegistrationDetails()
																			.getFinanceDetails().getFinancerName());

									bFinaceVo.setFcity(
											(regServiceDTO.getRegistrationDetails().getFinanceDetails() == null
													|| regServiceDTO.getRegistrationDetails().getFinanceDetails()
															.getDistrict() == null
													|| regServiceDTO.getRegistrationDetails().getFinanceDetails()
															.getDistrict().getDistrictName() == null)
																	? StringUtils.EMPTY
																	: regServiceDTO.getRegistrationDetails()
																			.getFinanceDetails().getDistrict()
																			.getDistrictName().toUpperCase());

									if (financeDetailss.size() >= 1 && !(doCompareBregisterFinacierVo(
											financeDetailss.get(financeDetailss.size() - 1), bFinaceVo))) {
										financeDetailss.add(bFinaceVo);
									}
									if (financeDetailss.size() == 0) {
										financeDetailss.add(bFinaceVo);

									}

								}

							}
							if (serviceEnum.equals(ServiceEnum.DATAENTRY)
									|| serviceEnum.equals(ServiceEnum.ISSUEOFNOC)) {

								if (regServiceDTO.getnOCDetails() != null && nocListSize == 0) {
									parameters.put("noctooffice",
											(regServiceDTO.getnOCDetails().getRtaOffice() == null) ? ""
													: regServiceDTO.getnOCDetails().getRtaOffice());
									parameters.put("nocfromoffice",
											(regServiceDTO.getOfficeDetails() == null
													|| regServiceDTO.getOfficeDetails().getOfficeName() == null) ? ""
															: regServiceDTO.getOfficeDetails().getOfficeName()
																	.toUpperCase());
									parameters.put("nocissueDate", (regServiceDTO.getCreatedDate() == null) ? ""
											: regServiceDTO.getCreatedDate().format(formatter));
									nocListSize++;

								} else {
									break;
								}

							}

							if (serviceEnum.equals(ServiceEnum.REASSIGNMENT)) {
								if (regServiceDTO.getServiceIds() != null
										&& regServiceDTO.getServiceIds().contains(ServiceEnum.REASSIGNMENT.getId())) {
									parameters.put("catogary", "REASSIGNED");
									if (regServiceDTO.getPrNo() != null
											&& regServiceDTO.getRegistrationDetails() != null
											&& regServiceDTO.getRegistrationDetails().getPrNo() != null) {
										if (regServiceDTO.getRegistrationDetails() != null
												&& regServiceDTO.getRegistrationDetails().getPrNo() != null
												&& regServiceDTO.getPrNo()
														.equals(regServiceDTO.getRegistrationDetails().getPrNo())) {
											parameters.put("old_pr", replaceDefaults(regServiceDTO.getPrNo()));
										} else if (regServiceDTO.getRegistrationDetails().getOldPrNo() != null) {
											parameters.put("old_pr", replaceDefaults(
													regServiceDTO.getRegistrationDetails().getOldPrNo()));
										} else if (regServiceDTO.getRegistrationDetails() != null
												&& regServiceDTO.getRegistrationDetails().getPrNo() != null) {
											parameters.put("old_pr",
													replaceDefaults(regServiceDTO.getRegistrationDetails().getPrNo()));
										} 
									}else if (regServiceDTO.getPrNo() != null) {
										parameters.put("old_pr", replaceDefaults(regServiceDTO.getPrNo()));
									}else {
										parameters.put("old_pr", replaceDefaults(StringUtils.EMPTY));
									}
								}
							}
							// thieft Details and objection details added.

							if (serviceEnum.equals(ServiceEnum.THEFTINTIMATION)
									|| serviceEnum.equals(ServiceEnum.THEFTREVOCATION)
									|| serviceEnum.equals(ServiceEnum.OBJECTION)
									|| serviceEnum.equals(ServiceEnum.REVOCATION)) {
								bregTheift = new BregisterTheiftVO();
								if (regServiceDTO.getTheftDetails() == null) {
									throw new BadRequestException("OBJECTION or THEFT INTIMATION Details missing...!"
											+ regServiceDTO.getApplicationNo());
								}
								if (theftDetailsList.size() >= 1) {
									BregisterTheiftVO bregTheiftRev = theftDetailsList.get(theftDetailsList.size() - 1);
									if (regServiceDTO.getTheftDetailsLog() != null) {
										bregTheift.setIntiObjDate(
												(regServiceDTO.getCreatedDate() == null ? StringUtils.EMPTY
														: regServiceDTO.getCreatedDate().format(formatter)));
										bregTheift.setObjRemarks(
												(regServiceDTO.getTheftDetailsLog().get(0).getRemarks() == null
														? StringUtils.EMPTY
														: regServiceDTO.getTheftDetailsLog().get(0).getRemarks()));
										bregTheift.setRevocationDate(
												(regServiceDTO.getlUpdate() == null ? StringUtils.EMPTY
														: regServiceDTO.getlUpdate().format(formatter)));
										bregTheift.setRevRemarks((regServiceDTO.getTheftDetails() != null
												&& regServiceDTO.getTheftDetails().getRemarks() != null
														? regServiceDTO.getTheftDetails().getRemarks()
														: StringUtils.EMPTY));
									} else {

										if (regServiceDTO.getServiceIds().contains(ServiceEnum.OBJECTION.getId())
												|| regServiceDTO.getServiceIds()
														.contains(ServiceEnum.THEFTINTIMATION.getId())) {
											bregTheift.setIntiObjDate((regServiceDTO.getlUpdate() == null
													? regServiceDTO.getCreatedDate().format(formatter)
													: regServiceDTO.getlUpdate().format(formatter)));
											bregTheift.setObjRemarks((regServiceDTO.getTheftDetails() != null
													&& regServiceDTO.getTheftDetails().getRemarks() != null
															? regServiceDTO.getTheftDetails().getRemarks()
															: StringUtils.EMPTY));
											bregTheift.setRevocationDate(
													(bregTheiftRev.getRevocationDate() == null ? StringUtils.EMPTY
															: bregTheiftRev.getRevocationDate()));
											bregTheift.setRevRemarks(
													(bregTheiftRev.getRevRemarks() == null ? StringUtils.EMPTY
															: bregTheiftRev.getRevRemarks()));
										}
										if (regServiceDTO.getServiceIds().contains(ServiceEnum.THEFTINTIMATION.getId())
												|| regServiceDTO.getServiceIds()
														.contains(ServiceEnum.THEFTREVOCATION.getId())) {
											bregTheift.setServiceStatus(serviceEnum.toString());
										} else {
											bregTheift.setServiceStatus(regServiceDTO.getTheftDetails().getStatus());
										}

										if (regServiceDTO.getServiceIds().contains(ServiceEnum.REVOCATION.getId())
												|| regServiceDTO.getServiceIds()
														.contains(ServiceEnum.THEFTREVOCATION.getId())) {
											bregTheift.setRevocationDate((regServiceDTO.getlUpdate() == null
													? regServiceDTO.getCreatedDate().format(formatter)
													: regServiceDTO.getlUpdate().format(formatter)));
											bregTheift.setRevRemarks((regServiceDTO.getTheftDetails() != null
													&& regServiceDTO.getTheftDetails().getRemarks() != null
															? regServiceDTO.getTheftDetails().getRemarks()
															: StringUtils.EMPTY));
											bregTheift.setIntiObjDate(
													(bregTheiftRev.getIntiObjDate() == null ? StringUtils.EMPTY
															: bregTheiftRev.getIntiObjDate()));
											bregTheift.setRevRemarks(
													(bregTheiftRev.getRevRemarks() == null ? StringUtils.EMPTY
															: bregTheiftRev.getRevRemarks()));
										}
										theftDetailsList.remove(theftDetailsList.size() - 1);
									}
									theftDetailsList.add(bregTheift);

								} else {
									if (regServiceDTO.getTheftDetailsLog() != null) {
										bregTheift.setIntiObjDate(
												(regServiceDTO.getCreatedDate() == null ? StringUtils.EMPTY
														: regServiceDTO.getCreatedDate().format(formatter)));
										bregTheift.setObjRemarks(
												(regServiceDTO.getTheftDetailsLog().get(0).getRemarks() == null
														? StringUtils.EMPTY
														: regServiceDTO.getTheftDetailsLog().get(0).getRemarks()));
										bregTheift.setRevocationDate(
												(regServiceDTO.getlUpdate() == null ? StringUtils.EMPTY
														: regServiceDTO.getlUpdate().format(formatter)));
										bregTheift.setRevRemarks((regServiceDTO.getTheftDetails() != null
												&& regServiceDTO.getTheftDetails().getRemarks() != null
														? regServiceDTO.getTheftDetails().getRemarks()
														: StringUtils.EMPTY));
									} else {
										if (regServiceDTO.getServiceIds().contains(ServiceEnum.OBJECTION.getId())
												|| regServiceDTO.getServiceIds()
														.contains(ServiceEnum.THEFTINTIMATION.getId())) {
											bregTheift.setIntiObjDate((regServiceDTO.getlUpdate() == null
													? regServiceDTO.getCreatedDate().format(formatter)
													: regServiceDTO.getlUpdate().format(formatter)));
											bregTheift.setObjRemarks((regServiceDTO.getTheftDetails() != null
													&& regServiceDTO.getTheftDetails().getRemarks() != null
															? regServiceDTO.getTheftDetails().getRemarks()
															: StringUtils.EMPTY));
											bregTheift.setRevocationDate(StringUtils.EMPTY);
											bregTheift.setRevRemarks(StringUtils.EMPTY);
										}
										if (regServiceDTO.getServiceIds().contains(ServiceEnum.THEFTINTIMATION.getId())
												|| regServiceDTO.getServiceIds()
														.contains(ServiceEnum.THEFTREVOCATION.getId())) {
											bregTheift.setServiceStatus(serviceEnum.toString());
										} else {
											bregTheift.setServiceStatus(regServiceDTO.getTheftDetails().getStatus());
										}

										if (regServiceDTO.getServiceIds().contains(ServiceEnum.REVOCATION.getId())
												|| regServiceDTO.getServiceIds()
														.contains(ServiceEnum.THEFTREVOCATION.getId())) {
											bregTheift.setRevocationDate((regServiceDTO.getlUpdate() == null
													? regServiceDTO.getCreatedDate().format(formatter)
													: regServiceDTO.getlUpdate().format(formatter)));
											bregTheift.setRevRemarks((regServiceDTO.getTheftDetails() != null
													&& regServiceDTO.getTheftDetails().getRemarks() != null
															? regServiceDTO.getTheftDetails().getRemarks()
															: StringUtils.EMPTY));
											bregTheift.setIntiObjDate(StringUtils.EMPTY);
											bregTheift.setObjRemarks(StringUtils.EMPTY);

										}

									}
									theftDetailsList.add(bregTheift);
								}
							}

						}
					}
				}
			}
			if (!CollectionUtils.isEmpty(listOfServiceIdsnotexist) && listOfServiceIdsnotexist.size() != 0) {
				for (RegServiceDTO regServiceDTO : listOfServiceIdsnotexist) {
					bsServiceVo = new BregisterServiceVo();
					bsServiceVo.setServiceName((regServiceDTO.getServiceType() == null ? StringUtils.EMPTY
							: regServiceDTO.getServiceType().toString()));
					bsServiceVo.setCreatedDate(
							(regServiceDTO.getlUpdate() == null) ? regServiceDTO.getCreatedDate().format(formatter)
									: regServiceDTO.getlUpdate().format(formatter));
					bsServiceVo.setApplicationNo(regServiceDTO.getApplicationNo());
					listOfBregVos2.add(bsServiceVo);

				}
			}
		}

		logger.info("...CC" + ownerDetailss.size());
		JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(ownerDetailss);
		parameters.put("renwelList", beanColDataSource);

		logger.info(".renwel List..BB" + financeDetailss.size());
		JRBeanCollectionDataSource beanColDataSource1 = new JRBeanCollectionDataSource(financeDetailss);
		parameters.put("renwelList1", beanColDataSource1);

		logger.info(".renwel List..aa" + listOfBregVos2.size());
		JRBeanCollectionDataSource beanColDataSource2 = new JRBeanCollectionDataSource(listOfBregVos2);
		parameters.put("renwelList2", beanColDataSource2);

		logger.info(".renwel List..aa" + theftDetailsList.size());
		JRBeanCollectionDataSource beanColDataSource3 = new JRBeanCollectionDataSource(theftDetailsList);
		parameters.put("theftdetails", beanColDataSource3);

		// vahan details

		parameters.put("makersDesc",
				replaceDefaults((registrationDetailsDTO.getVahanDetails() == null
						|| registrationDetailsDTO.getVahanDetails().getMakersDesc() == null) ? StringUtils.EMPTY
								: registrationDetailsDTO.getVahanDetails().getMakersDesc().toUpperCase()));
		parameters.put("bodyType",
				replaceDefaults((registrationDetailsDTO.getVahanDetails() == null
						|| registrationDetailsDTO.getVahanDetails().getBodyTypeDesc() == null) ? ""
								: registrationDetailsDTO.getVahanDetails().getBodyTypeDesc().toUpperCase()));

		if ((registrationDetailsDTO.getVahanDetails() != null
				&& registrationDetailsDTO.getVahanDetails().getManufacturedMonthYear() != null
				&& registrationDetailsDTO.getVahanDetails().getManufacturedMonthYear().length() < 6)
				&& (registrationDetailsDTO.getSource() != null
						&& (registrationDetailsDTO.getSource().equalsIgnoreCase(SourceEnum.CFST0.getDesc())
								|| registrationDetailsDTO.getSource().equalsIgnoreCase(SourceEnum.CFST1.getDesc())))) {
			String manufacturdate = registrationDetailsDTO.getVahanDetails().getManufacturedMonthYear();
			char[] ch = manufacturdate.toCharArray();
			for (int i = 0; i < ch.length; i++) {
				if (i == 2) {
					manDate += "/";
				}
				manDate += String.valueOf(ch[i]);
			}

			parameters.put("manufactureDate", replaceDefaults(manDate == null ? StringUtils.EMPTY : manDate));

		} else {
			if (registrationDetailsDTO.getVahanDetails() != null
					&& registrationDetailsDTO.getVahanDetails().getManufacturedMonthYear() != null) {
				String manufacturdate = registrationDetailsDTO.getVahanDetails().getManufacturedMonthYear();
				char[] ch = manufacturdate.toCharArray();
				for (int i = 0; i < ch.length; i++) {
					if (i == 2) {
						manDate += "/";
					}
					manDate += String.valueOf(ch[i]);
				}

				parameters.put("manufactureDate", replaceDefaults(manDate == null ? StringUtils.EMPTY : manDate));

			}

		}

		parameters.put("cylinders",
				replaceDefaults(registrationDetailsDTO.getVahanDetails() == null
						|| registrationDetailsDTO.getVahanDetails().getNoCyl() == null ? ""
								: registrationDetailsDTO.getVahanDetails().getNoCyl()));
		parameters.put("horsePower",
				replaceDefaults(registrationDetailsDTO.getVahanDetails() == null
						|| registrationDetailsDTO.getVahanDetails().getEnginePower() == null ? ""
								: registrationDetailsDTO.getVahanDetails().getEnginePower() + "0"));

		parameters.put("cubicCapacity",
				replaceDefaults(registrationDetailsDTO.getVahanDetails() == null
						|| registrationDetailsDTO.getVahanDetails().getCubicCapacity() == null ? ""
								: registrationDetailsDTO.getVahanDetails().getCubicCapacity() + "0"));
		parameters.put("wheel",
				replaceDefaults((registrationDetailsDTO.getVahanDetails() == null
						|| registrationDetailsDTO.getVahanDetails().getWheelbase() == null) ? ""
								: registrationDetailsDTO.getVahanDetails().getWheelbase()));
		parameters.put("chassisNumber",
				replaceDefaults((registrationDetailsDTO.getVahanDetails() == null
						|| registrationDetailsDTO.getVahanDetails().getChassisNumber() == null) ? StringUtils.EMPTY
								: registrationDetailsDTO.getVahanDetails().getChassisNumber()));
		parameters.put("engineNumber",
				replaceDefaults((registrationDetailsDTO.getVahanDetails() == null
						|| registrationDetailsDTO.getVahanDetails().getEngineNumber() == null) ? StringUtils.EMPTY
								: registrationDetailsDTO.getVahanDetails().getEngineNumber()));
		parameters.put("seating",
				replaceDefaults((registrationDetailsDTO.getVahanDetails() == null
						|| registrationDetailsDTO.getVahanDetails().getSeatingCapacity() == null) ? ""
								: registrationDetailsDTO.getVahanDetails().getSeatingCapacity()));
		parameters.put("fuel",
				replaceDefaults((registrationDetailsDTO.getVahanDetails() == null
						|| registrationDetailsDTO.getVahanDetails().getFuelDesc() == null) ? ""
								: registrationDetailsDTO.getVahanDetails().getFuelDesc().toUpperCase()));
		parameters.put("weight",
				replaceDefaults((registrationDetailsDTO.getVahanDetails() == null
						|| registrationDetailsDTO.getVahanDetails().getUnladenWeight() == null) ? StringUtils.EMPTY
								: registrationDetailsDTO.getVahanDetails().getUnladenWeight())
						+ " Kgs");
		parameters.put("color",
				replaceDefaults((registrationDetailsDTO.getVahanDetails() == null
						|| registrationDetailsDTO.getVahanDetails().getColor() == null) ? StringUtils.EMPTY
								: registrationDetailsDTO.getVahanDetails().getColor().toUpperCase()));
		parameters.put("makers",
				replaceDefaults((registrationDetailsDTO.getVahanDetails() == null
						|| registrationDetailsDTO.getVahanDetails().getMakersModel() == null) ? StringUtils.EMPTY
								: registrationDetailsDTO.getVahanDetails().getMakersModel().toUpperCase()));
		parameters.put("dealerName",
				replaceDefaults((registrationDetailsDTO.getDealerDetails() == null
						|| registrationDetailsDTO.getDealerDetails().getDealerId() == null) ? StringUtils.EMPTY
								: registrationDetailsDTO.getDealerDetails().getDealerId()));
		MasterCovDTO masterCovDTO = masterCovDAO.findByCovcode(registrationDetailsDTO.getClassOfVehicle());
		parameters.put("cov", StringUtils.EMPTY);
		if (masterCovDTO != null) {
			parameters.put("cov", replaceDefaults(masterCovDTO.getCovdescription() == null ? StringUtils.EMPTY
					: masterCovDTO.getCovdescription().toUpperCase()));
		}
		parameters.put("grossweight",
				replaceDefaults((registrationDetailsDTO.getVahanDetails() == null
						|| registrationDetailsDTO.getVahanDetails().getGvw() == null) ? StringUtils.EMPTY
								: registrationDetailsDTO.getVahanDetails().getGvw())
						+ " Kgs");
		parameters.put("fa",
				replaceDefaults((registrationDetailsDTO.getVahanDetails() == null
						|| registrationDetailsDTO.getVahanDetails().getFrontAxleDesc() == null) ? ""
								: registrationDetailsDTO.getVahanDetails().getFrontAxleDesc()));
		parameters.put("ra",
				replaceDefaults((registrationDetailsDTO.getVahanDetails() == null
						|| registrationDetailsDTO.getVahanDetails().getRearAxleDesc() == null) ? ""
								: registrationDetailsDTO.getVahanDetails().getRearAxleDesc()));
		parameters.put("aox",
				replaceDefaults((registrationDetailsDTO.getVahanDetails() == null
						|| registrationDetailsDTO.getVahanDetails().getO1AxleDesc() == null) ? ""
								: registrationDetailsDTO.getVahanDetails().getO1AxleDesc()));
		parameters.put("tandaxle",
				replaceDefaults((registrationDetailsDTO.getVahanDetails() == null
						|| registrationDetailsDTO.getVahanDetails().getTandemAxelDescp() == null) ? ""
								: registrationDetailsDTO.getVahanDetails().getTandemAxelDescp()));
		parameters.put("regweight",
				replaceDefaults((registrationDetailsDTO.getVahanDetails() == null
						|| registrationDetailsDTO.getVahanDetails().getFrontAxleWeight() == null) ? StringUtils.EMPTY
								: registrationDetailsDTO.getVahanDetails().getFrontAxleWeight())
						+ " Kgs");
		parameters.put("rearAxle",
				replaceDefaults((registrationDetailsDTO.getVahanDetails() == null
						|| registrationDetailsDTO.getVahanDetails().getRearAxleDesc() == null) ? StringUtils.EMPTY
								: registrationDetailsDTO.getVahanDetails().getRearAxleWeight())
						+ " Kgs");
		parameters.put("otherAxle",
				replaceDefaults((registrationDetailsDTO.getVahanDetails() == null
						|| registrationDetailsDTO.getVahanDetails().getO1AxleWeight() == null) ? StringUtils.EMPTY
								: registrationDetailsDTO.getVahanDetails().getO1AxleWeight())
						+ " Kgs");
		parameters.put("tanAxle",
				replaceDefaults((registrationDetailsDTO.getVahanDetails() == null
						|| registrationDetailsDTO.getVahanDetails().getTandemAxelWeight() == null) ? StringUtils.EMPTY
								: registrationDetailsDTO.getVahanDetails().getTandemAxelWeight())
						+ " Kgs");
		// insurance Details
		Map<String, Object> insuranceDetails = new HashMap<>();
		parameters.put("icompany",
				replaceDefaults((registrationDetailsDTO.getInsuranceDetails() == null
						|| registrationDetailsDTO.getInsuranceDetails().getCompany() == null) ? StringUtils.EMPTY
								: registrationDetailsDTO.getInsuranceDetails().getCompany()));
		parameters.put("policyNo",
				replaceDefaults((registrationDetailsDTO.getInsuranceDetails() == null
						|| registrationDetailsDTO.getInsuranceDetails().getPolicyNumber() == null) ? StringUtils.EMPTY
								: registrationDetailsDTO.getInsuranceDetails().getPolicyNumber()));
		parameters.put("insvalid",
				replaceDefaults((registrationDetailsDTO.getInsuranceDetails() == null
						|| registrationDetailsDTO.getInsuranceDetails().getValidTill() == null) ? StringUtils.EMPTY
								: registrationDetailsDTO.getInsuranceDetails().getValidTill().format(formatter)));
		parameters.put("chassisNo1",
				replaceDefaults((registrationDetailsDTO.getVahanDetails() == null
						|| registrationDetailsDTO.getVahanDetails().getChassisNumber() == null) ? StringUtils.EMPTY
								: registrationDetailsDTO.getVahanDetails().getChassisNumber()));
		parameters.put("old_pr", replaceDefaults((registrationDetailsDTO.getOldPrNo() == null) ? StringUtils.EMPTY
				: registrationDetailsDTO.getOldPrNo()));
		// tax Details
		parameters.put("tax", StringUtils.EMPTY);
		parameters.put("taxvalid", StringUtils.EMPTY);
		parameters.put("transaction_no", StringUtils.EMPTY);
		listOfPaidTax = taxDetailsDAO.findFirst10ByApplicationNoAndTrNoOrderByCreatedDateDesc(
				registrationDetailsDTO.getApplicationNo(), registrationDetailsDTO.getTrNo());
		if (listOfPaidTax.isEmpty()) {
			listOfPaidTax = taxDetailsDAO
					.findFirst10ByApplicationNoOrderByCreatedDateDesc(registrationDetailsDTO.getApplicationNo());
		}
		if (listOfPaidTax != null && !(listOfPaidTax.isEmpty())) {
			registrationService.updatePaidDateAsCreatedDate(listOfPaidTax);
			listOfPaidTax.sort((p1, p2) -> p2.getCreatedDate().compareTo(p1.getCreatedDate()));
			TaxDetailsDTO taxDetailsDto = listOfPaidTax.stream().findFirst().get();
			parameters.put("tax",
					replaceDefaults((taxDetailsDto == null || taxDetailsDto.getTaxAmount() == null) ? StringUtils.EMPTY
							: taxDetailsDto.getTaxAmount()));
			parameters.put("taxvalid",
					replaceDefaults(
							(taxDetailsDto == null || taxDetailsDto.getTaxPeriodEnd() == null) ? StringUtils.EMPTY
									: taxDetailsDto.getTaxPeriodEnd().format(formatter)));
			parameters.put("transaction_no",
					replaceDefaults(
							(taxDetailsDto == null || taxDetailsDto.getTransactionNo() == null) ? StringUtils.EMPTY
									: taxDetailsDto.getTransactionNo()));
		}
		parameters.put("taxDetails", tax);
		parameters.put("insuranceDetails", insuranceDetails);
		parameters.put("rlw1", StringUtils.EMPTY);
		parameters.put("chassisNo1", StringUtils.EMPTY);
		// trailer details
		if (registrationDetailsDTO.getClassOfVehicle() != null
				&& !(registrationDetailsDTO.getClassOfVehicle().isEmpty())) {
			if (registrationDetailsDTO.getClassOfVehicle().equalsIgnoreCase(ClassOfVehicleEnum.ARVT.getCovCode())) {
				trailerChassisDetailsDTOList = registrationDetailsDTO.getVahanDetails().getTrailerChassisDetailsDTO();
			}
			if (trailerChassisDetailsDTOList != null) {
				if (trailerChassisDetailsDTOList.size() > 0) {
					parameters.put("rlw1",
							replaceDefaults((trailerChassisDetailsDTOList.get(0).getGtw() == null) ? StringUtils.EMPTY
									: trailerChassisDetailsDTOList.get(0).getGtw()));
					parameters.put("chassisNo1",
							replaceDefaults(
									(trailerChassisDetailsDTOList.get(0).getChassisNo() == null) ? StringUtils.EMPTY
											: trailerChassisDetailsDTOList.get(0).getChassisNo()));
				}
			}
		}
		// office details
		parameters.put("officeName", "");
		if (registrationDetailsDTO.getOfficeDetails() != null) {
			parameters.put("adate",
					replaceDefaults(
							(registrationDetailsDTO.getOfficeDetails().getOfficeName() == null) ? StringUtils.EMPTY
									: registrationDetailsDTO.getOfficeDetails().getOfficeName()));
		}
		if (!isForView) {
			parameters.put("officer", " ");
			parameters.put("AP_LOGO", getLogo(ReportFiles.APLOGO));
			parameters.put("AP_LOGO", getLogo(ReportFiles.APLOGO));
			parameters.put("otsilogo", getLogo(ReportFiles.OTSILOGO));
			parameters.put("WATER_MARK", getLogo(ReportFiles.WATER_MARK));
			parameters.put("DIGITAL_SIGN", getLogo(ReportFiles.DIGITAL_SIGN));
			parameters.put("IMAGE_SCAN", qrCode);
		}
		return parameters;
	}
	private List<RegServiceDTO> getListRegServicesDetails(String inputNumber) {

		List<RegServiceDTO> listOfRegServices = null;
		List<RegServiceDTO> listOfRegServicesByChasis = null;
		List<RegServiceDTO> listOfRegServicesByPrNo = null;
		Set<RegServiceDTO> setRegServiceDTOs = null;
		RegistrationDetailsDTO registrationDetailsDTO = registrationDetailDAO.findByPrNo(inputNumber.toUpperCase()).get();

		listOfRegServicesByChasis = regServiceDAO
				.findByRegistrationDetailsVahanDetailsChassisNumberAndApplicationStatusOrderByCreatedDateDesc(
						registrationDetailsDTO.getVahanDetails().getChassisNumber(), StatusRegistration.APPROVED);

		listOfRegServicesByPrNo = regServiceDAO.findByPrNoAndApplicationStatusOrderByCreatedDateDesc(inputNumber.toUpperCase(),
				StatusRegistration.APPROVED);

		if (listOfRegServicesByChasis == null && listOfRegServicesByPrNo == null) {
			throw new BadRequestException("No records found in Registration services..!");
		}

		if (listOfRegServicesByChasis == null) {
			listOfRegServices = listOfRegServicesByPrNo;
		} else {
			setRegServiceDTOs = listOfRegServicesByChasis.stream().collect(Collectors.toSet());
			setRegServiceDTOs.addAll(listOfRegServicesByPrNo);
			listOfRegServices = setRegServiceDTOs.stream().collect(Collectors.toList());
		}

		return listOfRegServices;

	}

	private boolean doCompareBregisterOwnerVo(BregisterOwnerVo bregisterVo1, BregisterOwnerVo bregisterVo2) {
		int returnValue = Comparator.comparing(BregisterOwnerVo::getRefnumber)
				.thenComparing(BregisterOwnerVo::getToDate).thenComparing(BregisterOwnerVo::getType)
				.thenComparing(BregisterOwnerVo::getAddress).thenComparing(BregisterOwnerVo::getContactNum)
				.thenComparing(BregisterOwnerVo::getDisplayName).thenComparing(BregisterOwnerVo::getRepName)
				.thenComparing(BregisterOwnerVo::getFirstName).compare(bregisterVo1, bregisterVo2);
		if (returnValue != 0) {
			return false;
		}
		return true;
	}

	private boolean doCompareBregisterFinacierVo(BregisterFinaceVo bregisterFinaceVo,
			BregisterFinaceVo bregisterFinaceVo2) {
		int returnValue = Comparator.comparing(BregisterFinaceVo::getFfromDate)
				.thenComparing(BregisterFinaceVo::getFname).thenComparing(BregisterFinaceVo::getFaddress)
				.thenComparing(BregisterFinaceVo::getFcity).compare(bregisterFinaceVo, bregisterFinaceVo2);
		if (returnValue != 0) {
			return false;
		}
		return true;

	}

	private boolean doCompareBregisterOwnerVoISNull(BregisterOwnerVo bregisterVo) {

		if (bregisterVo.getFirstName() == null && bregisterVo.getToDate() == null && bregisterVo.getAddress() == null
				&& bregisterVo.getType() == null) {
			return false;
		} else {
			return true;
		}

	}

	private RegistrationDetailsDTO getCurrentUser(String inputNumber) {

		RegistrationDetailsDTO registrationDetails = null;
		Optional<RegistrationDetailsDTO> regOptional = registrationDetailDAO.findByPrNoOrderByLUpdateDesc(inputNumber.toUpperCase());
		if (regOptional.isPresent()) {
			registrationDetails = regOptional.get();
		} else {
			throw new BadRequestException("No record found...!");
		}

		return registrationDetails;
	}

	public Map<String, Object> getOtherStateDetailsForCitizen(String applicationNo) {

		RegServiceDTO regServiceDTO = null;
		OfficeDTO officeDTO = null;
		Optional<RegServiceDTO> regServiceDTOOptional = regServiceDAO.findByApplicationNo(applicationNo);
		if (regServiceDTOOptional.isPresent()) {
			regServiceDTO = regServiceDTOOptional.get();
		}
		String qrCode = StringUtils.EMPTY;
		try {
			qrCode = qRCodeService
					.sendPDF(getRegistrationQRCodeForOtherstateForCitizen(regServiceDTO.getApplicationNo()));
			if (qrCode == null)
				qrCode = StringUtils.EMPTY;
		} catch (Exception e) {
			logger.error(" Exception :[] ", e);
		}
		Map<String, Object> parameters = new HashMap<>();
		parameters.put("AP_LOGO", getLogo(ReportFiles.APLOGO));
		parameters.put("otsilogo", getLogo(ReportFiles.OTSILOGO));
		parameters.put("FINC_DATE", LocalDateTime.now().format(formatter));
		parameters.put("WATER_MARK", getLogo(ReportFiles.WATER_MARK));
		parameters.put("DIGITAL_SIGN", getLogo(ReportFiles.DIGITAL_SIGN));
		parameters.put("date", LocalDate.now().toString());
		// serviceTYPE
		/*
		 * parameters.put("SERVICETYPE", ""); List<ServiceEnum> serviceIds =
		 * regServiceDTO.getServiceIds().stream() .map(id ->
		 * ServiceEnum.getServiceEnumById(id)).collect(Collectors.toList()); for
		 * (ServiceEnum serviceEnum : serviceIds) { if (serviceEnum != null) {
		 * parameters.put("SERVICETYPE", serviceEnum.getDesc().toString().toUpperCase()
		 * + " CONFIRMATION"); } }
		 */

		// RTA ADDRESS
		String rtaAddress = StringUtils.EMPTY;
		parameters.put("RTA_ADDR", StringUtils.EMPTY);
		if (regServiceDTO.getRegistrationDetails().getOfficeDetails() != null
				&& regServiceDTO.getRegistrationDetails().getOfficeDetails().getOfficeCode() != null) {
			Optional<OfficeDTO> OfficeDtoOptional = officeDAO
					.findByOfficeCode(regServiceDTO.getRegistrationDetails().getOfficeDetails().getOfficeCode());
			parameters.put("RTA_ADDR", StringUtils.EMPTY);
			parameters.put("office_name", StringUtils.EMPTY);
			if (OfficeDtoOptional != null) {
				officeDTO = OfficeDtoOptional.get();
				rtaAddress = "Registering Authority" + "\n"
						+ (officeDTO.getOfficeName() == null ? StringUtils.EMPTY : officeDTO.getOfficeName()) + ","
						+ "\n"
						+ (officeDTO.getOfficeAddress1() == null ? StringUtils.EMPTY : officeDTO.getOfficeAddress1())
						+ "," + "\n"
						+ (officeDTO.getOfficeAddress2() == null ? StringUtils.EMPTY : officeDTO.getOfficeAddress2())
						+ "," + "\n"
						+ (officeDTO.getOfficeCity() == null ? StringUtils.EMPTY : officeDTO.getOfficeCity())
						+ "Andhra Pradesh" + ".";
				parameters.put("RTA_ADDR", rtaAddress);
				parameters.put("office_name",
						officeDTO.getOfficeName() == null ? StringUtils.EMPTY : officeDTO.getOfficeName());
			}
		}
		// subject reference
		String covCode = regServiceDTO.getRegistrationDetails().getClassOfVehicle();
		MasterCovDTO masterCovDTO = masterCovDAO.findByCovcode(covCode);
		if (masterCovDTO != null) {
			parameters.put("COV", replaceDefaults(masterCovDTO.getCovdescription()).isEmpty() ? StringUtils.EMPTY
					: masterCovDTO.getCovdescription());
		}
		String dataEntryDynamic1 = "Submission of - Application No. "
				+ ((regServiceDTO.getApplicationNo() == null
						|| regServiceDTO.getRegistrationDetails().getApplicationNo().isEmpty()) ? "________"
								: regServiceDTO.getRegistrationDetails().getApplicationNo())
				+ " "
				+ (masterCovDTO.getCovdescription() == null ? StringUtils.EMPTY : masterCovDTO.getCovdescription())
				+ " for confirmation and genuineness of NOC.";
		parameters.put("sub_ref", dataEntryDynamic1);
		parameters.put("main_content", "");
		String mainContent = StringUtils.EMPTY;

		mainContent = "We acknowledge this receipt for further communication until we get confirmation from registering Authority for your Application genuineness of the details submitted. If we find incorrect your  "
				+ "requisition will be cancelled and money will not be refunded.";
		parameters.put("main_content", mainContent);
		parameters.put("applicant_name",
				replaceDefaults(regServiceDTO.getRegistrationDetails().getApplicantDetails().getDisplayName()).isEmpty()
						? StringUtils.EMPTY
						: regServiceDTO.getRegistrationDetails().getApplicantDetails().getDisplayName());
		parameters.put("MAKERS_NAME",
				replaceDefaults(regServiceDTO.getRegistrationDetails().getVahanDetails().getMakersModel()).isEmpty()
						? StringUtils.EMPTY
						: regServiceDTO.getRegistrationDetails().getVahanDetails().getMakersModel());
		parameters.put("MAKERS_CLASS",
				replaceDefaults(regServiceDTO.getRegistrationDetails().getVahanDetails().getMakersDesc()).isEmpty()
						? StringUtils.EMPTY
						: regServiceDTO.getRegistrationDetails().getVahanDetails().getMakersDesc());

		parameters.put("CHASSIS_NUM",
				replaceDefaults(regServiceDTO.getRegistrationDetails().getVahanDetails().getChassisNumber()).isEmpty()
						? StringUtils.EMPTY
						: regServiceDTO.getRegistrationDetails().getVahanDetails().getChassisNumber());

		parameters.put("ENGINE_NUM",
				replaceDefaults(regServiceDTO.getRegistrationDetails().getVahanDetails().getEngineNumber()).isEmpty()
						? StringUtils.EMPTY
						: regServiceDTO.getRegistrationDetails().getVahanDetails().getEngineNumber());

		parameters.put("NOC_date", StringUtils.EMPTY);
		if (regServiceDTO.getnOCDetails() != null) {
			parameters.put("NOC_date", (regServiceDTO.getnOCDetails().getIssueDate() == null ? StringUtils.EMPTY
					: regServiceDTO.getnOCDetails().getIssueDate().format(formatter)));
		}
		if (regServiceDTO.getRegistrationDetails().getPrNo() != null) {
			parameters.put("Veh_No", regServiceDTO.getRegistrationDetails().getPrNo() == null ? StringUtils.EMPTY
					: regServiceDTO.getRegistrationDetails().getPrNo());
		}
		parameters.put("QR_SCAN", qrCode);
		return parameters;
	}

	public Map<String, Object> getHptForm(String applicationNo) {
		String qrCode = StringUtils.EMPTY;
		try {
			qrCode = qRCodeService.sendPDF(getHptFormURL(applicationNo));
			if (qrCode == null)
				qrCode = StringUtils.EMPTY;
		} catch (Exception e) {
			logger.error(" Exception :[] ", e);
		}

		Map<String, Object> parameters = new HashMap<>();
		parameters.put("AP_LOGO", getLogo(ReportFiles.APLOGO));
		parameters.put("AP_LOGO", getLogo(ReportFiles.APLOGO));
		parameters.put("otsilogo", getLogo(ReportFiles.OTSILOGO));
		parameters.put("WATER_MARK", getLogo(ReportFiles.WATER_MARK));
		parameters.put("DIGITAL_SIGN", getLogo(ReportFiles.DIGITAL_SIGN));
		parameters.put("IMAGE_SCAN", qrCode);
		return parameters;
	}

	public Map<String, Object> getOtherStateDetailsForCrti(String applicationNo) {
		RegistrationDetailsDTO regDetails = null;
		RegistrationDetailsDTO regDetailsAssign = null;
		RegServiceDTO regService = null;
		Optional<RegistrationDetailsDTO> regOptional = registrationDetailDAO.findByApplicationNo(applicationNo);
		if (regOptional.isPresent()) {
			regDetails = regOptional.get();
			logger.info("Registration Details  found for applicatin No:[{}] from registration_detals Collection",
					applicationNo);
		} else {
			Optional<RegServiceDTO> regServiceOpt = regServiceDAO.findByApplicationNo(applicationNo);
			if (regServiceOpt.isPresent()) {
				regService = regServiceOpt.get();
				logger.info("RegistrationServices found for application: [{}]", applicationNo);
			} else {
				logger.error("No record found in Registraiton SErvices with applicaiton no:[{}]", applicationNo);
				throw new BadRequestException("Record not found");
			}
		}
		if (regService != null) {
			regDetailsAssign = regService.getRegistrationDetails();
		} else {
			regDetailsAssign = regDetails;
		}
		String qrCode = StringUtils.EMPTY;
		try {
			qrCode = qRCodeService.sendPDF(getHptFormURL(applicationNo));
			if (qrCode == null)
				qrCode = StringUtils.EMPTY;
		} catch (Exception e) {
			logger.error("Exception [{}]from qrCodeService for applicaiton No:[{}] ", e, applicationNo);
		}

		Map<String, Object> parameters = new HashMap<>();
		String otherStateDynamicText = StringUtils.EMPTY;
		if (regDetailsAssign != null && regDetailsAssign.getApplicantDetails() != null) {
			otherStateDynamicText = "Motor Vehicle No "
					+ (regDetailsAssign.getPrNo() == null ? StringUtils.EMPTY : regDetailsAssign.getPrNo())
					+ " registered by you to the name of "
					+ (regDetailsAssign.getApplicantDetails().getDisplayName() == null ? StringUtils.EMPTY
							: regDetailsAssign.getApplicantDetails().getDisplayName())
					+ " has with effect from the day of " + "02/04/2012" + " been transferred to the name of "
					+ "YOUSUF " + "MOHAMMAD" + " son of " + " KHADAR";
			parameters.put("dync_text", otherStateDynamicText);
		}
		parameters.put("office_name", (regDetailsAssign.getOfficeDetails().getOffice() == null ? StringUtils.EMPTY
				: regDetailsAssign.getOfficeDetails().getOffice()));
		parameters.put("AP_LOGO", getLogo(ReportFiles.APLOGO));
		parameters.put("AP_LOGO", getLogo(ReportFiles.APLOGO));
		parameters.put("otsilogo", getLogo(ReportFiles.OTSILOGO));
		parameters.put("WATER_MARK", getLogo(ReportFiles.WATER_MARK));
		parameters.put("DIGITAL_SIGN", getLogo(ReportFiles.DIGITAL_SIGN));
		parameters.put("IMAGE_SCAN", qrCode);

		return parameters;
	}

	public Map<String, Object> getRecommendLetterDetails(String id, String prNo) {
		RegistrationDetailsDTO registrationDetailsDTO = null;
		PermitDetailsDTO permitDetailsDTO = null;
		/*
		 * OfficeDTO officeDTO = null; Integer diffPermitLangenWeight = 0; Integer
		 * gcwTotal = 0; String routeDiff = null;
		 */
		Optional<PermitDetailsDTO> permitDetailOptional = permitDetailsDAO.findByIdAndPermitStatus(id,
				PermitsEnum.ACTIVE.getDescription());
		if (permitDetailOptional.isPresent()) {
			permitDetailsDTO = permitDetailOptional.get();
		} else {
			logger.error("Record Not found");
			throw new BadRequestException("Record Not found");
		}
		Optional<RegistrationDetailsDTO> registrationDetails = registrationDetailDAO
				.findByPrNo(permitDetailsDTO.getPrNo());
		if (registrationDetails.isPresent()) {
			registrationDetailsDTO = registrationDetails.get();
		}
		RegistrationDetailsDTO dto = null;
		if (permitDetailsDTO.getRdto() != null) {
			dto = permitDetailsDTO.getRdto();
		} else {
			dto = registrationDetailsDTO;
		}
		String qrCode = StringUtils.EMPTY;
		try {
			qrCode = qRCodeService.sendPDF(getRecommendedURL(id, prNo));
			if (qrCode == null)
				qrCode = StringUtils.EMPTY;
		} catch (Exception e) {
			logger.error(" Exception :[] ", e);
		}
		String PRESENT_ADDRESS = StringUtils.EMPTY;
		if (dto.getApplicantDetails().getPresentAddress() != null) {

			PRESENT_ADDRESS = replaceDefaults(
					dto.getApplicantDetails().getPresentAddress().getDoorNo() == null ? StringUtils.EMPTY
							: dto.getApplicantDetails().getPresentAddress().getDoorNo())
					+ " , "
					+ replaceDefaults(
							dto.getApplicantDetails().getPresentAddress().getStreetName() == null ? StringUtils.EMPTY
									: dto.getApplicantDetails().getPresentAddress().getStreetName().toUpperCase())
					+ " , "
					+ replaceDefaults((dto.getApplicantDetails().getPresentAddress() == null
							|| dto.getApplicantDetails().getPresentAddress().getTownOrCity() == null)
									? StringUtils.EMPTY
									: dto.getApplicantDetails().getPresentAddress().getTownOrCity().toUpperCase())
					+ " , "
					+ replaceDefaults((dto.getApplicantDetails().getPresentAddress().getVillage() == null
							|| dto.getApplicantDetails().getPresentAddress().getVillage().getVillageName() == null)
									? StringUtils.EMPTY
									: dto.getApplicantDetails().getPresentAddress().getVillage().getVillageName()
											.toUpperCase())
					+ " , "
					+ replaceDefaults(((dto.getApplicantDetails().getPresentAddress().getMandal() == null
							|| dto.getApplicantDetails().getPresentAddress().getMandal().getMandalName() == null)
									? ""
									: dto.getApplicantDetails().getPresentAddress().getMandal().getMandalName()
											.toUpperCase())
							+ " , "
							+ replaceDefaults(
									((dto.getApplicantDetails().getPresentAddress().getDistrict() == null
											|| dto.getApplicantDetails().getPresentAddress().getDistrict()
													.getDistrictName() == null)
															? ""
															: dto.getApplicantDetails().getPresentAddress()
																	.getDistrict().getDistrictName().toUpperCase()))
							+ " , "
							+ replaceDefaults(((dto.getApplicantDetails().getPresentAddress().getState() == null
									|| dto.getApplicantDetails().getPresentAddress().getState().getStateName() == null)
											? ""
											: dto.getApplicantDetails().getPresentAddress().getState().getStateName()
													.toUpperCase()))
							+ " , "
							+ replaceDefaults(
									(dto.getApplicantDetails().getPresentAddress().getPostOffice() == null ? ""
											: dto.getApplicantDetails().getPresentAddress().getPostOffice()
													.getPostOfficeCode())));

		}
		String dynamicData_1 = StringUtils.EMPTY;
		if (dto != null && permitDetailsDTO != null) {
			dynamicData_1 = " Motor Vehicles - "
					+ (dto.getClassOfVehicleDesc() == null ? StringUtils.EMPTY : dto.getClassOfVehicleDesc()) + " No. "
					+ (dto.getPrNo() == null ? StringUtils.EMPTY : dto.getPrNo()) + " "
					+ "Fresh Recommendation for issue of Counter Signature Permit in Resepect of "
					+ ((permitDetailsDTO.getRouteDetails() == null
							|| permitDetailsDTO.getRouteDetails().getState() == null) ? StringUtils.EMPTY
									: permitDetailsDTO.getRouteDetails().getState())
					+ " - Recommendation - Regarding.";
		}
		String dynamicData_2 = StringUtils.EMPTY;
		if (dto != null && permitDetailsDTO != null && dto.getApplicantDetails() != null) {
			dynamicData_2 = "Application Of Sri "
					+ (dto.getApplicantDetails().getFirstName() == null ? StringUtils.EMPTY
							: dto.getApplicantDetails().getFirstName())
					+ " "
					+ (dto.getApplicantDetails().getLastName() == null ? StringUtils.EMPTY
							: dto.getApplicantDetails().getLastName())
					+ " Dated " + (permitDetailsDTO.getCreatedDate() == null ? StringUtils.EMPTY
							: permitDetailsDTO.getCreatedDate().format(formatter));
		}
		String dynamicData_3 = StringUtils.EMPTY;
		if (dto != null && permitDetailsDTO != null) {
			dynamicData_3 = " I, Recommend the "
					+ (dto.getClassOfVehicleDesc() == null ? StringUtils.EMPTY : dto.getClassOfVehicleDesc()) + " No. "
					+ (dto.getPrNo() == null ? StringUtils.EMPTY : dto.getPrNo())
					+ " for grant of Counter Signature Permit to Ply in the state of "
					+ ((permitDetailsDTO.getRouteDetails() == null
							|| permitDetailsDTO.getRouteDetails().getState() == null) ? StringUtils.EMPTY
									: permitDetailsDTO.getRouteDetails().getState())
					+ " in any lapsed vacancies available which " + "stands in the name of Sri"
					+ ((dto.getApplicantDetails() == null || dto.getApplicantDetails().getFirstName() == null)
							? StringUtils.EMPTY
							: dto.getApplicantDetails().getFirstName())
					+ " , "
					+ ((dto.getApplicantDetails() == null || dto.getApplicantDetails().getLastName() == null)
							? StringUtils.EMPTY
							: dto.getApplicantDetails().getLastName())
					+ " " + PRESENT_ADDRESS;
		}

		String dynamicData_4 = StringUtils.EMPTY;
		if (dto != null && permitDetailsDTO != null) {
			dynamicData_4 = "The Primary Permit of the vehicle is valid up to "
					+ ((permitDetailsDTO.getPermitValidityDetails() == null
							|| permitDetailsDTO.getPermitValidityDetails().getPermitValidTo() == null)
									? StringUtils.EMPTY
									: permitDetailsDTO.getPermitValidityDetails().getPermitValidTo().format(formatter));
		}
		String dynamicData_5 = StringUtils.EMPTY;
		if (dto != null && permitDetailsDTO != null) {
			dynamicData_5 = "Copy to Sri "
					+ ((dto.getApplicantDetails().getFirstName() == null) ? StringUtils.EMPTY
							: dto.getApplicantDetails().getFirstName())
					+ " , "
					+ ((dto.getApplicantDetails().getLastName() == null) ? StringUtils.EMPTY
							: dto.getApplicantDetails().getLastName())
					+ " " + PRESENT_ADDRESS + " with an advice to approach the"
					+ " Secretary, State Trasport Authority "
					+ ((permitDetailsDTO.getRouteDetails() == null
							|| permitDetailsDTO.getRouteDetails().getState() == null) ? StringUtils.EMPTY
									: permitDetailsDTO.getRouteDetails().getState())
					+ " State with all the records within 30 days from the date "
					+ " of this letter. No application for grant of extension of time will be entertained.";
		}
		Map<String, Object> parameters = new HashMap<>();
		parameters.put("llrno", permitDetailsDTO.getRecomendationLetterNo() == null ? StringUtils.EMPTY
				: permitDetailsDTO.getRecomendationLetterNo());

		parameters.put("office_name",
				(dto.getOfficeDetails() == null || dto.getOfficeDetails().getOfficeName() == null) ? StringUtils.EMPTY
						: dto.getOfficeDetails().getOfficeName());

		parameters.put("date", permitDetailsDTO.getCreatedDate() == null ? StringUtils.EMPTY
				: permitDetailsDTO.getCreatedDate().format(formatter));

		parameters.put("from_address",
				(dto.getOfficeDetails() == null || dto.getOfficeDetails().getOfficeName() == null) ? StringUtils.EMPTY
						: dto.getOfficeDetails().getOfficeName());

		parameters.put("to_address",
				(permitDetailsDTO.getRouteDetails() == null || permitDetailsDTO.getRouteDetails().getState() == null)
						? StringUtils.EMPTY
						: permitDetailsDTO.getRouteDetails().getState());

		parameters.put("dynamic_1", dynamicData_1);
		parameters.put("dynamic_2", dynamicData_2);
		parameters.put("dynamic_3", dynamicData_3);
		parameters.put("dynamic_4", dynamicData_4);
		parameters.put("dynamic_5", dynamicData_5);
		parameters.put("AP_LOGO", getLogo(ReportFiles.APLOGO));
		parameters.put("otsilogo", getLogo(ReportFiles.OTSILOGO));
		parameters.put("WATER_MARK", getLogo(ReportFiles.WATER_MARK));
		parameters.put("DIGITAL_SIGN", getLogo(ReportFiles.DIGITAL_SIGN));
		parameters.put("IMAGE_SCAN", qrCode);

		return parameters;
	}

	public Map<String, Object> getCCdetails(String applicationNo, String tpccNum) {
		TemporaryPermitPassengerDetailsDTO tempOODetails = null;
		List<PassengerDetailsVO> passengerDetailsVOlist = null;
		RegistrationDetailsDTO registrationDetails = null;
		Optional<TemporaryPermitPassengerDetailsDTO> tempOODetailsOpt = temporaryPermitPassengerDetailsDAO
				.findByPrNoAndOtherServicesDetailsTemporaryPermitNumber(applicationNo, tpccNum);
		if (tempOODetailsOpt.isPresent()) {
			tempOODetails = tempOODetailsOpt.get();
		} else {
			logger.error("temporary permit details not found");
			throw new BadRequestException("temporary permit details not found");
		}
		if (tempOODetails.getPassengerDetails() != null) {
			List<PassengerDetailsDTO> passengerList = tempOODetails.getPassengerDetails();
			passengerDetailsVOlist = passengerDetailsMapper.convertEntity(passengerList);
		} else {
			logger.error("Passenger details not found");
			throw new BadRequestException("Passenger details not found");
		}
		List<PassengerDetailsVO> list = new ArrayList<>();
		for (PassengerDetailsVO passengerDetailsVO : passengerDetailsVOlist) {
			PassengerDetailsVO passengerdetails = new PassengerDetailsVO();
			passengerdetails.setSeatNo(passengerDetailsVO.getSeatNo());
			passengerdetails.setPassengerName(passengerDetailsVO.getPassengerName());
			passengerdetails.setRepresentativeName(passengerDetailsVO.getRepresentativeName());
			passengerdetails.setAddress(passengerDetailsVO.getAddress());
			passengerdetails.setAge(passengerDetailsVO.getAge());
			passengerdetails.setEmergencyContactName(passengerDetailsVO.getEmergencyContactName());
			passengerdetails.setEmergencyContactNumber(passengerDetailsVO.getEmergencyContactNumber());
			passengerdetails.setMobile(passengerDetailsVO.getMobile());
			list.add(passengerdetails);
		}
		Optional<RegistrationDetailsDTO> registrationalOpt = registrationDetailDAO.findByPrNo(applicationNo);
		if (registrationalOpt.isPresent()) {
			registrationDetails = registrationalOpt.get();
		} else {
			logger.error("Registration Details not found");
			throw new BadRequestException("Registration Details not found");
		}

		/// need to fetch from DB..
		String qrCode = StringUtils.EMPTY;
		try {
			qrCode = qRCodeService.sendPDF(getCCFormURL(applicationNo));
			if (qrCode == null)
				qrCode = StringUtils.EMPTY;
		} catch (Exception e) {
			logger.error(" Exception :[] ", e);
		}

		Map<String, Object> parameters = new HashMap<>();

		parameters.put("regno", (tempOODetails.getPrNo() == null ? StringUtils.EMPTY : tempOODetails.getPrNo()));
		/*
		 * parameters.put("permitno",((tempOODetails.getOtherServicesDetails()==null ||
		 * tempOODetails.getOtherServicesDetails().getTemporaryPermitNumber()==null)
		 * ?StringUtils.EMPTY:tempOODetails.getOtherServicesDetails().
		 * getTemporaryPermitNumber()));
		 */

		parameters.put("owner_name",
				((registrationDetails.getApplicantDetails() == null
						|| registrationDetails.getApplicantDetails().getDisplayName() == null) ? StringUtils.EMPTY
								: registrationDetails.getApplicantDetails().getDisplayName()));

		parameters.put("s/d/w/o",
				((registrationDetails.getApplicantDetails() == null
						|| registrationDetails.getApplicantDetails().getFatherName() == null) ? StringUtils.EMPTY
								: registrationDetails.getApplicantDetails().getFatherName()));
		parameters.put("fc_no",
				((tempOODetails.getOtherServicesDetails() == null
						|| tempOODetails.getOtherServicesDetails().getFcNumber() == null) ? StringUtils.EMPTY
								: tempOODetails.getOtherServicesDetails().getFcNumber()));

		parameters.put("fc_valid",
				((tempOODetails.getOtherServicesDetails() == null
						|| tempOODetails.getOtherServicesDetails().getFcValidUpto() == null) ? StringUtils.EMPTY
								: tempOODetails.getOtherServicesDetails().getFcValidUpto().format(formatter)));

		parameters.put("permitno",
				(tempOODetails.getPermitNo() == null ? StringUtils.EMPTY : tempOODetails.getPermitNo()));

		parameters.put("permit_valid",
				((tempOODetails.getOtherServicesDetails() == null
						|| tempOODetails.getOtherServicesDetails().getPermitValidUpto() == null) ? StringUtils.EMPTY
								: tempOODetails.getOtherServicesDetails().getPermitValidUpto().format(formatter)));

		parameters.put("temp_permitNo",
				((tempOODetails.getOtherServicesDetails() == null
						|| tempOODetails.getOtherServicesDetails().getTemporaryPermitNumber() == null)
								? StringUtils.EMPTY
								: tempOODetails.getOtherServicesDetails().getTemporaryPermitNumber()));

		parameters.put("IC",
				((registrationDetails.getInsuranceDetails() == null
						|| registrationDetails.getInsuranceDetails().getId() == null) ? StringUtils.EMPTY
								: registrationDetails.getInsuranceDetails().getId()));
		parameters.put("IC_valid",
				((registrationDetails.getInsuranceDetails() == null
						|| registrationDetails.getInsuranceDetails().getValidTill() == null) ? StringUtils.EMPTY
								: registrationDetails.getInsuranceDetails().getValidTill().format(formatter)));

		parameters.put("tax",
				((tempOODetails.getOtherServicesDetails() == null
						|| tempOODetails.getOtherServicesDetails().getTaxAmount() == 0) ? StringUtils.EMPTY
								: tempOODetails.getOtherServicesDetails().getTaxAmount()));

		parameters.put("tax_valid",
				((tempOODetails.getOtherServicesDetails() == null
						|| tempOODetails.getOtherServicesDetails().getTaxValidTill() == null) ? StringUtils.EMPTY
								: tempOODetails.getOtherServicesDetails().getTaxValidTill().format(formatter)));

		parameters.put("seat_no",
				((tempOODetails.getOtherServicesDetails() == null
						|| tempOODetails.getOtherServicesDetails().getSeatingCapacity() == null) ? StringUtils.EMPTY
								: tempOODetails.getOtherServicesDetails().getSeatingCapacity()));
		parameters.put("mob_no",
				((registrationDetails.getApplicantDetails() == null
						|| registrationDetails.getApplicantDetails().getContact() == null
						|| registrationDetails.getApplicantDetails().getContact().getMobile() == null)
								? StringUtils.EMPTY
								: registrationDetails.getApplicantDetails().getContact().getMobile()));

		parameters.put("DOJ", (tempOODetails.getDateOfJourney() == null ? StringUtils.EMPTY
				: tempOODetails.getDateOfJourney().format(formatter)));

		parameters.put("start_time",
				(tempOODetails.getStartingTime() == null ? StringUtils.EMPTY : tempOODetails.getStartingTime()));

		parameters.put("from",
				(tempOODetails.getFromRoute() == null ? StringUtils.EMPTY : tempOODetails.getFromRoute()));

		parameters.put("to", (tempOODetails.getToRoute() == null ? StringUtils.EMPTY : tempOODetails.getToRoute()));

		parameters.put("driver_name",
				(tempOODetails.getDriverName() == null ? StringUtils.EMPTY : tempOODetails.getDriverName()));

		parameters.put("dl_no_1",
				(tempOODetails.getDlNumber() == null ? StringUtils.EMPTY : tempOODetails.getDlNumber()));

		parameters.put("second_name", (tempOODetails.getSecondryDriverName() == null ? StringUtils.EMPTY
				: tempOODetails.getSecondryDriverName()));

		parameters.put("dl_no_2", (tempOODetails.getSecondryDriverDLNumber() == null ? StringUtils.EMPTY
				: tempOODetails.getSecondryDriverDLNumber()));

		parameters.put("size",
				(tempOODetails.getNoOfPassengers() == null ? StringUtils.EMPTY : tempOODetails.getNoOfPassengers()));

		logger.info("Done..." + list.size());
		JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(list);
		parameters.put("ccList", beanColDataSource);
		parameters.put("AP_LOGO", getLogo(ReportFiles.APLOGO));
		parameters.put("otsilogo", getLogo(ReportFiles.OTSILOGO));
		parameters.put("WATER_MARK", getLogo(ReportFiles.WATER_MARK));
		parameters.put("DIGITAL_SIGN", getLogo(ReportFiles.DIGITAL_SIGN));
		parameters.put("QR_SCAN", qrCode);

		return parameters;
	}

	public Map<String, Object> getBilateralPermitDetails(String applicationNo) {
		BileteralTaxDTO bileteralTaxDTO = null;
		Optional<BileteralTaxDTO> bilateralOpt = bileteralTaxDAO.findByApplicationNo(applicationNo);
		if (bilateralOpt.isPresent()) {
			bileteralTaxDTO = bilateralOpt.get();
		} else {
			logger.error("No record found for bilateral permit");
			throw new BadRequestException("No record found for bilateral permit");
		}
		String qrCode = StringUtils.EMPTY;
		try {
			qrCode = qRCodeService.sendPDF(getBilateralPermitURL(applicationNo));
			if (qrCode == null)
				qrCode = StringUtils.EMPTY;
		} catch (Exception e) {
			logger.error(" Exception :[] ", e);
		}

		Map<String, Object> parameters = new HashMap<>();

		parameters.put("counterNo",
				(bileteralTaxDTO.getCspPuNo() == null) ? StringUtils.EMPTY : bileteralTaxDTO.getCspPuNo());
		parameters.put("prNo", (bileteralTaxDTO.getPrNo() == null) ? StringUtils.EMPTY : bileteralTaxDTO.getPrNo());
		parameters.put("csp_puNo",
				(bileteralTaxDTO.getCspPuNo() == null) ? StringUtils.EMPTY : bileteralTaxDTO.getCspPuNo());
		parameters.put("csvalidfrom", (bileteralTaxDTO.getApprovedDate() == null) ? StringUtils.EMPTY
				: bileteralTaxDTO.getApprovedDate().format(formatter));
		parameters.put("csvalidto", (bileteralTaxDTO.getValidityTo() == null) ? StringUtils.EMPTY
				: bileteralTaxDTO.getValidityTo().format(formatter));
		parameters.put("wheitis",
				(bileteralTaxDTO.getPurpose() == null) ? StringUtils.EMPTY : bileteralTaxDTO.getPurpose());
		parameters.put("receipt",
				(bileteralTaxDTO.getApplicationNo() == null) ? StringUtils.EMPTY : bileteralTaxDTO.getApplicationNo());
		parameters.put("taxpaidupto", (bileteralTaxDTO.getValidityTo() == null) ? StringUtils.EMPTY
				: bileteralTaxDTO.getValidityTo().format(formatter));
		parameters.put("date", (bileteralTaxDTO.getValidityTo() == null) ? StringUtils.EMPTY
				: bileteralTaxDTO.getValidityTo().format(formatter));
		parameters.put("rldate", (bileteralTaxDTO.getRecommendationLatterDate() == null) ? StringUtils.EMPTY
				: bileteralTaxDTO.getRecommendationLatterDate().format(formatter));
		parameters.put("ppno",
				(bileteralTaxDTO.getPermitNo() == null) ? StringUtils.EMPTY : bileteralTaxDTO.getPermitNo());
		parameters.put("validupto", (bileteralTaxDTO.getPermitValidTo() == null) ? StringUtils.EMPTY
				: bileteralTaxDTO.getPermitValidTo().format(formatter));
		parameters.put("fcdate", (bileteralTaxDTO.getFcValidTo() == null) ? StringUtils.EMPTY
				: bileteralTaxDTO.getFcValidTo().format(formatter));
		parameters.put("icdate", (bileteralTaxDTO.getIcValidTo() == null) ? StringUtils.EMPTY
				: bileteralTaxDTO.getIcValidTo().format(formatter));
		parameters.put("htaxpaid", (bileteralTaxDTO.getHomeTaxValidTo() == null) ? StringUtils.EMPTY
				: bileteralTaxDTO.getHomeTaxValidTo().format(formatter));
		parameters.put("rlw_sc", (bileteralTaxDTO.getGvw() == null) ? StringUtils.EMPTY : bileteralTaxDTO.getGvw());
		parameters.put("amtNo", (bileteralTaxDTO.getTax() == null) ? StringUtils.EMPTY : bileteralTaxDTO.getTax());
		parameters.put("rlno", (bileteralTaxDTO.getRecommendationLetterNo() == null) ? StringUtils.EMPTY
				: bileteralTaxDTO.getRecommendationLetterNo());
		parameters.put("officecode",
				(bileteralTaxDTO.getDistrict() == null) ? StringUtils.EMPTY : ("RTA " + bileteralTaxDTO.getDistrict()));
		parameters.put("owneraddr",
				(bileteralTaxDTO.getOwnerAddress() == null && bileteralTaxDTO.getOwnerName() == null)
						? StringUtils.EMPTY
						: (bileteralTaxDTO.getOwnerName() + " / " + bileteralTaxDTO.getOwnerAddress()));

		parameters.put("AP_LOGO", getLogo(ReportFiles.APLOGO));
		parameters.put("otsilogo", getLogo(ReportFiles.OTSILOGO));
		parameters.put("WATER_MARK", getLogo(ReportFiles.WATER_MARK));
		parameters.put("DIGITAL_SIGN", getLogo(ReportFiles.DIGITAL_SIGN));
		parameters.put("QR_SCAN", qrCode);
		return parameters;
	}

	/**
	 * 
	 * @param vcrNumber
	 * @return
	 */
	public Map<String, Object> vcrReport(String vcrNumber, boolean relaseOrder) {
		List<RegServiceDTO> regServiceDto = null;
		Optional<OfficeDTO> officedto = null;
		Optional<VcrOffencesIllicitsDTO> vcrIllicitsOpt = null;
		List<VcrOffencesIllicitsDTO> vcrIllicitsList = null;
		VcrOffencesIllicitsDTO vcrIllicitsDto = null;
		Optional<VcrFinalServiceDTO> vcrListOpt = null;
		Optional<UserDTO> userDtoOpt = null;
		UserDTO userDto = null;
		VcrFinalServiceDTO vcrDto = null;
		// SpeedGunDTO speedGunDto = null;

		ApplicationSearchVO applicationSearchVO = null;
		CitizenSearchReportVO searchVo = null;
		if (!relaseOrder) {
			vcrListOpt = finalServiceDAO.findByVcrVcrNumber(vcrNumber);
			if (vcrListOpt.isPresent()) {
				vcrDto = vcrListOpt.get();
			} else {
				throw new BadRequestException("VCR DEtails not found for release order");
			}

			applicationSearchVO = new ApplicationSearchVO();
			applicationSearchVO.setVcrNo(vcrNumber);
			applicationSearchVO.setRequestFromAO(Boolean.TRUE);
			searchVo = registrationService.applicationSearchForVcrAfterPayment(applicationSearchVO);

			for (VcrFinalServiceVO vo : searchVo.getVcrList()) {
				if (vo.getVcr().getVcrNumber().equalsIgnoreCase(vcrNumber)) {
					vcrDto = vcrFinalServiceMapper.convertVO(vo);
				}
			}

			if (vcrDto == null) {
				logger.error("No VcR Record found with Vcr  Number:[{}]", vcrNumber);
				throw new BadRequestException("No VCR record found with vcrNumber:" + vcrNumber);

			}

		} else {
			vcrListOpt = finalServiceDAO.findByVcrVcrNumber(vcrNumber);
			if (vcrListOpt.isPresent()) {
				vcrDto = vcrListOpt.get();
			} else {
				throw new BadRequestException("VCR DEtails not found for release order");
			}
		}
		if (relaseOrder) {
			if (vcrDto.getSeizedAndDocumentImpounded() == null
					|| vcrDto.getSeizedAndDocumentImpounded().getVehicleSeizedDTO() == null
					|| vcrDto.getSeizedAndDocumentImpounded().getVehicleSeizedDTO().getDateOfSeized() == null) {
				logger.error("Given VCR number is not seized :[{}]", vcrNumber);
				throw new BadRequestException("Given VCR number is not seized :" + vcrNumber);
			}
			if (!(vcrDto.getIsVcrClosed() || (vcrDto.getPaymentType() != null
					&& vcrDto.getPaymentType().equalsIgnoreCase(GatewayTypeEnum.CASH.getDescription())))) {
				logger.error("Please pay amount for relase order :[{}]", vcrNumber);
				throw new BadRequestException("Please pay amount for relase order :" + vcrNumber);
			}

			logger.info("VCR Details found for Vcr number:[{}]", vcrNumber);
			/*
			 * List<VcrFinalServiceDTO> listOfVCrs =null;
			 * if(StringUtils.isNoneBlank(vcrDto.getRegistration().getRegApplicationNo())) {
			 * listOfVCrs =
			 * finalServiceDAO.findByRegistrationRegApplicationNoAndIsVcrClosedIsFalse(
			 * vcrDto.getRegistration().getRegApplicationNo());
			 * 
			 * }else
			 * if(StringUtils.isNoneBlank(vcrDto.getRegistration().getChassisNumber())) {
			 * listOfVCrs =
			 * finalServiceDAO.findByRegistrationChassisNumberAndIsVcrClosedIsFalse(vcrDto.
			 * getRegistration().getChassisNumber());
			 * 
			 * }else if(StringUtils.isNoneBlank(vcrDto.getRegistration().getRegNo())) {
			 * listOfVCrs =
			 * finalServiceDAO.findByRegistrationRegNoAndIsVcrClosedIsFalse(vcrDto.
			 * getRegistration().getRegNo()); }else
			 * if(StringUtils.isNoneBlank(vcrDto.getRegistration().getTrNo())) { listOfVCrs
			 * = finalServiceDAO.findByRegistrationTrNoAndIsVcrClosedIsFalse(vcrDto.
			 * getRegistration().getTrNo()); } if(listOfVCrs != null &&
			 * !listOfVCrs.isEmpty()) {
			 * logger.error("VCR found for this vehicle Please close all VCRs  :[{}]",
			 * listOfVCrs.stream().findFirst().get().getVcr().getVcrNumber()); throw new
			 * BadRequestException("VCR found for this vehicle Please close all VCRs  :[{}]"
			 * + listOfVCrs.stream().findFirst().get().getVcr().getVcrNumber()); }
			 */
		}
		if (StringUtils.isNoneBlank(vcrDto.getPilledCov())
				&& StringUtils.isNoneBlank(vcrDto.getRegistration().getClasssOfVehicle().getCovcode())) {
			if (vcrDto.getRegistration().getClasssOfVehicle().getCovcode()
					.equalsIgnoreCase(ClassOfVehicleEnum.PSVT.getCovCode())
					&& vcrDto.getPilledCov().equalsIgnoreCase(ClassOfVehicleEnum.MAXT.getCovCode())) {
				vcrIllicitsOpt = vcrOffencesAndIllicitsDAO.findByTemplateId(1);
			} else if (vcrDto.getRegistration().getClasssOfVehicle().getCovcode()
					.equalsIgnoreCase(ClassOfVehicleEnum.MCRN.getCovCode())
					&& vcrDto.getPilledCov().equalsIgnoreCase(ClassOfVehicleEnum.MAXT.getCovCode())) {
				vcrIllicitsOpt = vcrOffencesAndIllicitsDAO.findByTemplateId(2);
			} else if (vcrDto.getRegistration().getClasssOfVehicle().getCovcode()
					.equalsIgnoreCase(ClassOfVehicleEnum.MCRN.getCovCode())
					&& vcrDto.getPilledCov().equalsIgnoreCase(ClassOfVehicleEnum.COCT.getCovCode())) {
				vcrIllicitsOpt = vcrOffencesAndIllicitsDAO.findByTemplateId(3);
			} else if ((vcrDto.getRegistration().getClasssOfVehicle().getCovcode()
					.equalsIgnoreCase(ClassOfVehicleEnum.OBT.getCovCode())
					|| vcrDto.getRegistration().getClasssOfVehicle().getCovcode()
							.equalsIgnoreCase(ClassOfVehicleEnum.OBPN.getCovCode()))
					&& vcrDto.getPilledCov().equalsIgnoreCase(ClassOfVehicleEnum.MAXT.getCovCode())) {
				vcrIllicitsOpt = vcrOffencesAndIllicitsDAO.findByTemplateId(4);
			} else if (vcrDto.getRegistration().getClasssOfVehicle().getCovcode()
					.equalsIgnoreCase(ClassOfVehicleEnum.COCT.getCovCode())
					&& vcrDto.getPilledCov().equalsIgnoreCase(ClassOfVehicleEnum.SCRT.getCovCode())) {
				vcrIllicitsOpt = vcrOffencesAndIllicitsDAO.findByTemplateId(5);
			} else if (vcrDto.getRegistration().getClasssOfVehicle().getCovcode()
					.equalsIgnoreCase(ClassOfVehicleEnum.MAXT.getCovCode())
					&& vcrDto.getPilledCov().equalsIgnoreCase(ClassOfVehicleEnum.SCRT.getCovCode())) {
				vcrIllicitsOpt = vcrOffencesAndIllicitsDAO.findByTemplateId(6);
			} else if (vcrDto.getRegistration().getClasssOfVehicle().getCovcode()
					.equalsIgnoreCase(ClassOfVehicleEnum.MTLT.getCovCode())
					&& vcrDto.getPilledCov().equalsIgnoreCase(ClassOfVehicleEnum.SCRT.getCovCode())) {
				vcrIllicitsOpt = vcrOffencesAndIllicitsDAO.findByTemplateId(7);
			} else if (vcrDto.getRegistration().getClasssOfVehicle().getCovcode()
					.equalsIgnoreCase(ClassOfVehicleEnum.MCRN.getCovCode())
					&& vcrDto.getPilledCov().equalsIgnoreCase(ClassOfVehicleEnum.SCRT.getCovCode())) {
				vcrIllicitsOpt = vcrOffencesAndIllicitsDAO.findByTemplateId(8);
			} else if (vcrDto.getRegistration().getClasssOfVehicle().getCovcode()
					.equalsIgnoreCase(ClassOfVehicleEnum.MTLT.getCovCode())
					&& vcrDto.getPilledCov().equalsIgnoreCase(ClassOfVehicleEnum.MAXT.getCovCode())) {
				vcrIllicitsOpt = vcrOffencesAndIllicitsDAO.findByTemplateId(9);
			} else if (vcrDto.getRegistration().getClasssOfVehicle().getCovcode()
					.equalsIgnoreCase(ClassOfVehicleEnum.TTRN.getCovCode())
					&& vcrDto.getPilledCov().equalsIgnoreCase(ClassOfVehicleEnum.TTTT.getCovCode())) {
				vcrIllicitsOpt = vcrOffencesAndIllicitsDAO.findByTemplateId(10);
			} else if (vcrDto.getRegistration().getClasssOfVehicle().getCovcode()
					.equalsIgnoreCase(ClassOfVehicleEnum.SCRT.getCovCode())
					&& vcrDto.getPilledCov().equalsIgnoreCase(ClassOfVehicleEnum.COCT.getCovCode())) {
				vcrIllicitsOpt = vcrOffencesAndIllicitsDAO.findByTemplateId(11);
			} else if (vcrDto.getRegistration().getClasssOfVehicle().getCovcode()
					.equalsIgnoreCase(ClassOfVehicleEnum.EIBT.getCovCode())
					&& vcrDto.getPilledCov().equalsIgnoreCase(ClassOfVehicleEnum.COCT.getCovCode())) {
				vcrIllicitsOpt = vcrOffencesAndIllicitsDAO.findByTemplateId(12);
			} else if (vcrDto.getRegistration().getClasssOfVehicle().getCovcode()
					.equalsIgnoreCase(ClassOfVehicleEnum.EIBT.getCovCode())
					&& vcrDto.getPilledCov().equalsIgnoreCase(ClassOfVehicleEnum.SCRT.getCovCode())) {
				vcrIllicitsOpt = vcrOffencesAndIllicitsDAO.findByTemplateId(13);
			} else if (vcrDto.getRegistration().getClasssOfVehicle().getCovcode()
					.equalsIgnoreCase(ClassOfVehicleEnum.GCRT.getCovCode())
					&& vcrDto.getPilledCov().equalsIgnoreCase(ClassOfVehicleEnum.COCT.getCovCode())) {
				vcrIllicitsOpt = vcrOffencesAndIllicitsDAO.findByTemplateId(14);
			} else if (vcrDto.getRegistration().getClasssOfVehicle().getCovcode()
					.equalsIgnoreCase(ClassOfVehicleEnum.GCRT.getCovCode())
					&& vcrDto.getPilledCov().equalsIgnoreCase(ClassOfVehicleEnum.SCRT.getCovCode())) {
				vcrIllicitsOpt = vcrOffencesAndIllicitsDAO.findByTemplateId(15);
			} else if (vcrDto.getRegistration().getClasssOfVehicle().getCovcode()
					.equalsIgnoreCase(ClassOfVehicleEnum.PSVT.getCovCode())
					&& vcrDto.getPilledCov().equalsIgnoreCase(ClassOfVehicleEnum.COCT.getCovCode())) {
				vcrIllicitsOpt = vcrOffencesAndIllicitsDAO.findByTemplateId(16);
			} else if (vcrDto.getRegistration().getClasssOfVehicle().getCovcode()
					.equalsIgnoreCase(ClassOfVehicleEnum.PSVT.getCovCode())
					&& vcrDto.getPilledCov().equalsIgnoreCase(ClassOfVehicleEnum.SCRT.getCovCode())) {
				vcrIllicitsOpt = vcrOffencesAndIllicitsDAO.findByTemplateId(17);
			}
			if (vcrIllicitsOpt != null) {
				if (vcrIllicitsOpt.isPresent()) {
					vcrIllicitsDto = vcrIllicitsOpt.get();
				} else {
					throw new BadRequestException("Offence not found");
				}
			}
		}

		String qrCode = StringUtils.EMPTY;
		if (relaseOrder) {
			try {
				qrCode = qRCodeService.sendPDF(getVCRreport(vcrNumber));
				if (qrCode == null)
					qrCode = StringUtils.EMPTY;
			} catch (Exception e) {
				logger.debug(" Exception :[] ", e);
				logger.error(" Exception :[] ", e.getMessage());
			}
		} else {
			try {
				qrCode = qRCodeService.sendPDF(getVCRReleaseOrder(vcrNumber));
				if (qrCode == null)
					qrCode = StringUtils.EMPTY;
			} catch (Exception e) {
				logger.debug(" Exception :[] ", e);
				logger.error(" Exception :[] ", e.getMessage());
			}
		}

		Map<String, Object> parameters = new HashMap<>();
		// Vehicle Registration Related
		parameters.put("ownerName", (vcrDto.getOwnerDetails().getFullName() == null) ? StringUtils.EMPTY
				: vcrDto.getOwnerDetails().getFullName().toUpperCase());
		parameters.put("ownerAddress", (vcrDto.getOwnerDetails().getAddress() == null ? StringUtils.EMPTY
				: vcrDto.getOwnerDetails().getAddress()));

		parameters.put("todayDate", "Date: " + LocalDate.now().format(formatter).toString());
		parameters.put("vcrNumber", (vcrNumber == null ? StringUtils.EMPTY : vcrNumber));
		String dateAndTimeOfCheck = vcrDto.getVcr().getDateOfCheck() == null ? StringUtils.EMPTY
				: vcrDto.getVcr().getDateOfCheck().format(formatter).toString().replaceFirst("T", " & ");
		parameters.put("dateOfCheck", dateAndTimeOfCheck);
		parameters.put("placeOfCheck",
				(vcrDto.getVcr().getPlaceOfCheck() == null ? StringUtils.EMPTY : vcrDto.getVcr().getPlaceOfCheck()));
		String prNo = vcrDto.getRegistration().getRegNo() == null ? StringUtils.EMPTY
				: vcrDto.getRegistration().getRegNo().toString();

		if (StringUtils.isEmpty(prNo)) {
			prNo = vcrDto.getRegistration().getTrNo() == null ? StringUtils.EMPTY
					: vcrDto.getRegistration().getTrNo().toString();
		}
		parameters.put("prNumber", prNo);
		parameters.put("chassis_num", vcrDto.getRegistration().getChassisNumber() == null ? StringUtils.EMPTY
				: vcrDto.getRegistration().getChassisNumber());
		String cov = vcrDto.getRegistration().getClasssOfVehicle().getCovdescription() == null ? StringUtils.EMPTY
				: vcrDto.getRegistration().getClasssOfVehicle().getCovdescription();
		parameters.put("classOfVehicle", cov);
		// Permit Related
		parameters.put("permitNumber", (vcrDto.getValidityDetails().getPermitNumber() == null ? StringUtils.EMPTY
				: vcrDto.getValidityDetails().getPermitNumber().toString()));
		parameters.put("permitValidity", (vcrDto.getValidityDetails().getIcValidUpto() == null ? StringUtils.EMPTY
				: vcrDto.getValidityDetails().getIcValidUpto().format(formatter)));

		parameters.put("Speed", (vcrDto.getSpeedGunDTO() == null ? StringUtils.EMPTY
				: vcrDto.getSpeedGunDTO().getSpeed() + " , " + vcrDto.getSpeedGunDTO().getSpeedZone()));
		String fc_related = StringUtils.EMPTY;
		parameters.put("fc_related", fc_related);
		if (vcrDto.getValidityDetails() != null && vcrDto.getValidityDetails().getFcNumber() != null) {
			fc_related = " 2. F.C.No "
					+ (vcrDto.getValidityDetails().getFcNumber() == null ? "--------"
							: vcrDto.getValidityDetails().getFcNumber())
					+ " valid Up to " + (vcrDto.getValidityDetails().getFcTo() == null ? "----------"
							: vcrDto.getValidityDetails().getFcTo().format(formatter));
			parameters.put("fc_related", fc_related);
		}

		String pc_related = StringUtils.EMPTY;
		parameters.put("pc_related", pc_related);
		if (vcrDto.getValidityDetails() != null && vcrDto.getValidityDetails().getPermitNumber() != null) {
			pc_related = "3. Permit No"
					+ (vcrDto.getValidityDetails().getPermitNumber() == null ? "--------"
							: vcrDto.getValidityDetails().getPermitNumber())
					+ " ,valid upto " + (vcrDto.getValidityDetails().getPermitTO() == null ? "--------"
							: vcrDto.getValidityDetails().getPermitTO().format(formatter))
					+ " issued by s/RTA ";
			parameters.put("pc_related", pc_related);
		}

		String dl_related = StringUtils.EMPTY;
		parameters.put("dl_related", dl_related);
		if (vcrDto.getDriver() != null
				&& (vcrDto.getDriver().getDriverLicense() != null || vcrDto.getDriver().getDriverLicense() == null)
				&& (vcrDto.getDriver().getNonTransportValidUpto() != null
						|| vcrDto.getDriver().getNonTransportValidUpto() == null)) {
			dl_related = "4. DL.No "
					+ (vcrDto.getDriver().getDriverLicense() == null ? "--------"
							: vcrDto.getDriver().getDriverLicense())
					+ " valid upto " + (vcrDto.getDriver().getNonTransportValidUpto() == null ? "----------"
							: vcrDto.getDriver().getNonTransportValidUpto().format(formatter))
					+ " issued By LA ";
			parameters.put("dl_related", dl_related);
		}
		/*
		 * if(vcrDto.getDriver()!=null && vcrDto.getDriver().getDriverLicense()!=null &&
		 * vcrDto.getDriver().getTransportValidUpTo()!=null){ dl_related=" 4. DL.No "+
		 * (vcrDto.getDriver().getDriverLicense()==null?"--------":
		 * vcrDto.getDriver().getDriverLicense())+" valid upto "+
		 * (vcrDto.getDriver().getTransportValidUpTo()==null?"----------":
		 * vcrDto.getDriver().getTransportValidUpTo().format(formatter))
		 * +" issued By LA "; parameters.put("dl_related",dl_related); }
		 */
		parameters.put("ownerCited2", "");
		parameters.put("transportValidityUpto",
				((vcrDto.getDriver() != null && vcrDto.getDriver().getTransportValidUpTo() != null)
						? vcrDto.getDriver().getTransportValidUpTo().format(formatter).toString()
						: StringUtils.EMPTY));
		parameters.put("nonTransportValidityUpto",
				((vcrDto.getDriver() != null && vcrDto.getDriver().getNonTransportValidUpto() != null)
						? vcrDto.getDriver().getNonTransportValidUpto().format(formatter).toString()
						: StringUtils.EMPTY));
		parameters.put("clNumber", "");//
		// DL Related
		parameters.put("dlNumber",
				((vcrDto.getDriver() != null && vcrDto.getDriver().getDriverLicense() != null)
						? vcrDto.getDriver().getDriverLicense()
						: StringUtils.EMPTY));
		parameters.put("dl_issuedDate",
				((vcrDto.getDriver() != null && vcrDto.getDriver().getIssuedBy() != null)
						? vcrDto.getDriver().getIssuedBy().format(formatter)
						: StringUtils.EMPTY));
		parameters.put("driverAddress",
				((vcrDto.getDriver() != null && vcrDto.getDriver().getAddress() != null)
						? vcrDto.getDriver().getAddress()
						: StringUtils.EMPTY));
		String driverName = (vcrDto.getDriver() != null && vcrDto.getDriver().getFullName() != null)
				? vcrDto.getDriver().getFullName()
				: StringUtils.EMPTY;
		parameters.put("remarks", "Remarks"
				+ (vcrDto.getOffence().getRemarks() == null ? StringUtils.EMPTY : vcrDto.getOffence().getRemarks()));
		parameters.put("driverName", driverName);

		parameters.put("seatingCapacity", (vcrDto.getRegistration().getSeatingCapacity() == null ? StringUtils.EMPTY
				: vcrDto.getRegistration().getSeatingCapacity().toString()));
		String fromPlace = ((vcrDto.getVehicleProceeding() != null && vcrDto.getVehicleProceeding().getFrom() != null
				&& vcrDto.getVehicleProceeding().getFrom().getPlace() != null)
						? vcrDto.getVehicleProceeding().getFrom().getPlace()
						: StringUtils.EMPTY);
		String toPlace = ((vcrDto.getVehicleProceeding() != null && vcrDto.getVehicleProceeding().getTo() != null
				&& vcrDto.getVehicleProceeding().getTo().getPlace() != null)
						? vcrDto.getVehicleProceeding().getTo().getPlace()
						: StringUtils.EMPTY);

		List<OffenceReportVO> offenceList = new ArrayList<>();
		List<OffenceReportForReleaseOrder> offenceRelease = new ArrayList<>();
		vcrIllicitsList = vcrOffencesAndIllicitsDAO.findAll();
		if (relaseOrder) {
			OffenceReportForReleaseOrder offenceReportForReleaseOrder = null;
			for (OffenceDTO officeDto : vcrDto.getOffence().getOffence()) {
				offenceReportForReleaseOrder = new OffenceReportForReleaseOrder();

				if (officeDto.getFixedAmount() != null) {
					offenceReportForReleaseOrder.setAmount1("Rs. " + officeDto.getFixedAmount().toString());
				}
				offenceReportForReleaseOrder.setOffenceDescription(
						officeDto.getOffenceDescription() + " ( " + officeDto.getOffendingSection() + " / "
								+ officeDto.getPenalSections() + " / " + officeDto.getSection() + " )");
				if (officeDto.getAmount1() == null) {
					offenceReportForReleaseOrder.setAmount1(StringUtils.EMPTY);
				} else if (officeDto.getOffenceDescription() == null) {
					offenceReportForReleaseOrder.setOffenceDescription(StringUtils.EMPTY);
				}
				offenceRelease.add(offenceReportForReleaseOrder);
			}
			// table 1 offence and amount related jrBean Collector
			JRBeanCollectionDataSource vcrOffenceList = new JRBeanCollectionDataSource(offenceRelease);
			parameters.put("offenceListRelease", vcrOffenceList);
		} else {
			OffenceReportVO offenceReportVO = null;
			for (OffenceDTO officeDto : vcrDto.getOffence().getOffence()) {
				offenceReportVO = new OffenceReportVO();

				if (officeDto.getFixedAmount() != null) {
					offenceReportVO.setAmount1("Rs. " + officeDto.getFixedAmount().toString());
				}
				offenceReportVO.setOffenceRemark(StringUtils.EMPTY);
				if (officeDto.getRemarks() != null) {
					offenceReportVO.setOffenceRemark(officeDto.getRemarks());
				}
				if (officeDto.getOffenceDescription()
						.equalsIgnoreCase("Driving by a drunken person or by a person under the influence of drugs")) {
					VcrOffencesIllicitsDTO vcrillicitsDto = new VcrOffencesIllicitsDTO();
					vcrillicitsDto = vcrIllicitsList.stream()
							.filter(perd -> perd.getName().equalsIgnoreCase("Drunken driving")).findFirst().get();
					offenceReportVO.setOffenceDescription(
							officeDto.getOffenceDescription() + " ( " + officeDto.getOffendingSection() + " / "
									+ officeDto.getPenalSections() + " / " + officeDto.getSection() + " )");
					offenceReportVO.setOffenceDescriptionPart(vcrillicitsDto.getDescription()
							.replaceAll("@@DEVICENAME@@",
									(officeDto.getAnalyserName() == null ? StringUtils.EMPTY
											: officeDto.getAnalyserName()))
							.replaceAll("@@SLNO@@",
									(officeDto.getSerialNumber() == null ? StringUtils.EMPTY
											: officeDto.getSerialNumber()))
							.replaceAll("@@REPORTNO@@",
									(officeDto.getTestReportNo() == null ? StringUtils.EMPTY
											: officeDto.getTestReportNo() == null ? StringUtils.EMPTY
													: officeDto.getTestReportNo()))
							.replaceAll("@@DATE@@",
									(officeDto.getDrunkDaeCheck() == null ? StringUtils.EMPTY
											: officeDto.getDrunkDaeCheck().toString().trim().substring(0, 9)))
							.replaceAll("@@TIME@@",
									(officeDto.getDrunkDaeCheck() == null ? StringUtils.EMPTY
											: officeDto.getDrunkDaeCheck().toString().trim().substring(11)))
							.replaceAll("@@DoctorsReport@@",
									(officeDto.getDoctorReportNo() == null ? StringUtils.EMPTY
											: officeDto.getDoctorReportNo()))
							.replaceAll("@@BAC@@",
									(officeDto.getBac() == null ? StringUtils.EMPTY : officeDto.getBac().toString())));
				} else {
					offenceReportVO.setOffenceDescription(
							officeDto.getOffenceDescription() + " ( " + officeDto.getOffendingSection() + " / "
									+ officeDto.getPenalSections() + " / " + officeDto.getSection() + " )");
					// offenceReportVO.setOffenceDescriptionPart(offi);
				}
				if (offenceReportVO.getAmount1() == null) {
					offenceReportVO.setAmount1(StringUtils.EMPTY);
				} else if (offenceReportVO.getOffenceDescription() == null) {
					offenceReportVO.setOffenceDescription(StringUtils.EMPTY);
				} else if (offenceReportVO.getOffenceDescriptionPart() == null) {
					offenceReportVO.setOffenceDescriptionPart(StringUtils.EMPTY);
				} else if (StringUtils.isEmpty(offenceReportVO.getOffenceRemark())) {
					offenceReportVO.setOffenceRemark(StringUtils.EMPTY);
				}
				offenceList.add(offenceReportVO);
			}
			// table 1 offence and amount related jrBean Collector
			JRBeanCollectionDataSource vcrOffenceList = new JRBeanCollectionDataSource(offenceList);
			parameters.put("offenceList", vcrOffenceList);
		}
		String goods = StringUtils.EMPTY;
		if (vcrDto.getDriver() != null && vcrDto.getDriver().getGoodsDescription() != null
				&& vcrDto.getDriver().getGoodsDescription().getGoodsDesc() != null) {
			goods = vcrDto.getDriver().getGoodsDescription().getGoodsDesc();
		}
		if (!StringUtils.isBlank(goods)) {
			parameters.put("description",
					" Stopped and checked the above vehicle while proceeding to " + toPlace.toUpperCase() + " from "
							+ fromPlace.toUpperCase() + " with a load of " + goods
							+ "and following irregularities were recorded and compounded as follows. ");
		}
		if (toPlace.trim().length() > 2 && fromPlace.trim().length() > 2) {
			parameters.put("description",
					" Stopped and checked the above vehicle while proceeding to " + toPlace.toUpperCase() + " from "
							+ fromPlace.toUpperCase() + " and following irregularities were recorded. ");
		} else {
			parameters.put("description",
					" Stopped and checked the above vehicle and following irregularities were recorded and compounded as follows. ");

		}

		/*
		 * if(vcrIllicitsList.stream().anyMatch(P->P.getDescription().
		 * equalsIgnoreCase("Over loading Passengers"))) { parameters.put("description",
		 * "stopped and checked the above vehicle with"+" 16 "+"passengers"); }
		 */
		// vcrIllicitsList
		// table 2 amount and bank detals
		JRBeanCollectionDataSource paymentsData = new JRBeanCollectionDataSource(vcrDto.getOffence().getOffence());
		parameters.put("paymentData", paymentsData);
		String offenceAmount = StringUtils.EMPTY;
		parameters.put("offenceAmount", offenceAmount);
		if (vcrDto.getIsVcrClosed() || (vcrDto.getPaymentType() != null
				&& vcrDto.getPaymentType().equalsIgnoreCase(GatewayTypeEnum.CASH.getDescription()))) {
			parameters.put("offenceAmount", "vcr payment done.");
		} else {
			if (vcrDto.getOffencetotal() != null) {
				offenceAmount = vcrDto.getOffencetotal().toString();
				parameters.put("offenceAmount", " Compounding Fee to be Paid is Rs." + offenceAmount + "/-  ");
			}
		}
		parameters.put("subject",
				"Sub:- Motor Vehicles-Vehicle No. " + prNo.toUpperCase() + ",vehicle class " + cov.toUpperCase()
						+ " Certain irregularities committed-vehicle seized- Release of" + "\n"
						+ "          Vehicle-orders issued-regarding");

		parameters.put("reference",
				"Ref:- 1. V.C.R. No: " + vcrNumber + " Dated: " + dateAndTimeOfCheck + " of " + "Sri "
						+ (vcrDto.getCreatedBy() == null ? "_________" : vcrDto.getCreatedBy()) + " MVI" + ".\n"
						+ "         2. Application Dt " + dateAndTimeOfCheck + " from Mr/M/s/Ms : "
						+ (vcrDto.getOwnerDetails().getFullName() == null ? "__________"
								: vcrDto.getOwnerDetails().getFullName().toUpperCase()));

		parameters.put("checkedBy",
				"In the reference 1st cited vehicle No. " + prNo.toUpperCase() + " was checked by "
						+ (vcrDto.getCreatedBy() == null ? "_________" : vcrDto.getCreatedBy()) + " MVI "
						+ (vcrDto.getOwnerDetails().getFullName() == null ? "_________"
								: vcrDto.getOwnerDetails().getFullName().toUpperCase())
						+ " on " + dateAndTimeOfCheck.toUpperCase());

		RegServiceDTO dto = null;
		Optional<RegistrationDetailsDTO> regdtoOptdto = null;
		RegistrationDetailsDTO regdto = null;
		Optional<StagingRegistrationDetailsDTO> stagDetailsDto = null;

		/**
		 * List of registration_service records based regNo ,trNo and ServiceIds(9007)
		 */
		if (relaseOrder) {
			if (StringUtils.isNoneBlank(vcrDto.getRegistration().getRegNo())) {
				regServiceDto = regServiceDAO.findByprNoAndServiceIdsAndSourceIsNull(
						vcrDto.getRegistration().getRegNo(), ServiceEnum.VCR.getId());
				if (regServiceDto == null || regServiceDto.isEmpty()) {
					regdtoOptdto = registrationDetailDAO.findByPrNo(vcrDto.getRegistration().getRegNo());
					if (regdtoOptdto.isPresent()) {
						regdto = regdtoOptdto.get();
					} else {
						throw new BadRequestException("no record found in with this tr Data");
					}
				}
			} else if (StringUtils.isNoneBlank(vcrDto.getRegistration().getTrNo())) {
				regServiceDto = regServiceDAO
						.findByRegistrationDetailsTrNoAndServiceIdsNotNull(vcrDto.getRegistration().getTrNo());
				if ((!vcrDto.getRegistration().isOtherState()) && (regServiceDto == null || regServiceDto.isEmpty())) {
					stagDetailsDto = stagingRegistrationDetailsDAO.findByTrNo(vcrDto.getRegistration().getTrNo());
					if (!stagDetailsDto.isPresent()) {
						throw new BadRequestException("no record found in with this tr Data");
					}
				}
			} else if (StringUtils.isNoneBlank(vcrDto.getRegistration().getChassisNumber())) {
				regServiceDto = regServiceDAO
						.findByRegistrationDetailsVahanDetailsChassisNumberAndServiceIdsInAndSourceIsNull(
								vcrDto.getRegistration().getChassisNumber(), Arrays.asList(ServiceEnum.VCR.getId()));
				if ((!vcrDto.getRegistration().isOtherState()) && (regServiceDto == null || regServiceDto.isEmpty())) {
					stagDetailsDto = stagingRegistrationDetailsDAO.findByTrNo(vcrDto.getRegistration().getTrNo());
					if (!stagDetailsDto.isPresent()) {
						throw new BadRequestException("no record found in with this tr Data");
					}
				}
			} else {
				logger.info("While generating ");
				throw new BadRequestException("No record found with respective PRNo or TRNo");
			}
			if (!CollectionUtils.isEmpty(regServiceDto)) {
				List<RegServiceDTO> regServ = regServiceDto.stream()
						.filter(id -> id.getVcrNosList().stream().anyMatch(type -> type.equalsIgnoreCase(vcrNumber)))
						.collect(Collectors.toList());
				if (regServ == null || regServ.isEmpty()) {
					logger.info("Registration services not done for related VCR ");
					throw new BadRequestException("Registration services not done for related VCR ");
				}
				dto = regServ.stream().findFirst().get();

				parameters.put("challan",
						(dto.getApplicationNo() == null ? StringUtils.EMPTY : dto.getApplicationNo()));
				parameters.put("challan_date",
						(dto.getlUpdate() == null ? StringUtils.EMPTY : dto.getlUpdate().format(formatter)));
				List<PaymentTransactionDTO> paymentList = paymentTransactionDAO
						.findByApplicationFormRefNumAndPayStatus(dto.getApplicationNo(), "success");
				if (paymentList == null || paymentList.isEmpty()) {
					logger.info("Payments not found related VCR");
					throw new BadRequestException("Payments not found related VCR");
				}
				PaymentTransactionDTO paymentDto = paymentList.stream().findFirst().get();
				parameters.put("challan_amt",
						(paymentDto.getFeeDetailsDTO().getTotalFees() == null || paymentDto.getFeeDetailsDTO() == null)
								? StringUtils.EMPTY
								: paymentDto.getFeeDetailsDTO().getTotalFees().toString());
				parameters.put("challan_bank",
						(dto.getGatewayType() == null) ? StringUtils.EMPTY : dto.getGatewayType());
				String taxrelated = StringUtils.EMPTY;
				/*
				 * taxrelated="a) Tax of Rs: "+((dto.getTaxAmount()==null)?StringUtils.EMPTY:
				 * dto.getTaxAmount())+" /- and Arrears of Tax and Penalty of Rs: "+((dto.
				 * getPenalty()==null)?StringUtils.EMPTY: dto.getPenalty())+" /-";
				 */
				Long totalTaxAmt = 0L;
				Long totalPenalityAmt = 0L;
				totalTaxAmt = (dto.getTaxArrears() == null ? 0L : dto.getTaxArrears())
						+ (dto.getTaxAmount() == null ? 0L : dto.getTaxAmount())
						+ (dto.getGreenTaxAmount() == null ? 0L : dto.getGreenTaxAmount());
				totalPenalityAmt = (dto.getPenaltyArrears() == null ? 0L : dto.getPenaltyArrears())
						+ (dto.getPenalty() == null ? 0L : dto.getPenalty());
				taxrelated = "a) Tax of Rs: " + ((totalTaxAmt == null) ? StringUtils.EMPTY : totalTaxAmt)
						+ " /- and Arrears of Tax and Penalty of Rs: "
						+ ((totalPenalityAmt == null) ? StringUtils.EMPTY : totalPenalityAmt) + " /-";
				parameters.put("tax_related", taxrelated);
				if (vcrDto.isAnnualTax()) {
					taxrelated = "a) Tax of Rs: " + "a) Tax of Rs: "
							+ ((totalTaxAmt == null) ? StringUtils.EMPTY : totalTaxAmt)
							+ " /- and Arrears of Tax and Penalty of Rs: "
							+ ((totalPenalityAmt == null) ? StringUtils.EMPTY : totalPenalityAmt) + " /-"
							+ " is valid upto " + ((dto.getTaxvalidity() == null) ? StringUtils.EMPTY
									: dto.getTaxvalidity().format(formatter));
					parameters.put("tax_related", taxrelated);
				}

				String compdRelated = StringUtils.EMPTY;
				parameters.put("compd_related", compdRelated);
				if (dto.getTaxAmount() != null || dto.getTaxAmount() == null && dto.getPenalty() != null
						|| dto.getPenalty() == null) {
					compdRelated = "b) Collected Compounding Fee of Rs. "
							+ ((dto.getVcrDetails() == null || dto.getVcrDetails().getCfAmnt() == null)
									? (paymentDto.getFeeDetailsDTO().getTotalFees() == null ? StringUtils.EMPTY
											: paymentDto.getFeeDetailsDTO().getTotalFees())
									: dto.getVcrDetails().getCfAmnt())
							+ " U/S 86/200 of MV Act";
					parameters.put("compd_related", compdRelated);
				}

				String releaseorderfee = StringUtils.EMPTY;
				parameters.put("releaseorder_fee", releaseorderfee);
				if (dto.getTaxAmount() != null || dto.getTaxAmount() == null && dto.getPenalty() != null
						|| dto.getPenalty() == null) {
					releaseorderfee = "c) Release order Fee of Rs. 25/-";
					parameters.put("releaseorder_fee", releaseorderfee);
				}
				parameters.put("mviOfficer",
						(vcrDto.getCreatedBy() == null ? StringUtils.EMPTY : vcrDto.getCreatedBy() + " MVI"));
				parameters.put("mviOfficeCode",
						(vcrDto.getMviOfficeCode() == null ? StringUtils.EMPTY : vcrDto.getMviOfficeCode()));
				// parameters.put("mviOfficerRole","MVI");
				parameters.put("officeName",
						(dto.getOfficeDetails() == null || dto.getOfficeDetails().getOfficeName() == null)
								? StringUtils.EMPTY
								: dto.getOfficeDetails().getOfficeName());
				officedto = officeDAO.findByOfficeCodeAndIsActiveTrue(vcrDto.getMviOfficeCode());
			}
			if ((!vcrDto.getRegistration().isOtherState()) && dto != null && dto.getOfficeDetails() != null) {
				officedto = officeDAO.findByOfficeCodeAndIsActiveTrue(dto.getOfficeDetails().getOfficeCode());
			} else {
				officedto = officeDAO.findByOfficeCodeAndIsActiveTrue(vcrDto.getMviOfficeCode());
			}
		} else {
			officedto = officeDAO.findByOfficeCodeAndIsActiveTrue(vcrDto.getMviOfficeCode());
		}

		if (officedto.isPresent()) {
			parameters.put("officeName",
					((officedto.get().getOfficeName() == null) ? StringUtils.EMPTY : officedto.get().getOfficeName()));

		} else {
			throw new BadRequestException("office not found for respective user");
		}

		parameters.put("offence_specific_title", "");
		parameters.put("offence_specific", "");

		if (vcrIllicitsDto != null && vcrDto.getRegistration() != null && StringUtils.isNoneBlank(vcrDto.getPilledCov())
				&& StringUtils.isNoneBlank(vcrDto.getRegistration().getClasssOfVehicle().getCovcode())) {
			parameters.put("offence_specific_title", vcrIllicitsDto.getName());
			if (vcrDto.getIllicitPlaceDetails() != null) {
				if (vcrDto.getIllicitPlaceDetails().size() > 1) {
					parameters.put("offence_specific",
							vcrIllicitsDto.getDescription()
									.replace("@@FROM@@",
											(vcrDto.getIllicitPlaceDetails().get(0).getFrom() == null ? "__"
													: vcrDto.getIllicitPlaceDetails().get(0).getFrom()))
									.replace("@@TO@@",
											(vcrDto.getIllicitPlaceDetails().get(0).getTo() == null ? "__"
													: vcrDto.getIllicitPlaceDetails().get(0).getTo()))
									.replaceAll("@@PRICE@@",
											(vcrDto.getIllicitPlaceDetails().get(0).getIndividualFare()
													.toString() == null
															? "__"
															: vcrDto.getIllicitPlaceDetails().get(0).getIndividualFare()
																	.toString()))

									.replaceAll("@@FROM1@@",
											(vcrDto.getIllicitPlaceDetails().get(1).getFrom() == null ? "__"
													: vcrDto.getIllicitPlaceDetails().get(1).getFrom()))
									.replaceAll("@@TO1@@",
											(vcrDto.getIllicitPlaceDetails().get(1).getTo() == null ? "__"
													: vcrDto.getIllicitPlaceDetails().get(1).getTo()))
									.replaceAll("@@PRICE1@@",
											(vcrDto.getIllicitPlaceDetails().get(1).getIndividualFare()
													.toString() == null
															? "__"
															: vcrDto.getIllicitPlaceDetails().get(1).getIndividualFare()
																	.toString()))

									.replaceAll("@@FROM2@@", "___").replaceAll("@@TO2@@", "____")
									.replaceAll("@@PRICE2@@", "___")

									.replaceAll("@@SEAT@@",
											vcrDto.getPilledSeatings().toString() == null ? StringUtils.EMPTY
													: vcrDto.getPilledSeatings().toString())
									.replaceAll("@@MEASURE@@",
											vcrDto.getPilledMeasurements() == null ? StringUtils.EMPTY
													: vcrDto.getPilledMeasurements()));
				} else if (vcrDto.getIllicitPlaceDetails().size() > 2) {
					parameters.put("offence_specific",
							vcrIllicitsDto.getDescription()
									.replace("@@FROM@@",
											(vcrDto.getIllicitPlaceDetails().get(0).getFrom() == null ? "__"
													: vcrDto.getIllicitPlaceDetails().get(0).getFrom()))
									.replace("@@TO@@",
											(vcrDto.getIllicitPlaceDetails().get(0).getTo() == null ? "__"
													: vcrDto.getIllicitPlaceDetails().get(0).getTo()))
									.replaceAll("@@PRICE@@",
											(vcrDto.getIllicitPlaceDetails().get(0).getIndividualFare()
													.toString() == null
															? "__"
															: vcrDto.getIllicitPlaceDetails().get(0).getIndividualFare()
																	.toString()))

									.replaceAll("@@FROM1@@",
											(vcrDto.getIllicitPlaceDetails().get(1).getFrom() == null ? "__"
													: vcrDto.getIllicitPlaceDetails().get(1).getFrom()))
									.replaceAll("@@TO1@@",
											(vcrDto.getIllicitPlaceDetails().get(1).getTo() == null ? "__"
													: vcrDto.getIllicitPlaceDetails().get(1).getTo()))
									.replaceAll("@@PRICE1@@",
											(vcrDto.getIllicitPlaceDetails().get(1).getIndividualFare()
													.toString() == null
															? "__"
															: vcrDto.getIllicitPlaceDetails().get(1).getIndividualFare()
																	.toString()))

									.replaceAll("@@FROM2@@",
											(vcrDto.getIllicitPlaceDetails().get(2).getFrom() == null ? "__"
													: vcrDto.getIllicitPlaceDetails().get(2).getFrom()))
									.replaceAll("@@TO2@@",
											(vcrDto.getIllicitPlaceDetails().get(2).getTo() == null ? "__"
													: vcrDto.getIllicitPlaceDetails().get(2).getTo()))
									.replaceAll("@@PRICE2@@",
											(vcrDto.getIllicitPlaceDetails().get(1).getIndividualFare()
													.toString() == null
															? "__"
															: vcrDto.getIllicitPlaceDetails().get(1).getIndividualFare()
																	.toString()))

									.replaceAll("@@SEAT@@",
											vcrDto.getPilledSeatings().toString() == null ? StringUtils.EMPTY
													: vcrDto.getPilledSeatings().toString())
									.replaceAll("@@MEASURE@@",
											vcrDto.getPilledMeasurements() == null ? StringUtils.EMPTY
													: vcrDto.getPilledMeasurements()));
				} else {
					parameters.put("offence_specific",
							vcrIllicitsDto.getDescription()
									.replace("@@FROM@@",
											(vcrDto.getIllicitPlaceDetails().get(0).getFrom() == null ? "__"
													: vcrDto.getIllicitPlaceDetails().get(0).getFrom()))
									.replace("@@TO@@",
											(vcrDto.getIllicitPlaceDetails().get(0).getTo() == null ? "__"
													: vcrDto.getIllicitPlaceDetails().get(0).getTo()))
									.replaceAll("@@PRICE@@",
											(vcrDto.getIllicitPlaceDetails().get(0).getIndividualFare()
													.toString() == null
															? "__"
															: vcrDto.getIllicitPlaceDetails().get(0).getIndividualFare()
																	.toString()))

									.replaceAll("@@FROM1@@", "__").replaceAll("@@TO1@@", "___")
									.replaceAll("@@PRICE1@@", "___")

									.replaceAll("@@FROM2@@", "___").replaceAll("@@TO2@@", "___")
									.replaceAll("@@PRICE2@@", "___")

									.replaceAll("@@SEAT@@",
											vcrDto.getPilledSeatings() == null ? StringUtils.EMPTY
													: vcrDto.getPilledSeatings().toString())
									.replaceAll("@@MEASURE@@",
											vcrDto.getPilledMeasurements() == null ? StringUtils.EMPTY
													: vcrDto.getPilledMeasurements()));
				}
			}

		}

		parameters.put("taxfee", StringUtils.EMPTY);
		parameters.put("tax_validity", StringUtils.EMPTY);

		parameters.put("penality", StringUtils.EMPTY);
		parameters.put("penality_arrers", StringUtils.EMPTY);
		parameters.put("tax_arrers", StringUtils.EMPTY);
		parameters.put("collect_amt", StringUtils.EMPTY);
		if (!vcrDto.isTaxPaid()) {
			parameters.put("taxfee", (vcrDto.getTax() == null ? StringUtils.EMPTY : vcrDto.getTax().toString()));
			parameters.put("tax_validity", (vcrDto.getTaxValidityForTaxPaid() == null ? StringUtils.EMPTY
					: vcrDto.getTaxValidityForTaxPaid().format(formatter)));
		}
		parameters.put("servicefee",
				(vcrDto.getServiceFee() == null ? StringUtils.EMPTY : vcrDto.getServiceFee().toString()));
		parameters.put("penality", (vcrDto.getPenalty() == null ? StringUtils.EMPTY : vcrDto.getPenalty().toString()));
		parameters.put("penality_arrers",
				(vcrDto.getPenaltyArrears() == null ? StringUtils.EMPTY : vcrDto.getPenaltyArrears().toString()));
		parameters.put("tax_arrers",
				(vcrDto.getTaxArrears() == null ? StringUtils.EMPTY : vcrDto.getTaxArrears().toString()));
		parameters.put("collect_amt",
				(vcrDto.getOffencetotal() == null ? StringUtils.EMPTY : vcrDto.getOffencetotal().toString()));

		parameters.put("mviOfficer", "");
		parameters.put("mviOfficer", "");
		parameters.put("mviOfficeCode", "");
		parameters.put("mviOfficerRole", "MVI");
		parameters.put("mviOfficer", (vcrDto.getCreatedBy() == null ? "_________" : vcrDto.getCreatedBy()));
		parameters.put("mviOfficeCode",
				(vcrDto.getMviOfficeCode() == null ? StringUtils.EMPTY : vcrDto.getMviOfficeCode()));
		parameters.put("mviOfficerRole", "MVI");
		if (dto != null && dto.getOfficeDetails() != null) {
			parameters.put("officeName", (dto.getOfficeDetails().getOfficeName() == null) ? StringUtils.EMPTY
					: dto.getOfficeDetails().getOfficeName());
		}
		/*
		 * parameters.put("seized_related",""); if (officedto.get().getOfficeName() !=
		 * null && vcrDto.getSeizedAndDocumentImpounded().getVehicleSeizedDTO() != null
		 * &&
		 * vcrDto.getSeizedAndDocumentImpounded().getVehicleSeizedDTO().getDateOfSeized(
		 * )!=null &&
		 * vcrDto.getSeizedAndDocumentImpounded().getVehicleSeizedDTO().getVehicleKeptAt
		 * ()!=null) { parameters.put("seized_related", "your vehicle was seized on " +
		 * replaceDefaults(
		 * (vcrDto.getSeizedAndDocumentImpounded().getVehicleSeizedDTO().getDateOfSeized
		 * ()) == null ? "__________" :
		 * (vcrDto.getSeizedAndDocumentImpounded().getVehicleSeizedDTO().getDateOfSeized
		 * ().format(DateTimeFormatter.ofPattern("dd-MM-yyyy")))) + " and placed at " +
		 * replaceDefaults(
		 * (vcrDto.getSeizedAndDocumentImpounded().getVehicleSeizedDTO().
		 * getVehicleKeptAt()) == null ? "___________" :
		 * (vcrDto.getSeizedAndDocumentImpounded().getVehicleSeizedDTO().
		 * getVehicleKeptAt())) + " . Contact the " + ((officedto.get().getOfficeName()
		 * == null) ? StringUtils.EMPTY : officedto.get().getOfficeName()) + " / " +
		 * (vcrDto.getMviOfficeCode() == null ? StringUtils.EMPTY :
		 * vcrDto.getMviOfficeCode()));
		 * 
		 * parameters.put("seize_remarks",replaceDefaults(
		 * (vcrDto.getSeizedAndDocumentImpounded().getVehicleSeizedDTO().getRemarks())
		 * == null ? " " :
		 * (vcrDto.getSeizedAndDocumentImpounded().getVehicleSeizedDTO().getRemarks())))
		 * ; }
		 */
		parameters.put("veh_kept", "");// seized_on
		parameters.put("seized_on", "");

		parameters.put("contactOn", "");
		parameters.put("seize_remarks", "");// contactOn
		if (officedto.get().getOfficeName() != null && vcrDto.getSeizedAndDocumentImpounded() != null
				&& vcrDto.getSeizedAndDocumentImpounded().getVehicleSeizedDTO() != null
				&& vcrDto.getSeizedAndDocumentImpounded().getVehicleSeizedDTO().getDateOfSeized() != null
				&& vcrDto.getSeizedAndDocumentImpounded().getVehicleSeizedDTO().getVehicleKeptAt() != null) {
			parameters.put("veh_kept",
					(vcrDto.getSeizedAndDocumentImpounded().getVehicleSeizedDTO().getVehicleKeptAt()) == null
							? "___________"
							: (vcrDto.getSeizedAndDocumentImpounded().getVehicleSeizedDTO().getVehicleKeptAt()));// seized_on
			parameters.put("seized_on",
					replaceDefaults(
							(vcrDto.getSeizedAndDocumentImpounded().getVehicleSeizedDTO().getDateOfSeized()) == null
									? "__________"
									: (vcrDto.getSeizedAndDocumentImpounded().getVehicleSeizedDTO().getDateOfSeized()
											.format(DateTimeFormatter.ofPattern("dd-MM-yyyy")))));

			parameters.put("contactOn",
					((officedto.get().getOfficeName() == null) ? StringUtils.EMPTY : officedto.get().getOfficeName())
							+ " / "
							+ (vcrDto.getMviOfficeCode() == null ? StringUtils.EMPTY : vcrDto.getMviOfficeCode()));
			parameters.put("seize_remarks",
					replaceDefaults(
							(vcrDto.getSeizedAndDocumentImpounded().getVehicleSeizedDTO().getRemarks()) == null ? " "
									: (vcrDto.getSeizedAndDocumentImpounded().getVehicleSeizedDTO().getRemarks())));// contactOn
		}

		parameters.put("mviOfficer", (vcrDto.getCreatedBy() == null ? StringUtils.EMPTY : vcrDto.getCreatedBy()));
		parameters.put("issuedBy", (vcrDto.getCreatedBy() == null ? StringUtils.EMPTY : vcrDto.getCreatedBy()));
		userDtoOpt = userDAO.findByUserId(vcrDto.getCreatedBy());
		if (userDtoOpt.isPresent()) {

			userDto = userDtoOpt.get();

			if (StringUtils.isNoneBlank(userDto.getFirstname()) && StringUtils.isBlank(userDto.getMiddleName())
					&& StringUtils.isBlank(userDto.getLastName())) {
				parameters.put("mviOfficer",
						((userDto.getFirstName() == null) ? StringUtils.EMPTY : userDto.getFirstName()));
			} else if (StringUtils.isNoneBlank(userDto.getMiddleName()) && StringUtils.isBlank(userDto.getFirstName())
					&& StringUtils.isBlank(userDto.getLastName())) {
				parameters.put("mviOfficer",
						((userDto.getMiddleName() == null) ? StringUtils.EMPTY : userDto.getMiddleName()));
			} else if (StringUtils.isNoneBlank(userDto.getLastName()) && StringUtils.isBlank(userDto.getMiddleName())
					&& StringUtils.isBlank(userDto.getFirstName())) {
				parameters.put("mviOfficer",
						((userDto.getLastName() == null) ? StringUtils.EMPTY : userDto.getLastName()));
			} else if (StringUtils.isNoneBlank(userDto.getLastName()) && StringUtils.isBlank(userDto.getMiddleName())
					&& StringUtils.isNoneBlank(userDto.getFirstName())) {
				parameters.put("mviOfficer",
						((userDto.getLastName() == null && userDto.getFirstName() == null) ? StringUtils.EMPTY
								: (userDto.getFirstName() + userDto.getLastName())));
			} else if (StringUtils.isBlank(userDto.getLastName()) && StringUtils.isNoneBlank(userDto.getMiddleName())
					&& StringUtils.isBlank(userDto.getFirstName())) {

			}

			if (StringUtils.isNoneBlank(userDto.getFirstname())) {
				parameters.put("issuedBy",
						(userDto.getFirstname() == null ? StringUtils.EMPTY : userDto.getFirstname()));
			} else if (StringUtils.isNoneBlank(userDto.getMiddleName())) {
				parameters.put("issuedBy",
						(userDto.getMiddleName() == null ? StringUtils.EMPTY : userDto.getMiddleName()));
			} else if (StringUtils.isNoneBlank(userDto.getLastName())) {
				parameters.put("issuedBy", (userDto.getLastName() == null ? StringUtils.EMPTY : userDto.getLastName()));
			}
		}
		Optional<GridFSDBFile> imageOptional = null;
		if (vcrDto.getSeizedAndDocumentImpounded() != null
				&& vcrDto.getSeizedAndDocumentImpounded().getVehicleSeizedDTO() != null
				&& vcrDto.getSeizedAndDocumentImpounded().getVehicleSeizedDTO().getEnclosures() != null) {
			List<KeyValue<String, List<ImageEnclosureDTO>>> enclousers = vcrDto.getSeizedAndDocumentImpounded()
					.getVehicleSeizedDTO().getEnclosures();
			for (KeyValue<String, List<ImageEnclosureDTO>> enclousersSIngle : enclousers) {
				List<ImageEnclosureDTO> listaa = enclousersSIngle.getValue();
				if (!CollectionUtils.isEmpty(listaa)) {
					for (ImageEnclosureDTO imageEnclosureDTO : listaa) {

						imageOptional = gridFsClient.findFilesInGridFsById(imageEnclosureDTO.getImageId());
					}
				}
			}
			if (imageOptional.isPresent()) {
				InputStream finput = imageOptional.get().getInputStream();
				try {
					final byte[] bytes64bytes = Base64.encodeBase64(IOUtils.toByteArray(finput));
					parameters.put("seize_image", new String(bytes64bytes));
				} catch (IOException e) {
					e.printStackTrace();
				}
			} else {
				parameters.put("seize_image", "");
			}
		}
		List<OtherSectionDTO> otherSectionsList = vcrDto.getOtherSections();
		if (otherSectionsList != null) {
			if (otherSectionsList.get(0).getEnclosures() != null) {
				List<KeyValue<String, List<ImageEnclosureDTO>>> enclosuresOtherSectionList = otherSectionsList.get(0)
						.getEnclosures();
				if (enclosuresOtherSectionList != null) {
					for (KeyValue<String, List<ImageEnclosureDTO>> enclousersSIngle : enclosuresOtherSectionList) {
						List<ImageEnclosureDTO> listaa = enclousersSIngle.getValue();
						if (!CollectionUtils.isEmpty(listaa)) {
							imageOptional = gridFsClient.findFilesInGridFsById(listaa.get(0).getImageId());
							if (imageOptional.isPresent()) {
								InputStream finput = imageOptional.get().getInputStream();
								try {
									final byte[] bytes64bytes = Base64.encodeBase64(IOUtils.toByteArray(finput));
									parameters.put("other_section_1", new String(bytes64bytes));
								} catch (IOException e) {
									e.printStackTrace();
								}

							} else {
								parameters.put("other_section_1", "");
							}
						} else {
							parameters.put("other_section_1", "");
						}
					}
				}
			}
			if (otherSectionsList.size() > 1) {
				if (otherSectionsList.get(1).getEnclosures() != null) {
					List<KeyValue<String, List<ImageEnclosureDTO>>> enclosuresOtherSectionList = otherSectionsList
							.get(1).getEnclosures();
					if (enclosuresOtherSectionList != null) {
						for (KeyValue<String, List<ImageEnclosureDTO>> enclousersSIngle : enclosuresOtherSectionList) {
							List<ImageEnclosureDTO> listaa = enclousersSIngle.getValue();
							if (!CollectionUtils.isEmpty(listaa)) {
								imageOptional = gridFsClient.findFilesInGridFsById(listaa.get(0).getImageId());
								if (imageOptional.isPresent()) {
									InputStream finput = imageOptional.get().getInputStream();
									try {
										final byte[] bytes64bytes = Base64.encodeBase64(IOUtils.toByteArray(finput));
										parameters.put("other_section_2", new String(bytes64bytes));
									} catch (IOException e) {
										e.printStackTrace();
									}

								} else {
									parameters.put("other_section_2", "");
								}

							} else {
								parameters.put("other_section_2", "");
							}
						}
					}
				}
			}
		}
		parameters.put("sectionremaks", "");
		parameters.put("other_remarks1", "");
		if (otherSectionsList != null) {
			if (!StringUtils.isEmpty(otherSectionsList.get(0).getMviRemark())) {
				parameters.put("sectionremaks", (otherSectionsList.get(0).getMviRemark()));
			}
			parameters.put("other_remarks1", "");
			if (otherSectionsList.size() > 1) {
				if (!StringUtils.isEmpty(otherSectionsList.get(1).getMviRemark())) {
					parameters.put("other_remarks1", otherSectionsList.get(1).getMviRemark());
				}
			}
		}

		parameters.put("GOVTLOGO", getLogo(ReportFiles.GOVTLOGO));
		parameters.put("AP_LOGO", getLogo(ReportFiles.APLOGO));
		parameters.put("otsilogo", getLogo(ReportFiles.OTSILOGO));
		parameters.put("WATER_MARK", getLogo(ReportFiles.WATER_MARK));
		parameters.put("DIGITAL_SIGN", getLogo(ReportFiles.DIGITAL_SIGN));
		parameters.put("IMAGE_SCAN", qrCode);
		parameters.put("dtcOfficeName", "");
		if (vcrDto.getSeizedAndDocumentImpounded() != null
				&& vcrDto.getSeizedAndDocumentImpounded().getVehicleSeizedDTO() != null
				&& vcrDto.getSeizedAndDocumentImpounded().getVehicleSeizedDTO().getVehicleKeptAt() != null) {
			parameters.put("dtcOfficeName",
					(vcrDto.getSeizedAndDocumentImpounded().getVehicleSeizedDTO().getVehicleKeptAt() == null
							? "_________"
							: vcrDto.getSeizedAndDocumentImpounded().getVehicleSeizedDTO().getVehicleKeptAt()));
		}
		return parameters;

	}

	public List<VoluntaryTaxVO> getVoluntaryTaxList(String inputNumber) {
		List<VoluntaryTaxDTO> voluntaryTaxDTOList = null;
		List<VoluntaryTaxVO> voluntaryTaxVO = null;

		if (StringUtils.isNoneBlank(inputNumber)) {
			voluntaryTaxDTOList = voluntaryTaxDAO.findFirst2ByRegNoOrderByCreatedDateDesc(inputNumber);
		}
		if (CollectionUtils.isEmpty(voluntaryTaxDTOList)) {
			voluntaryTaxDTOList = voluntaryTaxDAO.findFirst2ByTrNoOrderByCreatedDateDesc(inputNumber);
		}
		if (CollectionUtils.isEmpty(voluntaryTaxDTOList)) {
			voluntaryTaxDTOList = voluntaryTaxDAO.findFirst2ByChassisNoOrderByCreatedDateDesc(inputNumber);
		}
		if (CollectionUtils.isEmpty(voluntaryTaxDTOList)) {
			throw new BadRequestException("No record found");
		}
		voluntaryTaxVO = voluntaryTaxMapper.convertEntity(voluntaryTaxDTOList);
		return voluntaryTaxVO;
	}

	public Map<String, Object> getVoluntaryTax(String inputNumber) {
		Optional<VoluntaryTaxDTO> voluntaryTaxDTOOptional = null;

		if (StringUtils.isNoneBlank(inputNumber)) {
			voluntaryTaxDTOOptional = voluntaryTaxDAO.findByTrNoOrderByCreatedDateDesc(inputNumber);
		} else {
			throw new BadRequestException("Please provide tr number or pr number");
		}
		if (voluntaryTaxDTOOptional == null || !voluntaryTaxDTOOptional.isPresent()) {
			voluntaryTaxDTOOptional = voluntaryTaxDAO.findByRegNoOrderByCreatedDateDesc(inputNumber);
		}
		if ((voluntaryTaxDTOOptional == null || !voluntaryTaxDTOOptional.isPresent())) {
			voluntaryTaxDTOOptional = voluntaryTaxDAO.findByChassisNoOrderByCreatedDateDesc(inputNumber);
		}
		if ((voluntaryTaxDTOOptional == null || !voluntaryTaxDTOOptional.isPresent())) {
			voluntaryTaxDTOOptional = voluntaryTaxDAO.findByApplicationNo(inputNumber);
		}
		if (voluntaryTaxDTOOptional == null || !voluntaryTaxDTOOptional.isPresent()) {
			throw new BadRequestException("No record found");
		}
		String qrCode = StringUtils.EMPTY;
		VoluntaryTaxDTO voluntaryTaxDTO = voluntaryTaxDTOOptional.get();
		try {
			qrCode = qRCodeService.sendPDF(getVolentaryTax(voluntaryTaxDTO.getApplicationNo()));
			if (qrCode == null)
				qrCode = StringUtils.EMPTY;
		} catch (Exception e) {
			logger.error(" Exception :[] ", e);
		}
		Map<String, Object> parameters = new HashMap<>();

		parameters.put("ULW",
				replaceDefaults(voluntaryTaxDTO.getUlw() == null ? StringUtils.EMPTY : voluntaryTaxDTO.getUlw())
						+ " Kgs");
		parameters.put("GVW",
				replaceDefaults(voluntaryTaxDTO.getGvw() == null ? StringUtils.EMPTY : voluntaryTaxDTO.getGvw())
						+ " Kgs");
		parameters.put("SEAT_CAP", replaceDefaults(voluntaryTaxDTO.getSeatingCapacity() == null ? StringUtils.EMPTY
				: voluntaryTaxDTO.getSeatingCapacity()));

		parameters.put("reg_serv_num", replaceDefaults(
				(voluntaryTaxDTO.getApplicationNo() == null) ? StringUtils.EMPTY : voluntaryTaxDTO.getApplicationNo()));

		if (StringUtils.isNoneBlank(voluntaryTaxDTO.getRegNo())) {
			parameters.put("prno", replaceDefaults(
					(voluntaryTaxDTO.getRegNo() == null) ? StringUtils.EMPTY : voluntaryTaxDTO.getRegNo()));
		} else if (StringUtils.isNoneBlank(voluntaryTaxDTO.getTrNo())) {
			parameters.put("prno", replaceDefaults(
					(voluntaryTaxDTO.getTrNo() == null) ? StringUtils.EMPTY : voluntaryTaxDTO.getTrNo()));
		} else {
			parameters.put("prno", replaceDefaults(
					(voluntaryTaxDTO.getChassisNo() == null) ? StringUtils.EMPTY : voluntaryTaxDTO.getChassisNo()));
		}
		parameters.put("reg_num", replaceDefaults(
				(voluntaryTaxDTO.getApplicationNo() == null) ? StringUtils.EMPTY : voluntaryTaxDTO.getApplicationNo()));
		parameters.put("cur_date", voluntaryTaxDTO.getlUpdate().format(formatter));

		if (voluntaryTaxDTO.getTaxvalidFrom() != null) {
			parameters.put("cur_date", voluntaryTaxDTO.getTaxvalidFrom().format(formatter));
		}
		parameters.put("taxtype", replaceDefaults(
				(voluntaryTaxDTO.getTaxType() == null) ? StringUtils.EMPTY : voluntaryTaxDTO.getTaxType()));
		parameters.put("tax_valid", replaceDefaults((voluntaryTaxDTO.getTaxvalidUpto() == null) ? StringUtils.EMPTY
				: voluntaryTaxDTO.getTaxvalidUpto().format(formatter)));
		parameters.put("tax_amt",
				replaceDefaults((voluntaryTaxDTO.getTax() == null) ? StringUtils.EMPTY : voluntaryTaxDTO.getTax()));
		parameters.put("penality", replaceDefaults(
				voluntaryTaxDTO.getPenalty() == null ? StringUtils.EMPTY : voluntaryTaxDTO.getPenalty()));
		parameters.put("pen_arrers", replaceDefaults(
				voluntaryTaxDTO.getPenaltyArrears() == null ? StringUtils.EMPTY : voluntaryTaxDTO.getPenaltyArrears()));
		parameters.put("tax_arrears", replaceDefaults(
				(voluntaryTaxDTO.getTaxArrears() == null) ? StringUtils.EMPTY : voluntaryTaxDTO.getTaxArrears()));
		String covCode = voluntaryTaxDTO.getClassOfVehicle();
		MasterCovDTO masterCovDTO = masterCovDAO.findByCovcode(covCode);
		parameters.put("cov",
				replaceDefaults((masterCovDTO == null || masterCovDTO.getCovdescription() == null) ? StringUtils.EMPTY
						: masterCovDTO.getCovdescription()));

		parameters.put("own_name", replaceDefaults(voluntaryTaxDTO.getOwnerName() == null ? StringUtils.EMPTY
				: voluntaryTaxDTO.getOwnerName().toUpperCase()));

		parameters.put("officeName", StringUtils.EMPTY);
		if (voluntaryTaxDTO.getOfficeCode() != null) {
			Optional<OfficeDTO> officeDtoOptional = officeDAO.findByOfficeCode(voluntaryTaxDTO.getOfficeCode());
			parameters.put("officeName", StringUtils.EMPTY);
			if (officeDtoOptional.isPresent()) {
				parameters.put("officeName", officeDtoOptional.get().getOfficeName() == null ? StringUtils.EMPTY
						: officeDtoOptional.get().getOfficeName());
			}
		}
		parameters.put("service_charge", replaceDefaults(
				voluntaryTaxDTO.getServiceFee() == null ? StringUtils.EMPTY : voluntaryTaxDTO.getServiceFee()));
		parameters.put("local_date", LocalDate.now().format(formatter));
		parameters.put("TIME", LocalDateTime.now().format(timeFormatter));
		parameters.put("collect_amt", StringUtils.EMPTY);
		Double collectedAmt = 0d;
		if (voluntaryTaxDTO.getServiceFee() != null || voluntaryTaxDTO.getTax() != null) {
			collectedAmt = voluntaryTaxDTO.getServiceFee() + voluntaryTaxDTO.getTax();
			parameters.put("collect_amt", collectedAmt.toString());
		}
		parameters.put("cess_tax", StringUtils.EMPTY);
		parameters.put("AP_LOGO", getLogo(ReportFiles.APLOGO));
		parameters.put("AP_LOGO", getLogo(ReportFiles.APLOGO));
		parameters.put("otsilogo", getLogo(ReportFiles.OTSILOGO));
		parameters.put("WATER_MARK", getLogo(ReportFiles.WATER_MARK));
		parameters.put("DIGITAL_SIGN", getLogo(ReportFiles.DIGITAL_SIGN));
		parameters.put("IMAGE_SCAN", qrCode);
		return parameters;
	}

	public Map<String, Object> getPermitSpcDetailsForVcr(String prNo, String permitType) {

		Optional<OtherStateTemporaryPermitDetailsDTO> dto = null;
		OtherStateTemporaryPermitDetailsDTO otherStateTemporaryPermitDetailsDTO = null;
		dto = otherStateTemporaryPermitDetailsDAO.findByPrNoOrderByCreatedDateDesc(prNo);
		if (dto.isPresent()) {
			otherStateTemporaryPermitDetailsDTO = dto.get();
		} else {
			throw new BadRequestException("No Special permit record found");
		}

		String PRESENT_ADDRESS = StringUtils.EMPTY;
		if (otherStateTemporaryPermitDetailsDTO.getApplicantDetails().getPresentAddress() != null) {

			PRESENT_ADDRESS = replaceDefaults(
					otherStateTemporaryPermitDetailsDTO.getApplicantDetails().getPresentAddress().getDoorNo() == null
							? StringUtils.EMPTY
							: otherStateTemporaryPermitDetailsDTO.getApplicantDetails().getPresentAddress().getDoorNo())
					+ "\n"
					+ replaceDefaults(otherStateTemporaryPermitDetailsDTO.getApplicantDetails().getPresentAddress()
							.getStreetName() == null
									? StringUtils.EMPTY
									: otherStateTemporaryPermitDetailsDTO
											.getApplicantDetails().getPresentAddress().getStreetName().toUpperCase())
					+ ","
					+ replaceDefaults(
							(otherStateTemporaryPermitDetailsDTO.getApplicantDetails().getPresentAddress() == null
									|| otherStateTemporaryPermitDetailsDTO.getApplicantDetails().getPresentAddress()
											.getTownOrCity() == null)
													? StringUtils.EMPTY
													: otherStateTemporaryPermitDetailsDTO.getApplicantDetails()
															.getPresentAddress().getTownOrCity().toUpperCase())
					+ "\n"
					+ replaceDefaults((otherStateTemporaryPermitDetailsDTO.getApplicantDetails().getPresentAddress()
							.getVillage() == null
							|| otherStateTemporaryPermitDetailsDTO.getApplicantDetails().getPresentAddress()
									.getVillage().getVillageName() == null)
											? StringUtils.EMPTY
											: otherStateTemporaryPermitDetailsDTO.getApplicantDetails()
													.getPresentAddress().getVillage().getVillageName().toUpperCase())
					+ ","
					+ replaceDefaults(
							((otherStateTemporaryPermitDetailsDTO.getApplicantDetails().getPresentAddress()
									.getMandal() == null
									|| otherStateTemporaryPermitDetailsDTO.getApplicantDetails().getPresentAddress()
											.getMandal().getMandalName() == null)
													? ""
													: otherStateTemporaryPermitDetailsDTO.getApplicantDetails()
															.getPresentAddress().getMandal().getMandalName()
															.toUpperCase())
									+ ","
									+ replaceDefaults(((otherStateTemporaryPermitDetailsDTO.getApplicantDetails()
											.getPresentAddress().getDistrict() == null
											|| otherStateTemporaryPermitDetailsDTO.getApplicantDetails()
													.getPresentAddress().getDistrict().getDistrictName() == null)
															? ""
															: otherStateTemporaryPermitDetailsDTO
																	.getApplicantDetails().getPresentAddress()
																	.getDistrict().getDistrictName().toUpperCase()))
									+ "\n"
									+ replaceDefaults(
											((otherStateTemporaryPermitDetailsDTO.getApplicantDetails()
													.getPresentAddress().getState() == null
													|| otherStateTemporaryPermitDetailsDTO.getApplicantDetails()
															.getPresentAddress().getState().getStateName() == null)
																	? ""
																	: otherStateTemporaryPermitDetailsDTO
																			.getApplicantDetails().getPresentAddress()
																			.getState().getStateName().toUpperCase()))
									+ "\n"
									+ replaceDefaults((otherStateTemporaryPermitDetailsDTO.getApplicantDetails()
											.getPresentAddress().getPostOffice() == null ? ""
													: otherStateTemporaryPermitDetailsDTO.getApplicantDetails()
															.getPresentAddress().getPostOffice().getPostOfficeCode())));

		}

		String qrCode = StringUtils.EMPTY;
		try {
			qrCode = qRCodeService.sendPDF(getQRCodeForScpPermits(prNo, permitType));
			if (qrCode == null)
				qrCode = StringUtils.EMPTY;
		} catch (Exception e) {
			logger.error(" Exception :[] ", e);
		}
		Map<String, Object> parameters = new HashMap<>();
		parameters.put("presentAddr", PRESENT_ADDRESS);
		parameters.put("presentAddr1", PRESENT_ADDRESS);
		parameters.put("chassis_no",
				replaceDefaults((otherStateTemporaryPermitDetailsDTO.getVehicleDetails() == null
						|| otherStateTemporaryPermitDetailsDTO.getVehicleDetails().getChassisNumber() == null)
								? StringUtils.EMPTY
								: otherStateTemporaryPermitDetailsDTO.getVehicleDetails().getChassisNumber()
										.toUpperCase()));
		parameters.put("engine_no",
				replaceDefaults((otherStateTemporaryPermitDetailsDTO.getVehicleDetails() == null
						|| otherStateTemporaryPermitDetailsDTO.getVehicleDetails().getEngineNumber() == null)
								? StringUtils.EMPTY
								: otherStateTemporaryPermitDetailsDTO.getVehicleDetails().getEngineNumber()
										.toUpperCase()));
		parameters.put("reg_no", otherStateTemporaryPermitDetailsDTO.getPrNo() == null ? StringUtils.EMPTY
				: otherStateTemporaryPermitDetailsDTO.getPrNo().toUpperCase());
		parameters.put("seat_capacity",
				replaceDefaults((otherStateTemporaryPermitDetailsDTO.getVehicleDetails() == null
						|| otherStateTemporaryPermitDetailsDTO.getVehicleDetails().getSeatingCapacity() == null)
								? StringUtils.EMPTY
								: otherStateTemporaryPermitDetailsDTO.getVehicleDetails().getSeatingCapacity()));
		String covCode = otherStateTemporaryPermitDetailsDTO.getClassOfVehicle();
		if (StringUtils.isEmpty(covCode)) {
			covCode = otherStateTemporaryPermitDetailsDTO.getVehicleDetails().getClassOfVehicle();
		}
		MasterCovDTO masterCovDTO = masterCovDAO.findByCovcode(covCode);
		parameters.put("cov", "");
		if (masterCovDTO != null) {
			parameters.put("cov", replaceDefaults(masterCovDTO.getCovdescription()).isEmpty() ? StringUtils.EMPTY
					: masterCovDTO.getCovdescription().toUpperCase());
		}
		parameters.put("permit_no",
				(otherStateTemporaryPermitDetailsDTO.getTemporaryPermitDetails() == null
						|| otherStateTemporaryPermitDetailsDTO.getTemporaryPermitDetails().getPermitNo() == null)
								? StringUtils.EMPTY
								: otherStateTemporaryPermitDetailsDTO.getTemporaryPermitDetails().getPermitNo());

		parameters.put("full_name",
				replaceDefaults(otherStateTemporaryPermitDetailsDTO.getApplicantDetails().getDisplayName() == null
						? StringUtils.EMPTY
						: otherStateTemporaryPermitDetailsDTO.getApplicantDetails().getDisplayName().toUpperCase()));
		parameters.put("gvw",
				(otherStateTemporaryPermitDetailsDTO.getVehicleDetails().getGvw() == null ? StringUtils.EMPTY
						: otherStateTemporaryPermitDetailsDTO.getVehicleDetails().getGvw().toString()));

		parameters.put("p_validto", (otherStateTemporaryPermitDetailsDTO.getTemporaryPermitDetails() == null
				|| otherStateTemporaryPermitDetailsDTO.getTemporaryPermitDetails().getPermitValidityDetails() == null
				|| otherStateTemporaryPermitDetailsDTO.getTemporaryPermitDetails().getPermitValidityDetails()
						.getPermitValidTo() == null) ? StringUtils.EMPTY
								: otherStateTemporaryPermitDetailsDTO.getTemporaryPermitDetails()
										.getPermitValidityDetails().getPermitValidTo().format(formatter));

		parameters.put("p_validfrom", (otherStateTemporaryPermitDetailsDTO.getTemporaryPermitDetails() == null
				|| otherStateTemporaryPermitDetailsDTO.getTemporaryPermitDetails().getPermitValidityDetails() == null
				|| otherStateTemporaryPermitDetailsDTO.getTemporaryPermitDetails().getPermitValidityDetails()
						.getPermitValidFrom() == null) ? StringUtils.EMPTY
								: otherStateTemporaryPermitDetailsDTO.getTemporaryPermitDetails()
										.getPermitValidityDetails().getPermitValidFrom().format(formatter));

		parameters.put("hs_permit_no", (otherStateTemporaryPermitDetailsDTO.getPrimaryPermitDetails() == null
				|| otherStateTemporaryPermitDetailsDTO.getPrimaryPermitDetails().getPermitNo() == null
						? StringUtils.EMPTY
						: otherStateTemporaryPermitDetailsDTO.getPrimaryPermitDetails().getPermitNo().toString()));

		parameters.put("hs_permit_validity",
				(otherStateTemporaryPermitDetailsDTO.getPrimaryPermitDetails() == null
						|| otherStateTemporaryPermitDetailsDTO.getPrimaryPermitDetails().getPermitValidityDetails()
								.getPermitValidTo() == null ? StringUtils.EMPTY
										: otherStateTemporaryPermitDetailsDTO.getPrimaryPermitDetails()
												.getPermitValidityDetails().getPermitValidTo().format(formatter)));

		Double totalServiceFee = 0.0d;
		parameters.put("stl_fee", "");
		parameters.put("tax_paid", "");
		parameters.put("service_fee", "");
		parameters.put("days", StringUtils.EMPTY);
		Double permitServiceFee = 0.0d;
		Double taxServiceFee = 0.0d;
		for (FeesDTO feeDetails : otherStateTemporaryPermitDetailsDTO.getFeeDetails().getFeeDetails()) {
			if (feeDetails.getFeesType().equalsIgnoreCase("") || feeDetails.getFeesType().equalsIgnoreCase("")) {
				totalServiceFee = +feeDetails.getAmount();
			}
			// parameters.put("stl_fee", "");
			if (feeDetails.getFeesType().equalsIgnoreCase("SevenDaysTax")
					|| feeDetails.getFeesType().equalsIgnoreCase("ThirtyDaysTax")) {
				parameters.put("tax_paid", feeDetails.getAmount().toString());
				parameters.put("days", "( " + feeDetails.getFeesType().replace("Tax", "") + " )");
			} else if (feeDetails.getFeesType().equalsIgnoreCase("Tax service fee")) {
				taxServiceFee = feeDetails.getAmount();
			} else if (feeDetails.getFeesType().equalsIgnoreCase("Permit Service Fee")) {
				permitServiceFee = feeDetails.getAmount();
			} else if (feeDetails.getFeesType().equalsIgnoreCase("Permit Fee")) {
				parameters.put("stl_fee", feeDetails.getAmount().toString());
			}
			totalServiceFee = permitServiceFee + taxServiceFee;
			parameters.put("service_fee", String.valueOf(totalServiceFee));
			if (feeDetails.getFeesType().equalsIgnoreCase("SevenDaysTax")) {
				parameters.put("route_condition", " ");
			} else if (feeDetails.getFeesType().equalsIgnoreCase("ThirtyDaysTax")) {
				parameters.put("route_condition", "ALL FIT ROADS IN THE STATE OF AP");
			}
			/*
			 * else if(){
			 * 
			 * }else if(){
			 * 
			 * }
			 * 
			 * for (FeesDTO feeDetails :
			 * otherStateTemporaryPermitDetailsDTO.getFeeDetails().getFeeDetails()) { if
			 * (feeDetails.getFeesType().equalsIgnoreCase("Tax service fee") ||
			 * feeDetails.getFeesType().equalsIgnoreCase("Permit Fee") ||
			 * feeDetails.getFeesType().equalsIgnoreCase("Permit Service Fee")) {
			 * totalServiceFee = totalServiceFee + feeDetails.getAmount();
			 * parameters.put("service_tax", totalServiceFee.toString()); } if
			 * (feeDetails.getFeesType().equalsIgnoreCase("SevenDaysTax")) {
			 * parameters.put("stl_tax", feeDetails.getAmount().toString()); } }
			 */
		}

		// parameters.put("stl_fee", "");
		parameters.put("total_fee",
				(otherStateTemporaryPermitDetailsDTO.getTemporaryPermitDetails() == null
						|| otherStateTemporaryPermitDetailsDTO.getFeeDetails() == null
						|| otherStateTemporaryPermitDetailsDTO.getFeeDetails().getTotalFees() == null)
								? StringUtils.EMPTY
								: otherStateTemporaryPermitDetailsDTO.getFeeDetails().getTotalFees().toString());

		parameters.put("for_route",
				((otherStateTemporaryPermitDetailsDTO.getTemporaryPermitDetails().getRouteDetails() == null
						|| otherStateTemporaryPermitDetailsDTO.getTemporaryPermitDetails().getRouteDetails()
								.getForwardRoute() == null)
										? StringUtils.EMPTY
										: otherStateTemporaryPermitDetailsDTO.getTemporaryPermitDetails()
												.getRouteDetails().getForwardRoute())
						+ ","
						+ ((otherStateTemporaryPermitDetailsDTO.getTemporaryPermitDetails().getRouteDetails() == null
								|| otherStateTemporaryPermitDetailsDTO.getTemporaryPermitDetails().getRouteDetails()
										.getReturnRoute() == null)
												? StringUtils.EMPTY
												: otherStateTemporaryPermitDetailsDTO.getTemporaryPermitDetails()
														.getRouteDetails().getReturnRoute())
						+ "" + " EXCEPT THOSE PROHIBITED");
		parameters.put("user_name", "");
		parameters.put("office_name", "");
		if (otherStateTemporaryPermitDetailsDTO.getCreatedBy() != null) {

			MasterUsersDTO userDTO = masterUsersDAO.findByUserId(otherStateTemporaryPermitDetailsDTO.getCreatedBy());
			parameters.put("user_name",
					userDTO.getFirstName() != null && userDTO.getLastName() != null
							? userDTO.getFirstName() + " " + userDTO.getLastName()
							: userDTO.getFirstName() == null ? userDTO.getLastName()
									: userDTO.getLastName() == null ? StringUtils.EMPTY : userDTO.getFirstName());

			Optional<OfficeDTO> officeDTO = officeDAO
					.findByOfficeCodeAndIsActiveTrue(userDTO.getOffice().getOfficeCode());

			parameters.put("office_name",
					(officeDTO.get().getOfficeName() == null ? StringUtils.EMPTY : officeDTO.get().getOfficeName()));
		}
		parameters.put("AP_LOGO", getLogo(ReportFiles.APLOGO));
		parameters.put("otsilogo", getLogo(ReportFiles.OTSILOGO));
		parameters.put("DATE", otherStateTemporaryPermitDetailsDTO.getCreatedDate().format(formatter).toString());
		parameters.put("TIME", otherStateTemporaryPermitDetailsDTO.getCreatedDate().format(timeFormatter).toString());
		parameters.put("WATER_MARK", getLogo(ReportFiles.WATER_MARK));
		parameters.put("DIGITAL_SIGN", getLogo(ReportFiles.DIGITAL_SIGN));
		return parameters;
	}

	public Map<String, Object> getPermitTempDetailsForVcr(String prNo, String permitType) {
		Optional<OtherStateTemporaryPermitDetailsDTO> dto = null;
		OtherStateTemporaryPermitDetailsDTO otherStateTemporaryPermitDetailsDTO = null;
		dto = otherStateTemporaryPermitDetailsDAO.findByPrNoOrderByCreatedDateDesc(prNo);
		if (dto.isPresent()) {
			otherStateTemporaryPermitDetailsDTO = dto.get();
		} else {
			throw new BadRequestException("No Special permit record found");
		}

		String PRESENT_ADDRESS = StringUtils.EMPTY;
		if (otherStateTemporaryPermitDetailsDTO.getApplicantDetails().getPresentAddress() != null) {

			PRESENT_ADDRESS = replaceDefaults(
					otherStateTemporaryPermitDetailsDTO.getApplicantDetails().getPresentAddress().getDoorNo() == null
							? StringUtils.EMPTY
							: otherStateTemporaryPermitDetailsDTO.getApplicantDetails().getPresentAddress().getDoorNo())
					+ "\n"
					+ replaceDefaults(otherStateTemporaryPermitDetailsDTO.getApplicantDetails().getPresentAddress()
							.getStreetName() == null
									? StringUtils.EMPTY
									: otherStateTemporaryPermitDetailsDTO
											.getApplicantDetails().getPresentAddress().getStreetName().toUpperCase())
					+ ","
					+ replaceDefaults(
							(otherStateTemporaryPermitDetailsDTO.getApplicantDetails().getPresentAddress() == null
									|| otherStateTemporaryPermitDetailsDTO.getApplicantDetails().getPresentAddress()
											.getTownOrCity() == null)
													? StringUtils.EMPTY
													: otherStateTemporaryPermitDetailsDTO.getApplicantDetails()
															.getPresentAddress().getTownOrCity().toUpperCase())
					+ "\n"
					+ replaceDefaults((otherStateTemporaryPermitDetailsDTO.getApplicantDetails().getPresentAddress()
							.getVillage() == null
							|| otherStateTemporaryPermitDetailsDTO.getApplicantDetails().getPresentAddress()
									.getVillage().getVillageName() == null)
											? StringUtils.EMPTY
											: otherStateTemporaryPermitDetailsDTO.getApplicantDetails()
													.getPresentAddress().getVillage().getVillageName().toUpperCase())
					+ ","
					+ replaceDefaults(
							((otherStateTemporaryPermitDetailsDTO.getApplicantDetails().getPresentAddress()
									.getMandal() == null
									|| otherStateTemporaryPermitDetailsDTO.getApplicantDetails().getPresentAddress()
											.getMandal().getMandalName() == null)
													? ""
													: otherStateTemporaryPermitDetailsDTO.getApplicantDetails()
															.getPresentAddress().getMandal().getMandalName()
															.toUpperCase())
									+ ","
									+ replaceDefaults(((otherStateTemporaryPermitDetailsDTO.getApplicantDetails()
											.getPresentAddress().getDistrict() == null
											|| otherStateTemporaryPermitDetailsDTO.getApplicantDetails()
													.getPresentAddress().getDistrict().getDistrictName() == null)
															? ""
															: otherStateTemporaryPermitDetailsDTO
																	.getApplicantDetails().getPresentAddress()
																	.getDistrict().getDistrictName().toUpperCase()))
									+ "\n"
									+ replaceDefaults(
											((otherStateTemporaryPermitDetailsDTO.getApplicantDetails()
													.getPresentAddress().getState() == null
													|| otherStateTemporaryPermitDetailsDTO.getApplicantDetails()
															.getPresentAddress().getState().getStateName() == null)
																	? ""
																	: otherStateTemporaryPermitDetailsDTO
																			.getApplicantDetails().getPresentAddress()
																			.getState().getStateName().toUpperCase()))
									+ "\n"
									+ replaceDefaults((otherStateTemporaryPermitDetailsDTO.getApplicantDetails()
											.getPresentAddress().getPostOffice() == null ? ""
													: otherStateTemporaryPermitDetailsDTO.getApplicantDetails()
															.getPresentAddress().getPostOffice().getPostOfficeCode())));

		}

		String qrCode = StringUtils.EMPTY;
		try {
			qrCode = qRCodeService.sendPDF(getQRCodeForTempPermits(prNo, permitType));
			if (qrCode == null)
				qrCode = StringUtils.EMPTY;
		} catch (Exception e) {
			logger.error(" Exception :[] ", e);
		}
		Map<String, Object> parameters = new HashMap<>();

		String covCode = otherStateTemporaryPermitDetailsDTO.getVehicleDetails().getClassOfVehicle();
		MasterCovDTO masterCovDTO = masterCovDAO.findByCovcode(covCode);
		parameters.put("p_cov", "");
		if (masterCovDTO != null) {
			parameters.put("p_cov", replaceDefaults(masterCovDTO.getCovdescription()).isEmpty() ? StringUtils.EMPTY
					: masterCovDTO.getCovdescription().toUpperCase());
		}
		parameters.put("p_tvpNo",
				(otherStateTemporaryPermitDetailsDTO.getTemporaryPermitDetails() == null
						|| otherStateTemporaryPermitDetailsDTO.getTemporaryPermitDetails().getPermitNo() == null)
								? StringUtils.EMPTY
								: otherStateTemporaryPermitDetailsDTO.getTemporaryPermitDetails().getPermitNo());
		parameters.put("p_holdername",
				replaceDefaults(otherStateTemporaryPermitDetailsDTO.getApplicantDetails().getDisplayName() == null
						? StringUtils.EMPTY
						: otherStateTemporaryPermitDetailsDTO.getApplicantDetails().getDisplayName().toUpperCase()));
		parameters.put("p_fname",
				(otherStateTemporaryPermitDetailsDTO.getApplicantDetails().getFatherName() == null ? StringUtils.EMPTY
						: otherStateTemporaryPermitDetailsDTO.getApplicantDetails().getFatherName()));
		parameters.put("p_regnum", otherStateTemporaryPermitDetailsDTO.getPrNo() == null ? StringUtils.EMPTY
				: otherStateTemporaryPermitDetailsDTO.getPrNo().toUpperCase());

		parameters.put("seat",
				replaceDefaults((otherStateTemporaryPermitDetailsDTO.getVehicleDetails() == null
						|| otherStateTemporaryPermitDetailsDTO.getVehicleDetails().getSeatingCapacity() == null)
								? StringUtils.EMPTY
								: otherStateTemporaryPermitDetailsDTO.getVehicleDetails().getSeatingCapacity()));
		parameters.put("gross_weight",
				replaceDefaults((otherStateTemporaryPermitDetailsDTO.getVehicleDetails() == null
						|| otherStateTemporaryPermitDetailsDTO.getVehicleDetails().getRlw() == null) ? StringUtils.EMPTY
								: otherStateTemporaryPermitDetailsDTO.getVehicleDetails().getRlw()));
		parameters.put("p_cn",
				replaceDefaults((otherStateTemporaryPermitDetailsDTO.getVehicleDetails() == null
						|| otherStateTemporaryPermitDetailsDTO.getVehicleDetails().getChassisNumber() == null)
								? StringUtils.EMPTY
								: otherStateTemporaryPermitDetailsDTO.getVehicleDetails().getChassisNumber()));

		parameters.put("p_engine",
				replaceDefaults((otherStateTemporaryPermitDetailsDTO.getVehicleDetails() == null
						|| otherStateTemporaryPermitDetailsDTO.getVehicleDetails().getEngineNumber() == null)
								? StringUtils.EMPTY
								: otherStateTemporaryPermitDetailsDTO.getVehicleDetails().getEngineNumber()));

		parameters.put("fc_validity",
				replaceDefaults((otherStateTemporaryPermitDetailsDTO.getFcDetails() == null
						|| otherStateTemporaryPermitDetailsDTO.getFcDetails().getFcValidUpto() == null)
								? StringUtils.EMPTY
								: otherStateTemporaryPermitDetailsDTO.getFcDetails().getFcValidUpto()
										.format(formatter)));

		parameters.put("ic_validity",
				replaceDefaults((otherStateTemporaryPermitDetailsDTO.getInsuranceDetails() == null
						|| otherStateTemporaryPermitDetailsDTO.getInsuranceDetails().getValidTill() == null)
								? StringUtils.EMPTY
								: otherStateTemporaryPermitDetailsDTO.getInsuranceDetails().getValidTill()
										.format(formatter)));

		parameters.put("p_addr", PRESENT_ADDRESS);
		Double totalServiceFee = 0.0d;
		for (FeesDTO feeDetails : otherStateTemporaryPermitDetailsDTO.getFeeDetails().getFeeDetails()) {
			if (feeDetails.getFeesType().equalsIgnoreCase("Tax service fee")
					|| feeDetails.getFeesType().equalsIgnoreCase("Permit Fee")
					|| feeDetails.getFeesType().equalsIgnoreCase("Permit Service Fee")) {
				totalServiceFee = totalServiceFee + feeDetails.getAmount();
				parameters.put("service_tax", totalServiceFee.toString());
			}
			if (feeDetails.getFeesType().equalsIgnoreCase("SevenDaysTax")) {
				parameters.put("stl_tax", feeDetails.getAmount().toString());
			}
		}
		parameters.put("ap_tax", "");// need to get clarity from
		parameters.put("total_tax", (otherStateTemporaryPermitDetailsDTO.getFeeDetails() == null) ? StringUtils.EMPTY
				: otherStateTemporaryPermitDetailsDTO.getFeeDetails().getTotalFees().toString());// total
		parameters.put("purpose",
				((otherStateTemporaryPermitDetailsDTO.getTemporaryPermitDetails().getGoodsDetails() == null
						|| otherStateTemporaryPermitDetailsDTO.getTemporaryPermitDetails() == null
						|| otherStateTemporaryPermitDetailsDTO.getTemporaryPermitDetails().getGoodsDetails()
								.getPermitAllowedgoods() == null) ? StringUtils.EMPTY
										: otherStateTemporaryPermitDetailsDTO.getTemporaryPermitDetails()
												.getGoodsDetails().getPermitAllowedgoods()));
		if (otherStateTemporaryPermitDetailsDTO.getTemporaryPermitDetails().getPermitValidityDetails() != null) {
			parameters.put("p_validfrom",
					(otherStateTemporaryPermitDetailsDTO.getTemporaryPermitDetails() == null
							|| otherStateTemporaryPermitDetailsDTO.getTemporaryPermitDetails()
									.getPermitValidityDetails() == null
							|| otherStateTemporaryPermitDetailsDTO.getTemporaryPermitDetails()
									.getPermitValidityDetails().getPermitValidFrom() == null) ? StringUtils.EMPTY
											: otherStateTemporaryPermitDetailsDTO.getTemporaryPermitDetails()
													.getPermitValidityDetails().getPermitValidFrom().format(formatter));
			parameters.put("p_validto",
					(otherStateTemporaryPermitDetailsDTO.getTemporaryPermitDetails() == null
							|| otherStateTemporaryPermitDetailsDTO.getTemporaryPermitDetails()
									.getPermitValidityDetails() == null
							|| otherStateTemporaryPermitDetailsDTO.getTemporaryPermitDetails()
									.getPermitValidityDetails().getPermitValidTo() == null) ? StringUtils.EMPTY
											: otherStateTemporaryPermitDetailsDTO.getTemporaryPermitDetails()
													.getPermitValidityDetails().getPermitValidTo().format(formatter));
		} else {
			parameters.put("p_validfrom",
					(otherStateTemporaryPermitDetailsDTO.getTemporaryPermitDetails() == null
							|| otherStateTemporaryPermitDetailsDTO.getTemporaryPermitDetails().getRouteDetails() == null
							|| otherStateTemporaryPermitDetailsDTO.getTemporaryPermitDetails().getRouteDetails()
									.getForwardRouteDate() == null) ? StringUtils.EMPTY
											: otherStateTemporaryPermitDetailsDTO.getTemporaryPermitDetails()
													.getRouteDetails().getForwardRouteDate().format(formatter));
			parameters.put("p_validto",
					(otherStateTemporaryPermitDetailsDTO.getTemporaryPermitDetails() == null
							|| otherStateTemporaryPermitDetailsDTO.getTemporaryPermitDetails().getRouteDetails() == null
							|| otherStateTemporaryPermitDetailsDTO.getTemporaryPermitDetails().getRouteDetails()
									.getReturnRouteDate() == null) ? StringUtils.EMPTY
											: otherStateTemporaryPermitDetailsDTO.getTemporaryPermitDetails()
													.getRouteDetails().getReturnRouteDate().format(formatter));
		}
		parameters.put("route",
				"ALL FIT ROADS IN THE STATES OF "
						+ ((otherStateTemporaryPermitDetailsDTO.getTemporaryPermitDetails().getRouteDetails() == null
								|| otherStateTemporaryPermitDetailsDTO.getTemporaryPermitDetails().getRouteDetails()
										.getForwardRoute() == null)
												? StringUtils.EMPTY
												: otherStateTemporaryPermitDetailsDTO.getTemporaryPermitDetails()
														.getRouteDetails().getForwardRoute())
						+ ","
						+ ((otherStateTemporaryPermitDetailsDTO.getTemporaryPermitDetails().getRouteDetails() == null
								|| otherStateTemporaryPermitDetailsDTO.getTemporaryPermitDetails().getRouteDetails()
										.getReturnRoute() == null)
												? StringUtils.EMPTY
												: otherStateTemporaryPermitDetailsDTO.getTemporaryPermitDetails()
														.getRouteDetails().getReturnRoute())
						+ "" + " EXCEPT THOSE PROHIBITED");
		parameters.put("home_tax", "");// need to get clarity
		parameters.put("home_permitfrom", "");
		parameters.put("home_permitno", "");
		parameters.put("home_permit_auth", (otherStateTemporaryPermitDetailsDTO.getPrimaryPermitDetails() == null
				|| otherStateTemporaryPermitDetailsDTO.getPrimaryPermitDetails().getPermitAuthorizationNo() == null)
						? StringUtils.EMPTY
						: otherStateTemporaryPermitDetailsDTO.getPrimaryPermitDetails().getPermitAuthorizationNo());
		parameters.put("office_name", "");
		if (otherStateTemporaryPermitDetailsDTO.getTemporaryPermitDetails().getRouteDetails().getNoOfDays()
				.equalsIgnoreCase("7 Days")) {
			parameters.put("optionMsg", "(One Round Trip Only)");
		}

		parameters.put("AP_LOGO", getLogo(ReportFiles.APLOGO));
		parameters.put("otsilogo", getLogo(ReportFiles.OTSILOGO));
		parameters.put("p_date", LocalDateTime.now().format(formatter));
		parameters.put("TIME", LocalTime.now().toString());
		parameters.put("WATER_MARK", getLogo(ReportFiles.WATER_MARK));
		parameters.put("DIGITAL_SIGN", getLogo(ReportFiles.DIGITAL_SIGN));
		return parameters;
	}

	public String getPermitTypeOfLastest(String prNo) {

		Optional<OtherStateTemporaryPermitDetailsDTO> dto = null;
		OtherStateTemporaryPermitDetailsDTO otherStateTemporaryPermitDetailsDTO = null;
		dto = otherStateTemporaryPermitDetailsDAO.findByPrNoOrderByCreatedDateDesc(prNo);
		if (dto.isPresent()) {
			otherStateTemporaryPermitDetailsDTO = dto.get();
		} else {
			throw new BadRequestException("No Special permit record found");
		}
		return otherStateTemporaryPermitDetailsDTO.getTemporaryPermitDetails().getPermitType().getPermitType();
	}

	public Map<String, Object> showCauseNotice12AReport(String scNo) {

		NonPaymentDetailsDTO nonPaymentDetailsDTO = null;

		Optional<NonPaymentDetailsDTO> nonPaymentDetails = nonPaymentDetailsDAO.findByScNo(scNo);

		if (nonPaymentDetails.isPresent()) {
			nonPaymentDetailsDTO = nonPaymentDetails.get();
		}

		String sub = StringUtils.EMPTY;
		sub = "Sub : Motor Vehicles - Vehicles No. "
				+ replaceDefaults(
						nonPaymentDetailsDTO.getPrNo() == null ? StringUtils.EMPTY : nonPaymentDetailsDTO.getPrNo())
				+ " (Articulated Vehicles)-Non payment of Tax and Penalty from the Q.E." + "\n"
				+ replaceDefaults(nonPaymentDetailsDTO.getQuarterEndDate() == null ? StringUtils.EMPTY
						: nonPaymentDetailsDTO.getQuarterEndDate())
				+ "- Collection of Tax with penalty-Show cause notice issued-Regarding.";

		String VEHICLENO = StringUtils.EMPTY;
		VEHICLENO = "In the reference cited,it is noticed that the vehicle bearing Registration Number "
				+ replaceDefaults(
						nonPaymentDetailsDTO.getPrNo() == null ? StringUtils.EMPTY : nonPaymentDetailsDTO.getPrNo())
				+ " (Articulated Vehicles) is not paying taxes for more than ( "
				+ replaceDefaults(nonPaymentDetailsDTO.getPendingQuarters() == null ? StringUtils.EMPTY
						: nonPaymentDetailsDTO.getPendingQuarters())
				+ ") quarters i.e. . from the Q.E. "
				+ replaceDefaults(nonPaymentDetailsDTO.getQuarterEndDate() == null ? StringUtils.EMPTY
						: nonPaymentDetailsDTO.getQuarterEndDate())
				+ " Onwards.";

		String FITNESSFIELD = StringUtils.EMPTY;
		FITNESSFIELD = "As per this office records, The Vehicle is covered by Permit NO " + replaceDefaults(
				nonPaymentDetailsDTO.getPermitNo() == null ? StringUtils.EMPTY : nonPaymentDetailsDTO.getPermitNo())
				+ " valid upto "
				+ replaceDefaults(nonPaymentDetailsDTO.getPermitValidity() == null ? StringUtils.EMPTY
						: nonPaymentDetailsDTO.getPermitValidity())
				+ " ,and Fitness Certificate validity "
				+ replaceDefaults(nonPaymentDetailsDTO.getFcValidity() == null ? StringUtils.EMPTY
						: nonPaymentDetailsDTO.getFcValidity());

		String amount = StringUtils.EMPTY;
		amount = "In view of the above,the registered owner of the above said vehicle is liable for payment of tax Rs "
				+ replaceDefaults(nonPaymentDetailsDTO.getTaxArrears() == null ? StringUtils.EMPTY
						: nonPaymentDetailsDTO.getTaxArrears())
				+ " as per the provisions stipulated Under Sec 3 of A.P.M.V.T. Act, 1963 with penalty Rs "
				+ replaceDefaults(nonPaymentDetailsDTO.getPenaltyArrears() == null ? StringUtils.EMPTY
						: nonPaymentDetailsDTO.getPenaltyArrears())
				+ " as per Rule 13 of A.P.M.V.Taxation Rules 1963.Total amount of due arrears is Rs "
				+ replaceDefaults(nonPaymentDetailsDTO.getTotalFee() == null ? StringUtils.EMPTY
						: nonPaymentDetailsDTO.getTotalFee());

		String citizen = StringUtils.EMPTY;
		citizen = "Therefore sri "
				+ replaceDefaults(nonPaymentDetailsDTO.getOwnerName() == null ? StringUtils.EMPTY
						: nonPaymentDetailsDTO.getOwnerName().toUpperCase())

				+ " the registered owner of the above said vehicle is directed to show cause as to why the tax and penalty due to the government "
				+ "should not be collected from him.He should submit his explanation if any within(10) days from the date of "
				+ "receipt of this notice failing which action will be taken to Confirm the demand under Revenue Recovery Act.";

		String PRESENT_ADDRESS = StringUtils.EMPTY;
		PRESENT_ADDRESS = " Sri "
				+ replaceDefaults(nonPaymentDetailsDTO.getOwnerName() == null ? StringUtils.EMPTY
						: nonPaymentDetailsDTO.getOwnerName().toUpperCase())
				+ "\n " + replaceDefaults(getString(nonPaymentDetailsDTO.getOwnerAddress() == null ? StringUtils.EMPTY
						: nonPaymentDetailsDTO.getOwnerAddress().toUpperCase()));

		String financieraddress = StringUtils.EMPTY;
		financieraddress = " "
				+ replaceDefaults(getString(nonPaymentDetailsDTO.getFinancerAddress() == null ? StringUtils.EMPTY
						: nonPaymentDetailsDTO.getFinancerAddress()).toUpperCase());

		String MVI_NAME = StringUtils.EMPTY;
		MVI_NAME = "Copy to the Motor Vehicles Inspector, "
				+ replaceDefaults(nonPaymentDetailsDTO.getMviName() == null ? StringUtils.EMPTY
						: nonPaymentDetailsDTO.getMviName().toUpperCase())
				+ " with a request to ascertain whereabouts of the vehicle and report compliance.";

		String qrCode = StringUtils.EMPTY;
		try {
			qrCode = qRCodeService.sendPDF(getRegistrationQRCodeForTransportCitizen(scNo));
			if (qrCode == null)
				qrCode = StringUtils.EMPTY;
		} catch (Exception e) {
			logger.error(" Exception :[] ", e);
		}

		Map<String, Object> parameters = new HashMap<>();
		parameters.put("IMAGE_SCAN", qrCode);
		parameters.put("WATER_MARK", getLogo(ReportFiles.WATER_MARK));
		parameters.put("AP_LOGO", getLogo(ReportFiles.APLOGO));
		parameters.put("sub", sub);
		parameters.put("PRESENT_ADDRESS", PRESENT_ADDRESS);
		parameters.put("mviName", MVI_NAME);
		parameters.put("R.No.", scNo);
		parameters.put("vehicleNo", VEHICLENO);
		parameters.put("fitnessField", FITNESSFIELD);
		parameters.put("AMOUNT", amount);
		parameters.put("CITIZEN", citizen);
		parameters.put("DIGITAL_SIGN", getLogo(ReportFiles.DIGITAL_SIGN));
		parameters.put("financierAddress", financieraddress);
		parameters.put("officeName", replaceDefaults(nonPaymentDetailsDTO.getOfficeName() == null ? StringUtils.EMPTY
				: nonPaymentDetailsDTO.getOfficeName().toUpperCase()));

		return parameters;
	}

	public Map<String, Object> showCauseNotice55Report(String scNo) {
		NonPaymentDetailsDTO nonPaymentDetailsDTO = null;

		Optional<NonPaymentDetailsDTO> nonPaymentDetails = nonPaymentDetailsDAO.findByScNo(scNo);

		if (nonPaymentDetails.isPresent()) {
			nonPaymentDetailsDTO = nonPaymentDetails.get();
		}
		String sub = StringUtils.EMPTY;
		sub = "Sub : Motor Vehicles - Vehicles No. "
				+ replaceDefaults(
						nonPaymentDetailsDTO.getPrNo() == null ? StringUtils.EMPTY : nonPaymentDetailsDTO.getPrNo())
				+ " (Articulated Vehicles)-Non payment of Tax and Penalty from the Q.E."
				+ replaceDefaults(nonPaymentDetailsDTO.getQuarterEndDate() == null ? StringUtils.EMPTY
						: nonPaymentDetailsDTO.getQuarterEndDate())
				+ "- Cancellation of Tax with penalty-Show cause notice issued-Regarding.";

		String VEHICLENO = StringUtils.EMPTY;
		VEHICLENO = "In the reference cited,it is noticed that the vehicle bearing Registration Number "
				+ replaceDefaults(
						nonPaymentDetailsDTO.getPrNo() == null ? StringUtils.EMPTY : nonPaymentDetailsDTO.getPrNo())
				+ " (Articulated Vehicles) is not paying taxes for more than ( "
				+ replaceDefaults(nonPaymentDetailsDTO.getPendingQuarters() == null ? StringUtils.EMPTY
						: nonPaymentDetailsDTO.getPendingQuarters())
				+ " ) quarters i.e. . from the Q.E. "
				+ replaceDefaults(nonPaymentDetailsDTO.getQuarterEndDate() == null ? StringUtils.EMPTY
						: nonPaymentDetailsDTO.getQuarterEndDate())
				+ " Onwards.";

		String FITNESSFIELD = StringUtils.EMPTY;
		FITNESSFIELD = "As per this office records, The Vehicle is covered by Permit NO " + replaceDefaults(
				nonPaymentDetailsDTO.getPermitNo() == null ? StringUtils.EMPTY : nonPaymentDetailsDTO.getPermitNo())
				+ " valid upto "
				+ replaceDefaults(nonPaymentDetailsDTO.getPermitValidity() == null ? StringUtils.EMPTY
						: nonPaymentDetailsDTO.getPermitValidity())
				+ " ,and Fitness Certificate expired on "
				+ replaceDefaults(nonPaymentDetailsDTO.getFcValidity() == null ? StringUtils.EMPTY
						: nonPaymentDetailsDTO.getFcValidity());

		String amount = StringUtils.EMPTY;
		amount = "In view of the above,the registered owner of the above said vehicle is not in existence,since the "
				+ "registered owner of the vehilcle has not paid the requisite tax due to the Government. payment of tax Rs"
				+ replaceDefaults(nonPaymentDetailsDTO.getTaxArrears() == null ? StringUtils.EMPTY
						: nonPaymentDetailsDTO.getTaxArrears())
				+ " as per the provisions stipulated Under Sec 3 of A.P.M.V.T. Act, 1963 with penalty Rs "
				+ replaceDefaults(nonPaymentDetailsDTO.getPenaltyArrears() == null ? StringUtils.EMPTY
						: nonPaymentDetailsDTO.getPenaltyArrears())
				+ " as per Rule 13 of A.P.M.V.Taxation Rules 1963.Total amount of due arrears is Rs "
				+ replaceDefaults(nonPaymentDetailsDTO.getTotalFee() == null ? StringUtils.EMPTY
						: nonPaymentDetailsDTO.getTotalFee());

		String citizen = StringUtils.EMPTY;
		citizen = "Therefore sri "
				+ replaceDefaults(nonPaymentDetailsDTO.getOwnerName() == null ? StringUtils.EMPTY
						: nonPaymentDetailsDTO.getOwnerName().toUpperCase())

				+ " the registered owner of the above said vehicle is directed to show cause as to why action"
				+ " should not be taken for cancellation of Registration Certificate u/s 55 of Motor Vehicle Act,1988. "
				+ "He should submit his explanation if any within(10) days from the   date of receipt of this notice failing which action "
				+ "will be taken for cancellation of Registration Certificate without  any further notice.";

		String PRESENT_ADDRESS = StringUtils.EMPTY;
		PRESENT_ADDRESS = " Sri "
				+ replaceDefaults(nonPaymentDetailsDTO.getOwnerName() == null ? StringUtils.EMPTY
						: nonPaymentDetailsDTO.getOwnerName().toUpperCase())
				+ "\n " + replaceDefaults(getString(nonPaymentDetailsDTO.getOwnerAddress() == null ? StringUtils.EMPTY
						: getString(nonPaymentDetailsDTO.getOwnerAddress()).toUpperCase()));

		String financieraddress = StringUtils.EMPTY;
		financieraddress = " "
				+ replaceDefaults(getString(nonPaymentDetailsDTO.getFinancerAddress() == null ? StringUtils.EMPTY
						: nonPaymentDetailsDTO.getFinancerAddress()).toUpperCase());

		String MVI_NAME = StringUtils.EMPTY;
		MVI_NAME = "Copy to the Motor Vehicles Inspector, "
				+ replaceDefaults(nonPaymentDetailsDTO.getMviName() == null ? StringUtils.EMPTY
						: nonPaymentDetailsDTO.getMviName().toUpperCase())
				+ " with a request to ascertain whereabouts of the vehicle and report compliance.";

		String qrCode = StringUtils.EMPTY;
		try {
			qrCode = qRCodeService.sendPDF(getRegistrationQRCodeForTransportCitizen(scNo));
			if (qrCode == null)
				qrCode = StringUtils.EMPTY;
		} catch (Exception e) {
			logger.error(" Exception :[] ", e);
		}

		Map<String, Object> parameters = new HashMap<>();

		parameters.put("IMAGE_SCAN", qrCode);
		parameters.put("WATER_MARK", getLogo(ReportFiles.WATER_MARK));
		parameters.put("AP_LOGO", getLogo(ReportFiles.APLOGO));
		parameters.put("SUB", sub);
		parameters.put("PRESENT_ADDRESS", PRESENT_ADDRESS);
		parameters.put("mviName", MVI_NAME);
		parameters.put("R.No.", scNo);
		parameters.put("vehicleNo", VEHICLENO);
		parameters.put("fitnessField", FITNESSFIELD);
		parameters.put("AMOUNT", amount);
		parameters.put("CITIZEN", citizen);
		parameters.put("financierAddress", financieraddress);
		parameters.put("DIGITAL_SIGN", getLogo(ReportFiles.DIGITAL_SIGN));
		parameters.put("officeName", replaceDefaults(nonPaymentDetailsDTO.getOfficeName() == null ? StringUtils.EMPTY
				: nonPaymentDetailsDTO.getOfficeName().toUpperCase()));

		return parameters;
	}

	public String getString(String str) {
		String address = StringUtils.EMPTY;
		String[] arrOfStr = str.split(",");
		for (String string : arrOfStr) {
			address = address + string;
			address = address + "\n";
		}
		return address;

	}

	public Map<String, Object> getDetailsOfFreshRcForm37(String applicationNo, String prNo) {
		Optional<RegServiceDTO> regServiceDTO = null;
		if (StringUtils.isNoneBlank(applicationNo, prNo)) {
			regServiceDTO = regServiceDAO.findByApplicationNoAndPrNo(applicationNo, prNo);
		} else {
			throw new BadRequestException("Please provide valid pr or application number");
		}

		if (regServiceDTO == null || !regServiceDTO.isPresent()) {
			throw new BadRequestException("No record found");
		}

		RegServiceDTO regServiceDetails = regServiceDTO.get();

		Map<String, Object> parameters = new HashMap<>();

		parameters.put("OFFICE_REG", replaceDefaults(regServiceDetails.getlUpdate() == null ? StringUtils.EMPTY
				: regServiceDetails.getlUpdate().toLocalDate().format(DateTimeFormatter.ofPattern("dd-MM-yyyy"))));
		parameters.put("appNo", replaceDefaults(regServiceDetails.getApplicationNo() == null ? StringUtils.EMPTY
				: regServiceDetails.getApplicationNo()));
		parameters.put("APP_DET",
				"Shri/Smt./Kumari "
						+ replaceDefaults(
								regServiceDetails.getRegistrationDetails().getApplicantDetails().getFirstName() == null
										? StringUtils.EMPTY
										: regServiceDetails.getRegistrationDetails().getApplicantDetails()
												.getFirstName().toUpperCase())
						+ " (Regd. Owner) is/are hereby informed that "
						+ replaceDefaults(
								regServiceDetails.getFreshRcdetails().getFinancerDetails().getFirstName() == null
										? StringUtils.EMPTY
										: regServiceDetails.getFreshRcdetails().getFinancerDetails().getFirstName()
												.toUpperCase())
						+ " (Financier) has/have reported that he/they have taken possession of the motor vehicle bearing registration number "
						+ replaceDefaults(regServiceDetails.getPrNo() == null
								? StringUtils.EMPTY
								: regServiceDetails.getPrNo())
						+ " covered by an agreement Hire-Purchase / Lease / Hypothecation, owing to your default under the provisions of the said agreement and that:");
		parameters.put("DIGITAL_SIGN", getLogo(ReportFiles.DIGITAL_SIGN));

		parameters.put("DATE_APPR", "Date " + replaceDefaults(regServiceDetails.getlUpdate() == null ? StringUtils.EMPTY
				: regServiceDetails.getlUpdate().toLocalDate().format(DateTimeFormatter.ofPattern("dd-MM-yyyy"))));

		String financierAddress = StringUtils.EMPTY;
		if (regServiceDetails.getRegistrationDetails() != null || regServiceDetails.getRegistrationDetails() == null) {
			financierAddress = "The Financier " + replaceDefaults(
					regServiceDetails.getFreshRcdetails().getFinancerDetails().getDistrict().getDistrictName() == null
							? StringUtils.EMPTY
							: regServiceDetails.getFreshRcdetails().getFinancerDetails().getDistrict().getDistrictName()
									.toUpperCase())
					+ " , "
					+ replaceDefaults(
							regServiceDetails.getFreshRcdetails().getFinancerDetails().getState().getStateName() == null
									? StringUtils.EMPTY
									: regServiceDetails.getFreshRcdetails().getFinancerDetails().getState()
											.getStateName().toUpperCase());
		}
		parameters.put("officeName", StringUtils.EMPTY);
		if (regServiceDetails.getRegistrationDetails() != null
				&& regServiceDetails.getRegistrationDetails().getOfficeDetails() != null) {
			parameters.put("officeName",
					replaceDefaults(
							regServiceDetails.getRegistrationDetails().getOfficeDetails().getOfficeName() == null
									? StringUtils.EMPTY
									: regServiceDetails.getRegistrationDetails().getOfficeDetails().getOfficeName())
											.toUpperCase());
		}
		parameters.put("financier", financierAddress);
		return parameters;

	}

	public String getApplicationNoBasedOnPrNo(String prNo) {
		RegistrationDetailsDTO regDetailsDTO = null;
		Optional<RegistrationDetailsDTO> regServiceOptional = registrationDetailDAO.findByPrNo(prNo);
		if (regServiceOptional.isPresent()) {
			regDetailsDTO = regServiceOptional.get();
		} else {
			logger.error("No main record found");
			throw new BadRequestException("No main record found");
		}
		return regDetailsDTO.getApplicationNo();
	}

	public Map<String, Object> getRcCancellationReqDetails(String applicationNo) {

		RegServiceDTO regServiceDTO = null;

		Optional<RegServiceDTO> regServiceDetails = null;
		if (StringUtils.isNoneBlank(applicationNo)) {
			regServiceDetails = regServiceDAO.findByApplicationNo(applicationNo);
		} else {
			throw new BadRequestException("Please provide valid pr or application number");
		}

		if (regServiceDetails == null || !regServiceDetails.isPresent()) {
			throw new BadRequestException("No record found");
		} else {
			regServiceDTO = regServiceDetails.get();
		}

		String qrCode = StringUtils.EMPTY;
		try {
			qrCode = qRCodeService.sendPDF(getRegistrationQRCodeForTransportCitizen(applicationNo));
			if (qrCode == null)
				qrCode = StringUtils.EMPTY;
		} catch (Exception e) {
			logger.error(" Exception :[] ", e);
		}

		Map<String, Object> parameters = new HashMap<>();

		String order = "Sri/Smt "
				+ (regServiceDTO.getRegistrationDetails().getApplicantDetails().getFirstName() == null
						? StringUtils.EMPTY
						: regServiceDTO.getRegistrationDetails().getApplicantDetails().getFirstName().toUpperCase())
				+ " Registered Owner of the vehilclenNo, "
				+ (regServiceDTO.getPrNo() == null ? StringUtils.EMPTY : regServiceDTO.getPrNo()) + " ( "
				+ (regServiceDTO.getRegistrationDetails().getClassOfVehicleDesc() == null ? StringUtils.EMPTY
						: regServiceDTO.getRegistrationDetails().getClassOfVehicleDesc())
				+ ") in his/her application cited above has intimated that the above said vehicle became "
				+ ((regServiceDTO.getRcCancellation() == null
						|| regServiceDTO.getRcCancellation().getReasonForCancellation() == null) ? StringUtils.EMPTY
								: regServiceDTO.getRcCancellation().getReasonForCancellation())
				+ " and submitted the Registration Certificate of the above vehicle in accordance with sub-section(1) of section 55 of MV Act,1988.";

		String sub = "Sub : Motor Vehicle-No "
				+ replaceDefaults(regServiceDTO.getPrNo() == null ? StringUtils.EMPTY : regServiceDTO.getPrNo())
				+ " cancellation of Registration Certificate of the vehicle under section" + "\n"
				+ "         54 of M.V.Act 1988-Order-Issued";

		String ref = "Ref : 1) Application dated " + LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"))
				+ " from Sri "
				+ (regServiceDTO.getRegistrationDetails().getApplicantDetails().getFirstName() == null
						? StringUtils.EMPTY
						: regServiceDTO.getRegistrationDetails().getApplicantDetails().getFirstName().toString());
		String text = "In excercise of the powers conferred under sub-section (2) of section 55 of the M.V.Act,1988 the Certificate of Registration of the vehicle No "
				+ (regServiceDTO.getPrNo() == null ? StringUtils.EMPTY : regServiceDTO.getPrNo()) + " "
				+ (regServiceDTO.getRegistrationDetails().getClassOfVehicleDesc() == null ? StringUtils.EMPTY
						: regServiceDTO.getRegistrationDetails().getClassOfVehicleDesc())
				+ " is cancelled as "
				+ ((regServiceDTO.getRcCancellation() == null
						|| regServiceDTO.getRcCancellation().getReasonForCancellation() == null) ? StringUtils.EMPTY
								: regServiceDTO.getRcCancellation().getReasonForCancellation())
				+ ".";

		String PRESENT_ADDRESS = StringUtils.EMPTY;
		if (regServiceDTO.getRegistrationDetails().getApplicantDetails() != null
				&& regServiceDTO.getRegistrationDetails().getApplicantDetails().getPresentAddress() != null) {
			PRESENT_ADDRESS = "Sri/Smt : " + replaceDefaults(
					regServiceDTO.getRegistrationDetails().getApplicantDetails().getFirstName() == null
							? StringUtils.EMPTY
							: regServiceDTO.getRegistrationDetails().getApplicantDetails().getFirstName().toUpperCase())
					+ "\n"
					+ replaceDefaults(regServiceDTO.getRegistrationDetails().getApplicantDetails().getPresentAddress()
							.getDoorNo() == null
									? StringUtils.EMPTY
									: regServiceDTO.getRegistrationDetails().getApplicantDetails().getPresentAddress()
											.getDoorNo().toUpperCase())
					+ ","
					+ replaceDefaults(regServiceDTO.getRegistrationDetails().getApplicantDetails().getPresentAddress()
							.getStreetName() == null
									? StringUtils.EMPTY
									: regServiceDTO.getRegistrationDetails().getApplicantDetails().getPresentAddress()
											.getStreetName().toUpperCase())
					+ ","
					+ replaceDefaults(regServiceDTO.getRegistrationDetails().getApplicantDetails().getPresentAddress()
							.getTownOrCity() == null
									? StringUtils.EMPTY
									: regServiceDTO.getRegistrationDetails().getApplicantDetails().getPresentAddress()
											.getTownOrCity().toUpperCase())
					+ "\n"
					+ replaceDefaults((regServiceDTO.getRegistrationDetails().getApplicantDetails().getPresentAddress()
							.getVillage() == null)
							|| regServiceDTO.getRegistrationDetails().getApplicantDetails().getPresentAddress()
									.getVillage().getVillageName() == null
											? StringUtils.EMPTY
											: regServiceDTO.getRegistrationDetails().getApplicantDetails()
													.getPresentAddress().getVillage().getVillageName().toUpperCase())
					+ ","
					+ replaceDefaults(((regServiceDTO.getRegistrationDetails().getApplicantDetails().getPresentAddress()
							.getMandal() == null)
							|| null == regServiceDTO.getRegistrationDetails().getApplicantDetails().getPresentAddress()
									.getMandal().getMandalName())
											? ""
											: regServiceDTO.getRegistrationDetails().getApplicantDetails()
													.getPresentAddress().getMandal().getMandalName().toUpperCase())
					+ "\n"
					+ replaceDefaults(
							(regServiceDTO.getRegistrationDetails().getApplicantDetails().getPresentAddress()
									.getDistrict() == null
											? ""
											: regServiceDTO.getRegistrationDetails().getApplicantDetails()
													.getPresentAddress().getDistrict().getDistrictName().toUpperCase()))
					+ "\n"
					+ replaceDefaults((regServiceDTO.getRegistrationDetails().getApplicantDetails().getPresentAddress()
							.getState() == null ? ""

									: regServiceDTO.getRegistrationDetails().getApplicantDetails().getPresentAddress()

											.getState().getStateName().toUpperCase()))
					+ ","
					+ replaceDefaults((regServiceDTO.getRegistrationDetails().getApplicantDetails().getPresentAddress()
							.getCountry() == null
									? ""
									: regServiceDTO.getRegistrationDetails().getApplicantDetails().getPresentAddress()
											.getCountry().getCountryName().toUpperCase()))

					+ ","
					+ replaceDefaults((regServiceDTO.getRegistrationDetails().getApplicantDetails().getPresentAddress()
							.getPostOffice() == null ? ""

									: regServiceDTO.getRegistrationDetails().getApplicantDetails().getPresentAddress()

											.getPostOffice().getPostOfficeCode()));

		}
		parameters.put("IMAGE_SCAN", qrCode);
		parameters.put("WATER_MARK", getLogo(ReportFiles.WATER_MARK));
		parameters.put("DIGITAL_SIGN", getLogo(ReportFiles.DIGITAL_SIGN));
		parameters.put("AP_LOGO", getLogo(ReportFiles.APLOGO));
		parameters.put("SUB", sub);
		parameters.put("REF", ref);
		parameters.put("STC_TXT", text);
		parameters.put("ORDER", order);
		parameters.put("DATE", LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy")));
		parameters.put("PRESENT_ADDRESS", PRESENT_ADDRESS);
		parameters.put("REG_NO", applicationNo);
		parameters.put("OFFICE_NAME",
				(regServiceDTO.getRegistrationDetails().getOfficeDetails().getOfficeName() == null ? StringUtils.EMPTY
						: regServiceDTO.getRegistrationDetails().getOfficeDetails().getOfficeName().toString()));

		return parameters;
	}

	public Map<String, Object> generatePdfForAadtr(String applicationNo) throws Exception {
		DealerRegDTO dto = null;
		UserDTO userDTO = null;
		List<String> covsList = new ArrayList<>();
		if (StringUtils.isEmpty(applicationNo)) {
			throw new Exception("application Number is Not Found");
		}
		Optional<DealerRegDTO> dealerRegDetails = dealerDAO.findByApplicationNo(applicationNo);
		if (dealerRegDetails.isPresent()) {
			dto = dealerRegDetails.get();
		} else {
			throw new BadRequestException("Data not found::" + dto.getApplicationNo());
		}
		Optional<UserDTO> ustDto = userDAO.findByUserId(dto.getDealerUserId());
		if (ustDto.isPresent()) {
			userDTO = ustDto.get();
		}
		Map<String, Object> parameters = new HashMap<>();
		String presentAddress = StringUtils.EMPTY;
		if (dto.getGstnData() != null && dto.getGstnData().getPrimaryAddress() != null
				&& dto.getGstnData().getPrimaryAddress().getAddr() != null) {
			presentAddress = (dto.getGstnData().getPrimaryAddress().getAddr().getBno() == null ? StringUtils.EMPTY
					: dto.getGstnData().getPrimaryAddress().getAddr().getBno().toUpperCase())
					+ "\n"
					+ (dto.getGstnData().getPrimaryAddress().getAddr().getSt() == null ? StringUtils.EMPTY
							: dto.getGstnData().getPrimaryAddress().getAddr().getSt().toUpperCase())
					+ ", "
					+ (dto.getGstnData().getPrimaryAddress().getAddr().getLoc() == null ? StringUtils.EMPTY
							: dto.getGstnData().getPrimaryAddress().getAddr().getLoc().toUpperCase())
					+ "\n"
					+ (dto.getGstnData().getPrimaryAddress().getAddr().getBnm() == null ? StringUtils.EMPTY
							: dto.getGstnData().getPrimaryAddress().getAddr().getBnm().toUpperCase())
					+ "\n"
					+ (dto.getGstnData().getPrimaryAddress().getAddr().getStcd() == null ? StringUtils.EMPTY
							: dto.getGstnData().getPrimaryAddress().getAddr().getStcd().toUpperCase())
					+ ", " + (dto.getGstnData().getPrimaryAddress().getAddr().getPncd() == null ? StringUtils.EMPTY
							: dto.getGstnData().getPrimaryAddress().getAddr().getPncd());
		}
		String covs = StringUtils.EMPTY;
		if (dto.getClassOfVehicles() != null) {
			dto.getClassOfVehicles().stream().forEach(cov -> {
				covsList.add(cov.getCovdescription());
			});
			covs = String.join(", ", covsList);
		}
		parameters.put("AUTH_NO", (dto.getApplicationNo() == null ? StringUtils.EMPTY : dto.getApplicationNo()));
		parameters.put("USERNO", (dto.getApplicationNo() == null ? StringUtils.EMPTY : dto.getDealerUserId()));
		parameters.put("CUR_DATE", LocalDate.now().format(DateTimeFormatter.ofPattern("dd-MM-yyyy")));
		String msg = StringUtils.EMPTY;
		if (dto.getGstnData() != null && dto.getGstnData().getEntityName() != null) {
			msg = (char) 27 + dto.getGstnData().getEntityName().toUpperCase();
		}
		parameters.put("AUTHORIZATION", (msg + " to register the vehicles temporarily."));
		parameters.put("DEALER_NAME",
				((dto.getGstnData() == null || dto.getGstnData().getEntityName() == null) ? StringUtils.EMPTY
						: dto.getGstnData().getEntityName().toUpperCase()));
		parameters.put("TRADE_NAME",
				((dto.getGstnData() == null || dto.getGstnData().getTradeName() == null) ? StringUtils.EMPTY
						: dto.getGstnData().getTradeName().toUpperCase()));
		parameters.put("REPRESENTED_BY",
				((dto.getApplicantDetails() == null || dto.getApplicantDetails().getFirstName() == null)
						? StringUtils.EMPTY
						: dto.getApplicantDetails().getFirstName().toUpperCase()));
		parameters.put("ADDRESS", presentAddress);
		parameters.put("CLASS_OF_VEHICLE", covs);
		parameters.put("V_MANUFACTURER", StringUtils.EMPTY);
		parameters.put("AUTH_SIGN",
				((dto.getApplicantDetails() == null || dto.getApplicantDetails().getFirstName() == null)
						? StringUtils.EMPTY
						: dto.getApplicantDetails().getFirstName().toUpperCase()));
		parameters.put("VAL_FROM", ((userDTO == null || userDTO.getValidFrom() == null) ? "_______"
				: userDTO.getValidFrom().format(formatter)));
		parameters.put("VAL_TO", ((userDTO == null || userDTO.getValidTo() == null) ? "_______"
				: userDTO.getValidTo().format(formatter)));
		parameters.put("OFFICE_NAME",
				(dto.getOfficeDetails() == null || dto.getOfficeDetails().getOfficeName() == null) ? StringUtils.EMPTY
						: dto.getOfficeDetails().getOfficeName().toUpperCase());
		parameters.put("DIGITAL_SIGN", getLogo(ReportFiles.DIGITAL_SIGN));

		return parameters;
	}

	/**
	 * Below method is to download vcr show cause notice
	 * 
	 * @param scNo
	 * @return
	 */
	public Map<String, Object> vcrShowCause(String scNo) {

		VcrFinalServiceDTO vcrFinalServiceDTO = null;
		Optional<VcrFinalServiceDTO> vcrFinalServiceDTOOpt = vcrFinalServiceDAO.findByIsScNoVcr(scNo);

		if (vcrFinalServiceDTOOpt.isPresent()) {
			vcrFinalServiceDTO = vcrFinalServiceDTOOpt.get();
		} else {
			throw new BadRequestException("No Data found with respective vcr show cause number");
		}

		Map<String, Object> parameters = new HashMap<>();

		parameters.put("VcrScNNo",
				(vcrFinalServiceDTO.getIsScNoVcr() == null) ? StringUtils.EMPTY : vcrFinalServiceDTO.getIsScNoVcr());

		parameters.put("VCR_NO",
				(vcrFinalServiceDTO.getVcr() == null || vcrFinalServiceDTO.getVcr().getVcrNumber() == null)
						? StringUtils.EMPTY
						: vcrFinalServiceDTO.getVcr().getVcrNumber());

		parameters.put("AMOUNT", (vcrFinalServiceDTO.getOffencetotal() == null) ? StringUtils.EMPTY
				: vcrFinalServiceDTO.getOffencetotal().toString());

		parameters.put("TOTAL_AMT", (vcrFinalServiceDTO.getOffencetotal() == null) ? StringUtils.EMPTY
				: vcrFinalServiceDTO.getOffencetotal().toString());

		parameters.put("OFFICE_NAME",
				(vcrFinalServiceDTO.getOfficeName() == null) ? StringUtils.EMPTY : vcrFinalServiceDTO.getOfficeName());

		parameters.put("AP_LOGO", getLogo(ReportFiles.APLOGO));
		return parameters;
	}

	public Map<String, Object> getFinanceAssistenceDetails(String inputNumber) {
		FinancialAssistanceMetaDTO financialAssistanceMetaDTO = null;
		Optional<FinancialAssistanceDTO> financialAssistanceDTO = null;
		FinancialAssistanceDTO financialAssistDto = null;
		List<FinanceAssistvehDetailVo> financialAsistList = new ArrayList<>();
		FinanceAssistvehDetailVo finAssist = null;
		List<FamilyMembersVo> familyMembersList = new ArrayList<>();
		FamilyMembersVo familyMembersVo = null;
		List<DetailsOfAuto> detailsOfAutoList = new ArrayList<>();
		DetailsOfAuto detailsOfAuto = null;
		financialAssistanceMetaDTO = financialAssistanceMetaDAO.findById(1234);
		financialAssistanceDTO = financialAssistanceDAO.findByApplicationNumber(inputNumber);
		if (financialAssistanceDTO.isPresent()) {
			financialAssistDto = financialAssistanceDTO.get();
		}
		Map<String, Object> parameters = new HashMap<>();
		parameters.put("applicNo", inputNumber);
		parameters.put("veh_no",
				((financialAssistDto.getPrNo() == null) ? StringUtils.EMPTY : financialAssistDto.getPrNo()));
		parameters.put("aadhar",
				(financialAssistDto.getAadhaarResponse() == null
						|| financialAssistDto.getAadhaarResponse().getUid() == null) ? StringUtils.EMPTY
								: financialAssistDto.getAadhaarResponse().getUid().toString());

		parameters.put("applicant_name",
				((financialAssistDto.getPersonalDetails() == null
						|| financialAssistDto.getPersonalDetails().getApplicantName() == null) ? StringUtils.EMPTY
								: financialAssistDto.getPersonalDetails().getApplicantName()));
		parameters.put("applicant_father",
				(financialAssistDto.getPersonalDetails() == null
						|| financialAssistDto.getPersonalDetails().getFatherName() == null) ? StringUtils.EMPTY
								: financialAssistDto.getPersonalDetails().getFatherName());
		parameters.put("applicant_address",
				(financialAssistDto.getPersonalDetails() == null
						|| financialAssistDto.getPersonalDetails().getAddress() == null) ? StringUtils.EMPTY
								: financialAssistDto.getPersonalDetails().getAddress().toString());

		parameters.put("vehicle_no",
				((financialAssistDto.getVehicleDetails() == null
						|| financialAssistDto.getVehicleDetails().getVehicleNo() == null) ? StringUtils.EMPTY
								: financialAssistDto.getVehicleDetails().getVehicleNo()));
		parameters.put("veh_cov",
				((financialAssistDto.getVehicleDetails() == null
						|| financialAssistDto.getVehicleDetails().getClassOfVehicle() == null) ? StringUtils.EMPTY
								: financialAssistDto.getVehicleDetails().getClassOfVehicle()));
		parameters.put("veh_tax",
				((financialAssistDto.getVehicleDetails() == null
						|| financialAssistDto.getVehicleDetails().getTaxValidityEnd() == null) ? StringUtils.EMPTY
								: financialAssistDto.getVehicleDetails().getTaxValidityEnd().format(formatter)));
		parameters.put("veh_fc",
				((financialAssistDto.getVehicleDetails() == null
						|| financialAssistDto.getVehicleDetails().getFcValidityEnd() == null) ? StringUtils.EMPTY
								: financialAssistDto.getVehicleDetails().getFcValidityEnd().format(formatter)));
		parameters.put("veh_permit",
				((financialAssistDto.getVehicleDetails() == null
						|| financialAssistDto.getVehicleDetails().getPermitValidityEnd() == null) ? StringUtils.EMPTY
								: financialAssistDto.getVehicleDetails().getPermitValidityEnd().format(formatter)));
		parameters.put("veh_permit_issued",
				((financialAssistDto.getVehicleDetails() == null
						|| financialAssistDto.getVehicleDetails().getPollutionValidityEnd() == null) ? StringUtils.EMPTY
								: financialAssistDto.getVehicleDetails().getPollutionValidityEnd().format(formatter)));

		parameters.put("dl_no",
				((financialAssistDto.getDrivingLicenseDetails() == null
						|| financialAssistDto.getDrivingLicenseDetails().getDlNo() == null) ? StringUtils.EMPTY
								: financialAssistDto.getDrivingLicenseDetails().getDlNo()));
		// not saved in finance Data base
		parameters.put("dl_issued",
				((financialAssistDto.getDrivingLicenseDetails() == null
						|| financialAssistDto.getDrivingLicenseDetails().getNonTransportValidityEnd() == null)
								? StringUtils.EMPTY
								: financialAssistDto.getDrivingLicenseDetails().getNonTransportValidityEnd()
										.format(formatter)));

		parameters.put("dl_non_validity",
				(financialAssistDto.getDrivingLicenseDetails() == null
						|| financialAssistDto.getDrivingLicenseDetails().getNonTransportValidityEnd() == null)
								? StringUtils.EMPTY
								: financialAssistDto.getDrivingLicenseDetails().getNonTransportValidityEnd()
										.format(formatter));

		parameters.put("dl_tr_validity",
				(financialAssistDto.getDrivingLicenseDetails() == null
						|| financialAssistDto.getDrivingLicenseDetails().getTransportValidityEnd() == null)
								? StringUtils.EMPTY
								: financialAssistDto.getDrivingLicenseDetails().getTransportValidityEnd()
										.format(formatter));
		parameters.put("dl_cov",
				(financialAssistDto.getDrivingLicenseDetails() == null
						|| financialAssistDto.getDrivingLicenseDetails().getCovs() == null) ? StringUtils.EMPTY
								: financialAssistDto.getDrivingLicenseDetails().getCovs().toString());
		// need to app
		parameters.put("ration", "12344");
		parameters.put("ration_ward", "ashok nagar");
		parameters.put("ration_village", "madavarum");

		parameters.put("caste",
				(financialAssistDto.getCaste() == null ? StringUtils.EMPTY : financialAssistDto.getCaste()));
		parameters.put("bankacntno",
				(financialAssistDto.getBankDetails() == null
						|| financialAssistDto.getBankDetails().getAccountNo() == null) ? StringUtils.EMPTY
								: financialAssistDto.getBankDetails().getAccountNo());
		parameters.put("bankname",
				(financialAssistDto.getBankDetails() == null || financialAssistDto.getBankDetails().getBranch() == null)
						? StringUtils.EMPTY
						: financialAssistDto.getBankDetails().getBranch());
		parameters.put("branch",
				(financialAssistDto.getBankDetails() == null || financialAssistDto.getBankDetails().getBranch() == null)
						? StringUtils.EMPTY
						: financialAssistDto.getBankDetails().getBranch());
		parameters.put("ifsc",
				(financialAssistDto.getBankDetails() == null
						|| financialAssistDto.getBankDetails().getIfscCode() == null) ? StringUtils.EMPTY
								: financialAssistDto.getBankDetails().getIfscCode());

		// FinanceAssistvehDetailVo finAssist1=new FinanceAssistvehDetailVo();
		Integer count = 1;
		if (financialAssistDto.getApplicantNamedCovs() != null) {
			for (PersonalDetailsDTO personalDetailsDTO : financialAssistDto.getApplicantNamedCovs()) {
				finAssist = new FinanceAssistvehDetailVo();
				finAssist.setSerialNo(count.toString() == null ? StringUtils.EMPTY : count.toString());
				finAssist.setVehicleName(personalDetailsDTO.getVehicleNo() == null ? StringUtils.EMPTY
						: personalDetailsDTO.getVehicleNo());// vehicleName
				finAssist.setVehCov(personalDetailsDTO.getClassofVehicle() == null ? StringUtils.EMPTY
						: personalDetailsDTO.getClassofVehicle());// vehCov
				count++;
				financialAsistList.add(finAssist);
			}
		}

		Integer count1 = 1;
		if (financialAssistDto.getFamilyMembersDetails() != null) {
			for (CardMemberDetails familyMembers : financialAssistDto.getFamilyMembersDetails()) {
				familyMembersVo = new FamilyMembersVo();
				familyMembersVo.setSno(count1.toString() == null ? StringUtils.EMPTY : count1.toString());// sno
				familyMembersVo.setName(
						familyMembers.getMemberName() == null ? StringUtils.EMPTY : familyMembers.getMemberName());
				familyMembersVo.setRelationship(
						familyMembers.getMemberName() == null ? StringUtils.EMPTY : familyMembers.getMemberName());
				familyMembersVo.setAge(familyMembers.getAge() == null ? StringUtils.EMPTY : familyMembers.getAge());
				familyMembersVo
						.setAadharno(familyMembers.getUid() == null ? StringUtils.EMPTY : familyMembers.getUid());
				count1++;
				familyMembersList.add(familyMembersVo);
			}
		}
		Integer count2 = 1;
		if (financialAssistDto.getFamilyMembersCovs() != null) {
			for (PersonalDetailsDTO detailsOfFamily : financialAssistDto.getFamilyMembersCovs()) {
				detailsOfAuto = new DetailsOfAuto();
				detailsOfAuto.setSerno((count2.toString() == null) ? StringUtils.EMPTY : count2.toString());// serialNo
				detailsOfAuto.setVehno(
						(detailsOfFamily.getVehicleNo() == null ? StringUtils.EMPTY : detailsOfFamily.getVehicleNo()));// vehicleName
				detailsOfAuto.setVehcovs(detailsOfFamily.getClassofVehicle() == null ? StringUtils.EMPTY
						: detailsOfFamily.getClassofVehicle());// vehCov
				detailsOfAuto.setFamilymem(detailsOfFamily.getFamilyMemberName() == null ? StringUtils.EMPTY
						: detailsOfFamily.getFamilyMemberName());// nameoffamily
				detailsOfAuto.setRelationappl(detailsOfFamily.getRelationWithApplicant() == null ? StringUtils.EMPTY
						: detailsOfFamily.getRelationWithApplicant());// relationship
				count2++;
				detailsOfAutoList.add(detailsOfAuto);
			}
		}
		for (String single : financialAssistanceMetaDTO.getCheckListDesc()) {
			if (single.equalsIgnoreCase("Aadhar card")) {
				parameters.put("checkList", single);
			} else if (single.equalsIgnoreCase("Ration card")) {
				parameters.put("checkList1", single);
			} else if (single.equalsIgnoreCase("Caste")) {
				parameters.put("checkList2", single);
			} else if (single.equalsIgnoreCase("Vehicle")) {
				parameters.put("checkList3", single);
			} else {
				parameters.put("checkList4", single);
			}
		}
		logger.info("finacial assistance size:::" + financialAsistList.size());
		JRBeanCollectionDataSource beanColDataSource = new JRBeanCollectionDataSource(financialAsistList);
		parameters.put("renwelList", beanColDataSource);

		logger.info("finacial assistance size:::" + familyMembersList.size());
		JRBeanCollectionDataSource beanColDataSource1 = new JRBeanCollectionDataSource(familyMembersList);
		parameters.put("renwelList1", beanColDataSource1);

		logger.info("finacial assistance size:::" + detailsOfAutoList.size());
		JRBeanCollectionDataSource beanColDataSource2 = new JRBeanCollectionDataSource(detailsOfAutoList);
		parameters.put("renwelList2", beanColDataSource2);
		parameters.put("DIGITAL_SIGN", getLogo(ReportFiles.DIGITAL_SIGN));
		return parameters;
	}

	public Map<String, Object> getFinanceAssistAck(String applicationNo) {

		Optional<FinancialAssistanceDTO> financialAssistanceDTO = null;
		FinancialAssistanceDTO financialAssistDto = null;

		financialAssistanceDTO = financialAssistanceDAO.findByApplicationNumber(applicationNo);
		if (financialAssistanceDTO.isPresent()) {
			financialAssistDto = financialAssistanceDTO.get();
		}
		String PRESENT_ADDRESS = StringUtils.EMPTY;
		if (financialAssistDto.getPersonalDetails() != null
				&& financialAssistDto.getPersonalDetails().getPresentAddress() != null) {
			String PRESENT_ADDRESS_VALUE = null;
			if (financialAssistDto.getPersonalDetails().getPresentAddress().getOtherVillage() == null
					|| (!financialAssistDto.getPersonalDetails().getPresentAddress().getOtherVillage()
							.equalsIgnoreCase("")
							&& financialAssistDto.getPersonalDetails().getPresentAddress().getOtherVillage() != null)) {

				PRESENT_ADDRESS_VALUE = financialAssistDto.getPersonalDetails().getPresentAddress()
						.getOtherVillage() == null ? StringUtils.EMPTY
								: financialAssistDto.getPersonalDetails().getPresentAddress().getOtherVillage()
										.toUpperCase();
			} else {
				PRESENT_ADDRESS_VALUE = financialAssistDto.getPersonalDetails().getPresentAddress().getVillage()
						.getVillageName() == null ? StringUtils.EMPTY
								: financialAssistDto.getPersonalDetails().getPresentAddress().getVillage()
										.getVillageName().toUpperCase();

			}

			PRESENT_ADDRESS = replaceDefaults(
					financialAssistDto.getPersonalDetails().getPresentAddress().getDoorNo() == null ? StringUtils.EMPTY
							: financialAssistDto.getPersonalDetails().getPresentAddress().getDoorNo())
					+ "\n"
					+ replaceDefaults(
							financialAssistDto.getPersonalDetails().getPresentAddress().getStreetName() == null
									? StringUtils.EMPTY
									: financialAssistDto
											.getPersonalDetails().getPresentAddress().getStreetName().toUpperCase())
					+ ","
					+ replaceDefaults((financialAssistDto.getPersonalDetails().getPresentAddress() == null
							|| financialAssistDto.getPersonalDetails().getPresentAddress().getTownOrCity() == null)
									? StringUtils.EMPTY
									: financialAssistDto
											.getPersonalDetails().getPresentAddress().getTownOrCity().toUpperCase())
					+ "\n" + replaceDefaults(PRESENT_ADDRESS_VALUE) + ","
					+ replaceDefaults(((financialAssistDto.getPersonalDetails().getPresentAddress().getMandal() == null
							|| financialAssistDto.getPersonalDetails().getPresentAddress().getMandal()
									.getMandalName() == null)
											? ""
											: financialAssistDto.getPersonalDetails().getPresentAddress().getMandal()
													.getMandalName().toUpperCase())
							+ ","
							+ replaceDefaults(
									((financialAssistDto.getPersonalDetails().getPresentAddress().getDistrict() == null
											|| financialAssistDto.getPersonalDetails().getPresentAddress().getDistrict()
													.getDistrictName() == null)
															? ""
															: financialAssistDto
																	.getPersonalDetails().getPresentAddress()
																	.getDistrict().getDistrictName().toUpperCase()))
							+ "\n"
							+ replaceDefaults(
									((financialAssistDto.getPersonalDetails().getPresentAddress().getState() == null
											|| financialAssistDto.getPersonalDetails().getPresentAddress().getState()
													.getStateName() == null)
															? ""
															: financialAssistDto.getPersonalDetails()
																	.getPresentAddress().getState().getStateName()
																	.toUpperCase()))
							+ "\n"
							+ replaceDefaults(
									(financialAssistDto.getPersonalDetails().getPresentAddress().getPostOffice() == null
											? ""
											: financialAssistDto.getPersonalDetails().getPresentAddress()
													.getPostOffice().getPostOfficeCode())));

		}

		Map<String, Object> parameters = new HashMap<>();
		parameters.put("applica_no", (financialAssistDto.getApplicationNumber() == null) ? StringUtils.EMPTY
				: financialAssistDto.getApplicationNumber());
		parameters.put("vehicle_no",
				(financialAssistDto == null || financialAssistDto.getPrNo() == null) ? StringUtils.EMPTY
						: financialAssistDto.getPrNo());
		parameters.put("dl_no",
				(financialAssistDto.getDrivingLicenseDetails() == null
						|| financialAssistDto.getDrivingLicenseDetails().getDlNo() == null) ? StringUtils.EMPTY
								: financialAssistDto.getDrivingLicenseDetails().getDlNo());
		parameters.put("caste", "SC");
		parameters.put("ration", "AP1234DC156");
		parameters.put("address", PRESENT_ADDRESS);
		return parameters;
	}

	public VcrFinalServiceDTO getEvcrFlag(String vcrNumber) {
		Optional<VcrFinalServiceDTO> vcrListOpt = null;
		VcrFinalServiceDTO vcrFinalServiceDto = null;
		vcrListOpt = finalServiceDAO.findByVcrVcrNumber(vcrNumber);
		if (vcrListOpt.isPresent()) {
			vcrFinalServiceDto = vcrListOpt.get();
			return vcrListOpt.get();
		}
		return null;
	}

	/**
	 * Showcause notice for Morethan 5 Qtrs
	 */
	public Map<String, Object> getShowcauseNoticeForMorethan5Qtrs(String scNo) {
		NonPaymentDetailsDTO nonPaymentDetailsDTO = null;
		DateTimeFormatter formatter = DateTimeFormatter.ofPattern(DATEFORMAT);

		Optional<NonPaymentDetailsDTO> nonPaymentDetails = nonPaymentDetailsDAO.findByScNo(scNo);

		if (nonPaymentDetails.isPresent()) {
			nonPaymentDetailsDTO = nonPaymentDetails.get();
		}
		String sub = StringUtils.EMPTY;
		sub = "Sub : Motor Vehicles - Vehicles No. "
				+ replaceDefaults(
						nonPaymentDetailsDTO.getPrNo() == null ? StringUtils.EMPTY : nonPaymentDetailsDTO.getPrNo())
				+ " ("
				+ replaceDefaults(nonPaymentDetailsDTO.getCovDesc() == null ? StringUtils.EMPTY
						: nonPaymentDetailsDTO.getCovDesc())// COV
				+ " )" + "-Non payment of Tax and Penalty from the Q.E."
				+ replaceDefaults(nonPaymentDetailsDTO.getQuarterEndDate() == null ? StringUtils.EMPTY
						: nonPaymentDetailsDTO.getQuarterEndDate().format(formatter))
				+ "- Cancellation of Tax with penalty-Show cause notice issued-Regarding.";

		String VEHICLENO = StringUtils.EMPTY;
		VEHICLENO = "In the reference cited,it is noticed that the vehicle bearing Registration Number "
				+ replaceDefaults(
						nonPaymentDetailsDTO.getPrNo() == null ? StringUtils.EMPTY : nonPaymentDetailsDTO.getPrNo())
				+ "( "
				+ replaceDefaults(nonPaymentDetailsDTO.getCovDesc() == null ? StringUtils.EMPTY
						: nonPaymentDetailsDTO.getCovDesc())// COV
				+ " )" + " is not paying taxes for more than ( "
				+ replaceDefaults(nonPaymentDetailsDTO.getPendingQuarters() == null ? StringUtils.EMPTY
						: nonPaymentDetailsDTO.getPendingQuarters())
				+ " ) quarters i.e. . from the Q.E. "
				+ replaceDefaults(nonPaymentDetailsDTO.getQuarterEndDate() == null ? StringUtils.EMPTY
						: nonPaymentDetailsDTO.getQuarterEndDate().format(formatter))
				+ " Onwards.";

		String FITNESSFIELD = StringUtils.EMPTY;
		FITNESSFIELD = "As per this office records, The Vehicle is covered by Permit NO " + replaceDefaults(
				nonPaymentDetailsDTO.getPermitNo() == null ? StringUtils.EMPTY : nonPaymentDetailsDTO.getPermitNo())
				+ " valid upto "
				+ replaceDefaults(nonPaymentDetailsDTO.getPermitValidity() == null ? StringUtils.EMPTY
						: nonPaymentDetailsDTO.getPermitValidity().format(formatter))
				+ " ,and Fitness Certificate expired on "
				+ replaceDefaults(nonPaymentDetailsDTO.getFcValidity() == null ? StringUtils.EMPTY
						: nonPaymentDetailsDTO.getFcValidity().format(formatter));

		String amount = StringUtils.EMPTY;
		amount = "In view of the above,the registered owner of the above said vehicle is not in existence,since the "
				+ "registered owner of the vehilcle has not paid the requisite tax due to the Government. payment of tax Rs"
				+ replaceDefaults(nonPaymentDetailsDTO.getTaxArrears() == null ? StringUtils.EMPTY
						: nonPaymentDetailsDTO.getTaxArrears());

		String citizen = StringUtils.EMPTY;
		citizen = "Therefore sri "
				+ replaceDefaults(nonPaymentDetailsDTO.getOwnerName() == null ? StringUtils.EMPTY
						: nonPaymentDetailsDTO.getOwnerName().toUpperCase())
				+ " S/D/W "
				+ replaceDefaults(nonPaymentDetailsDTO.getFatherName() == null ? StringUtils.EMPTY
						: nonPaymentDetailsDTO.getFatherName().toUpperCase())// FatherName
				+ " the registered owner of the above said vehicle is directed to show cause as to why action"
				+ " should not be taken for cancellation of Registration Certificate u/s 55 of Motor Vehicle Act,1988. "
				+ "He should submit his explanation if any within(10) days from the   date of receipt of this notice failing which action "
				+ "will be taken for cancellation of Registration Certificate without  any further notice.";

		String PRESENT_ADDRESS = StringUtils.EMPTY;
		PRESENT_ADDRESS = " Sri "
				+ replaceDefaults(nonPaymentDetailsDTO.getOwnerName() == null ? StringUtils.EMPTY
						: nonPaymentDetailsDTO.getOwnerName().toUpperCase())
				+ "\n " + replaceDefaults(getString(nonPaymentDetailsDTO.getOwnerAddress() == null ? StringUtils.EMPTY
						: getString(nonPaymentDetailsDTO.getOwnerAddress()).toUpperCase()));

		String financieraddress = StringUtils.EMPTY;
		financieraddress = " "
				+ replaceDefaults(getString(nonPaymentDetailsDTO.getFinancerAddress() == null ? StringUtils.EMPTY
						: nonPaymentDetailsDTO.getFinancerAddress()).toUpperCase());

		String MVI_NAME = StringUtils.EMPTY;
		MVI_NAME = "Copy to the Motor Vehicles Inspector, "
				+ replaceDefaults(nonPaymentDetailsDTO.getMviName() == null ? StringUtils.EMPTY
						: nonPaymentDetailsDTO.getMviName().toUpperCase())
				+ " with a request to ascertain whereabouts of the vehicle and report compliance.";

		String qrCode = StringUtils.EMPTY;
		try {
			qrCode = qRCodeService.sendPDF(getRegistrationQRCodeForTransportCitizen(scNo));
			if (qrCode == null)
				qrCode = StringUtils.EMPTY;
		} catch (Exception e) {
			logger.error(" Exception :[] ", e);
		}

		Map<String, Object> parameters = new HashMap<>();

		parameters.put("IMAGE_SCAN", qrCode);
		parameters.put("WATER_MARK", getLogo(ReportFiles.WATER_MARK));
		parameters.put("AP_LOGO", getLogo(ReportFiles.APLOGO));
		parameters.put("SUB", sub);
		parameters.put("PRESENT_ADDRESS", PRESENT_ADDRESS);
		parameters.put("mviName", MVI_NAME);
		parameters.put("R.No.", scNo);
		parameters.put("vehicleNo", VEHICLENO);
		parameters.put("fitnessField", FITNESSFIELD);
		parameters.put("AMOUNT", amount);
		parameters.put("CITIZEN", citizen);
		parameters.put("financierAddress", financieraddress);
		parameters.put("DIGITAL_SIGN", getLogo(ReportFiles.DIGITAL_SIGN));
		parameters.put("officeName", replaceDefaults(nonPaymentDetailsDTO.getOfficeName() == null ? StringUtils.EMPTY
				: nonPaymentDetailsDTO.getOfficeName().toUpperCase()));

		return parameters;
	}

	/**
	 * Show cause notice under rule 6
	 */

	public Map<String, Object> getShowcauseNoticeUnderRule6(String scNo) {
		NonPaymentDetailsDTO nonPaymentDetailsDTO = null;
		DateTimeFormatter formatter = DateTimeFormatter.ofPattern(DATEFORMAT);

		Optional<NonPaymentDetailsDTO> nonPaymentDetails = nonPaymentDetailsDAO.findByScNo(scNo);

		if (nonPaymentDetails.isPresent()) {
			nonPaymentDetailsDTO = nonPaymentDetails.get();
		}
		String sub = StringUtils.EMPTY;
		sub = "Sub : Motor Vehicles - Vehicles No. "
				+ replaceDefaults(
						nonPaymentDetailsDTO.getPrNo() == null ? StringUtils.EMPTY : nonPaymentDetailsDTO.getPrNo())
				+ " ("
				+ replaceDefaults(nonPaymentDetailsDTO.getCovDesc() == null ? StringUtils.EMPTY
						: nonPaymentDetailsDTO.getCovDesc())// COV
				+ " )" + "-Non payment of Tax and Penalty from the Q.E."
				+ replaceDefaults(nonPaymentDetailsDTO.getQuarterEndDate() == null ? StringUtils.EMPTY
						: nonPaymentDetailsDTO.getQuarterEndDate().format(formatter))
				+ "- collection of Tax with penalty-Show cause notice issued-Regarding.";

		String VEHICLENO = StringUtils.EMPTY;
		VEHICLENO = "In the reference cited,it is noticed that the vehicle bearing Registration Number "
				+ replaceDefaults(
						nonPaymentDetailsDTO.getPrNo() == null ? StringUtils.EMPTY : nonPaymentDetailsDTO.getPrNo())
				+ "( "
				+ replaceDefaults(nonPaymentDetailsDTO.getCovDesc() == null ? StringUtils.EMPTY
						: nonPaymentDetailsDTO.getCovDesc())// COV
				+ " )" + " is not paying taxes for more than ( "
				+ replaceDefaults(nonPaymentDetailsDTO.getPendingQuarters() == null ? StringUtils.EMPTY
						: nonPaymentDetailsDTO.getPendingQuarters())
				+ " ) quarters i.e. . from the Q.E. "
				+ replaceDefaults(nonPaymentDetailsDTO.getQuarterEndDate() == null ? StringUtils.EMPTY
						: nonPaymentDetailsDTO.getQuarterEndDate().format(formatter))
				+ " Onwards.";

		String FITNESSFIELD = StringUtils.EMPTY;
		FITNESSFIELD = "As per this office records, The Vehicle is covered by Permit NO " + replaceDefaults(
				nonPaymentDetailsDTO.getPermitNo() == null ? StringUtils.EMPTY : nonPaymentDetailsDTO.getPermitNo())
				+ " valid upto "
				+ replaceDefaults(nonPaymentDetailsDTO.getPermitValidity() == null ? StringUtils.EMPTY
						: nonPaymentDetailsDTO.getPermitValidity().format(formatter))
				+ " ,and Fitness Certificate validity "
				+ replaceDefaults(nonPaymentDetailsDTO.getFcValidity() == null ? StringUtils.EMPTY
						: nonPaymentDetailsDTO.getFcValidity().format(formatter));

		String amount = StringUtils.EMPTY;
		amount = "In view of the above,the registered owner of the above said vehicle is liable for payment of tax Rs. "
				+ replaceDefaults(nonPaymentDetailsDTO.getTaxAmount() == null ? StringUtils.EMPTY
						: nonPaymentDetailsDTO.getTaxAmount())
				+ " as per the provisions stipulated Under Sec 3 of A.P.M.V.T. Act, 1963 with penalty Rs "
				+ replaceDefaults(nonPaymentDetailsDTO.getPenaltyArrears() == null ? StringUtils.EMPTY
						: nonPaymentDetailsDTO.getPenaltyArrears())
				+ " as per Rule 13 of A.P.M.V.Taxation Rules 1963. Total amount of Due arrears is Rs  "
				+ replaceDefaults(nonPaymentDetailsDTO.getTaxArrears() == null ? StringUtils.EMPTY
						: nonPaymentDetailsDTO.getTaxArrears());

		String citizen = StringUtils.EMPTY;
		citizen = "Therefore sri "
				+ replaceDefaults(nonPaymentDetailsDTO.getOwnerName() == null ? StringUtils.EMPTY
						: nonPaymentDetailsDTO.getOwnerName().toUpperCase())
				+ " S/D/W "
				+ replaceDefaults(nonPaymentDetailsDTO.getFatherName() == null ? StringUtils.EMPTY
						: nonPaymentDetailsDTO.getFatherName().toUpperCase())// FatherName
				+ " the registered owner of the above said vehicle is directed to show cause as to why the tax"
				+ " and penalty due to the government should not be collected from him."
				+ "He should submit his explanation if any within(10) days from the date of receipt of this notice failing which action "
				+ "will be taken to confirm the demand under Revenue Recovery Act.";

		String PRESENT_ADDRESS = StringUtils.EMPTY;
		PRESENT_ADDRESS = " Sri "
				+ replaceDefaults(nonPaymentDetailsDTO.getOwnerName() == null ? StringUtils.EMPTY
						: nonPaymentDetailsDTO.getOwnerName().toUpperCase())
				+ "\n " + replaceDefaults(getString(nonPaymentDetailsDTO.getOwnerAddress() == null ? StringUtils.EMPTY
						: getString(nonPaymentDetailsDTO.getOwnerAddress()).toUpperCase()));

		String financieraddress = StringUtils.EMPTY;
		financieraddress = " "
				+ replaceDefaults(getString(nonPaymentDetailsDTO.getFinancerAddress() == null ? StringUtils.EMPTY
						: nonPaymentDetailsDTO.getFinancerAddress()).toUpperCase());

		String MVI_NAME = StringUtils.EMPTY;
		MVI_NAME = "Copy to the Motor Vehicles Inspector, "
				+ replaceDefaults(nonPaymentDetailsDTO.getMviName() == null ? StringUtils.EMPTY
						: nonPaymentDetailsDTO.getMviName().toUpperCase())
				+ " with a request to ascertain whereabouts of the vehicle and report compliance.";

		String qrCode = StringUtils.EMPTY;
		try {
			qrCode = qRCodeService.sendPDF(getRegistrationQRCodeForTransportCitizen(scNo));
			if (qrCode == null)
				qrCode = StringUtils.EMPTY;
		} catch (Exception e) {
			logger.error(" Exception :[] ", e);
		}

		Map<String, Object> parameters = new HashMap<>();

		parameters.put("IMAGE_SCAN", qrCode);
		parameters.put("WATER_MARK", getLogo(ReportFiles.WATER_MARK));
		parameters.put("AP_LOGO", getLogo(ReportFiles.APLOGO));
		parameters.put("SUB", sub);
		parameters.put("PRESENT_ADDRESS", PRESENT_ADDRESS);
		parameters.put("mviName", MVI_NAME);
		parameters.put("R.No.", scNo);
		parameters.put("vehicleNo", VEHICLENO);
		parameters.put("fitnessField", FITNESSFIELD);
		parameters.put("AMOUNT", amount);
		parameters.put("CITIZEN", citizen);
		parameters.put("financierAddress", financieraddress);
		parameters.put("DIGITAL_SIGN", getLogo(ReportFiles.DIGITAL_SIGN));
		parameters.put("officeName", replaceDefaults(nonPaymentDetailsDTO.getOfficeName() == null ? StringUtils.EMPTY
				: nonPaymentDetailsDTO.getOfficeName().toUpperCase()));

		return parameters;
	}

	/**
	 * Show cause notice under rule 7
	 */
	public Map<String, Object> getShowcauseNoticeUnderSection7(String scNo) {
		NonPaymentDetailsDTO nonPaymentDetailsDTO = null;
		DateTimeFormatter formatter = DateTimeFormatter.ofPattern(DATEFORMAT);

		Optional<NonPaymentDetailsDTO> nonPaymentDetails = nonPaymentDetailsDAO.findByScNo(scNo);

		if (nonPaymentDetails.isPresent()) {
			nonPaymentDetailsDTO = nonPaymentDetails.get();
		}
		String sub = StringUtils.EMPTY;
		sub = "Sub : Motor Vehicles - Vehicles No. "
				+ replaceDefaults(
						nonPaymentDetailsDTO.getPrNo() == null ? StringUtils.EMPTY : nonPaymentDetailsDTO.getPrNo())
				+ " ("
				+ replaceDefaults(nonPaymentDetailsDTO.getCovDesc() == null ? StringUtils.EMPTY
						: nonPaymentDetailsDTO.getCovDesc())// COV
				+ " )" + "-Non payment of Tax and Penalty from the Q.E."
				+ replaceDefaults(nonPaymentDetailsDTO.getQuarterEndDate() == null ? StringUtils.EMPTY
						: nonPaymentDetailsDTO.getQuarterEndDate().format(formatter))
				+ "- Collection of Tax with penalty-Show cause notice issued-Regarding.";

		String VEHICLENO = StringUtils.EMPTY;
		VEHICLENO = "In the reference cited,it is noticed that the vehicle bearing Registration Number "
				+ replaceDefaults(
						nonPaymentDetailsDTO.getPrNo() == null ? StringUtils.EMPTY : nonPaymentDetailsDTO.getPrNo())
				+ "( "
				+ replaceDefaults(nonPaymentDetailsDTO.getCovDesc() == null ? StringUtils.EMPTY
						: nonPaymentDetailsDTO.getCovDesc())// COV
				+ " )" + " is not paying taxes for more than ( "
				+ replaceDefaults(nonPaymentDetailsDTO.getPendingQuarters() == null ? StringUtils.EMPTY
						: nonPaymentDetailsDTO.getPendingQuarters())
				+ " ) quarters i.e. . from the Q.E. "
				+ replaceDefaults(nonPaymentDetailsDTO.getQuarterEndDate() == null ? StringUtils.EMPTY
						: nonPaymentDetailsDTO.getQuarterEndDate().format(formatter))
				+ " Onwards.";

		String FITNESSFIELD = StringUtils.EMPTY;
		FITNESSFIELD = "As per this office records, The Vehicle is covered by Permit NO " + replaceDefaults(
				nonPaymentDetailsDTO.getPermitNo() == null ? StringUtils.EMPTY : nonPaymentDetailsDTO.getPermitNo())
				+ " valid upto "
				+ replaceDefaults(nonPaymentDetailsDTO.getPermitValidity() == null ? StringUtils.EMPTY
						: nonPaymentDetailsDTO.getPermitValidity().format(formatter))
				+ " ,and Fitness Certificate validity "
				+ replaceDefaults(nonPaymentDetailsDTO.getFcValidity() == null ? StringUtils.EMPTY
						: nonPaymentDetailsDTO.getFcValidity().format(formatter));

		String amount = StringUtils.EMPTY;
		amount = "In view of the above,the registered owner of the above said vehicle is liable for payment of tax Rs. "
				+ replaceDefaults(nonPaymentDetailsDTO.getTaxAmount() == null ? StringUtils.EMPTY
						: nonPaymentDetailsDTO.getTaxAmount())
				+ " as per the provisions stipulated Under Sec 3 of A.P.M.V.T. Act, 1963 with penalty Rs "
				+ replaceDefaults(nonPaymentDetailsDTO.getPenaltyArrears() == null ? StringUtils.EMPTY
						: nonPaymentDetailsDTO.getPenaltyArrears())
				+ " as per Rule 13 of A.P.M.V.Taxation Rules 1963. Total amount of Due arrears is Rs  "
				+ replaceDefaults(nonPaymentDetailsDTO.getTaxArrears() == null ? StringUtils.EMPTY
						: nonPaymentDetailsDTO.getTaxArrears());

		String citizen = StringUtils.EMPTY;
		citizen = "Therefore sri "
				+ replaceDefaults(nonPaymentDetailsDTO.getOwnerName() == null ? StringUtils.EMPTY
						: nonPaymentDetailsDTO.getOwnerName().toUpperCase())
				+ " S/D/W "
				+ replaceDefaults(nonPaymentDetailsDTO.getFatherName() == null ? StringUtils.EMPTY
						: nonPaymentDetailsDTO.getFatherName().toUpperCase())// FatherName
				+ " the registered owner of the above said vehicle is directed to show cause as to why the tax"
				+ " and penalty due to the government should not be collected from him."
				+ "He should submit his explanation if any within(10) days from the date of receipt of this notice failing which action "
				+ "will be taken to confirm the demand under Revenue Recovery Act.";

		String PRESENT_ADDRESS = StringUtils.EMPTY;
		PRESENT_ADDRESS = " Sri "
				+ replaceDefaults(nonPaymentDetailsDTO.getOwnerName() == null ? StringUtils.EMPTY
						: nonPaymentDetailsDTO.getOwnerName().toUpperCase())
				+ "\n " + replaceDefaults(getString(nonPaymentDetailsDTO.getOwnerAddress() == null ? StringUtils.EMPTY
						: getString(nonPaymentDetailsDTO.getOwnerAddress()).toUpperCase()));

		String financieraddress = StringUtils.EMPTY;
		financieraddress = " "
				+ replaceDefaults(getString(nonPaymentDetailsDTO.getFinancerAddress() == null ? StringUtils.EMPTY
						: nonPaymentDetailsDTO.getFinancerAddress()).toUpperCase());

		String MVI_NAME = StringUtils.EMPTY;
		MVI_NAME = "Copy to the Motor Vehicles Inspector, "
				+ replaceDefaults(nonPaymentDetailsDTO.getMviName() == null ? StringUtils.EMPTY
						: nonPaymentDetailsDTO.getMviName().toUpperCase())
				+ " with a request to ascertain whereabouts of the vehicle and report compliance.";

		String qrCode = StringUtils.EMPTY;
		try {
			qrCode = qRCodeService.sendPDF(getRegistrationQRCodeForTransportCitizen(scNo));
			if (qrCode == null)
				qrCode = StringUtils.EMPTY;
		} catch (Exception e) {
			logger.error(" Exception :[] ", e);
		}

		Map<String, Object> parameters = new HashMap<>();

		parameters.put("IMAGE_SCAN", qrCode);
		parameters.put("WATER_MARK", getLogo(ReportFiles.WATER_MARK));
		parameters.put("AP_LOGO", getLogo(ReportFiles.APLOGO));
		parameters.put("SUB", sub);
		parameters.put("PRESENT_ADDRESS", PRESENT_ADDRESS);
		parameters.put("mviName", MVI_NAME);
		parameters.put("R.No.", scNo);
		parameters.put("vehicleNo", VEHICLENO);
		parameters.put("fitnessField", FITNESSFIELD);
		parameters.put("AMOUNT", amount);
		parameters.put("CITIZEN", citizen);
		parameters.put("financierAddress", financieraddress);
		parameters.put("DIGITAL_SIGN", getLogo(ReportFiles.DIGITAL_SIGN));
		parameters.put("officeName", replaceDefaults(nonPaymentDetailsDTO.getOfficeName() == null ? StringUtils.EMPTY
				: nonPaymentDetailsDTO.getOfficeName().toUpperCase()));

		return parameters;
	}

	public Map<String, Object> getParametersForE_biddingPayRecipt(String applicationId) {

		String qrCode = StringUtils.EMPTY;
		try {
			qrCode = qRCodeService.sendPDF(getRegistrationQRCodeForTransportCitizen(applicationId));
			if (qrCode == null)
				qrCode = StringUtils.EMPTY;
		} catch (Exception e) {
			logger.error(" Exception :[] ", e);
		}

		try {
			Optional<SpecialNumberDetailsDTO> specialNumberDetailsDTO = specialNumberDetailsDAO
					.findBySpecialNumberAppId(applicationId);

			if (specialNumberDetailsDTO.isPresent()) {

				Map<String, Object> parameters = new HashMap<>();
				SpecialNumberDetailsDTO dto = specialNumberDetailsDTO.get();
				parameters.put("RCNO",
						dto.getSelectedPrSeries() == null ? StringUtils.EMPTY : dto.getSelectedPrSeries());
				parameters.put("APPLICATNAME", dto.getCustomerDetails().getFirstName() == null ? StringUtils.EMPTY
						: dto.getCustomerDetails().getFirstName());
				parameters.put("applied_date", dto.getCreatedDate().format(formatter));
				parameters.put("APPLFEE",
						dto.getSpecialNumberFeeDetails().getApplicationAmount() == null ? StringUtils.EMPTY
								: dto.getSpecialNumberFeeDetails().getApplicationAmount().toString());

				parameters.put("SERVICEFEE",
						dto.getSpecialNumberFeeDetails().getServicesAmount() == null ? StringUtils.EMPTY
								: dto.getSpecialNumberFeeDetails().getServicesAmount().toString());
				parameters.put("bid_amount",
						(dto.getBidFinalDetails() != null && dto.getBidFinalDetails().getBidAmount() != null)
								? dto.getBidFinalDetails().getBidAmount().toString()
								: StringUtils.EMPTY);
				parameters.put("DATE", LocalDate.now().format(formatter));
				parameters.put("TIME", LocalDateTime.now().format(timeFormatter) + " hrs");
				parameters.put("office_name",
						dto.getVehicleDetails().getRtaOffice().getOfficeName() != null
								? dto.getVehicleDetails().getRtaOffice().getOfficeName()
								: StringUtils.EMPTY);

				parameters.put("IMAGE_SCAN", qrCode);
				parameters.put("AP_LOGO", getLogo(ReportFiles.APLOGO));
				parameters.put("otsilogo", getLogo(ReportFiles.OTSILOGO));
				parameters.put("p_date", LocalDateTime.now().format(formatter));
				parameters.put("WATER_MARK", getLogo(ReportFiles.WATER_MARK));
				parameters.put("DIGITAL_SIGN", getLogo(ReportFiles.DIGITAL_SIGN));

				return parameters;

			} else {
				logger.error("No record found with this ApplicationNo::" + applicationId);
				throw new BadRequestException("No record found with this ApplicationNo::" + applicationId);
			}
		} catch (Exception ex) {
			throw new BadRequestException(ex.getMessage());
		}
	}
	/*
	 * For Citizen Enclosers PDF
	 */

	int i = 1;

	public Map<String, Object> generateCitizenEnclosers(String applicationNo) {

		Map<String, Object> parameters = new HashMap<>();
		List<CitizenEnclosersVO> list = new ArrayList<>();
		List<SubmittedImagesVO> listOfImages = new ArrayList<>();
		Optional<RegServiceDTO> citizenServices = Optional.empty();

		citizenServices = regServiceDAO.findByApplicationNo(applicationNo);

		if (citizenServices.isPresent()) {

			RegServiceDTO service = citizenServices.get();
			parameters.put("application_no", applicationNo);
			parameters.put("applicant_name", (service.getRegistrationDetails() == null
					|| service.getRegistrationDetails().getApplicantDetails() == null
					|| service.getRegistrationDetails().getApplicantDetails().getFirstName() == null ? StringUtils.EMPTY
							: service.getRegistrationDetails().getApplicantDetails().getFirstName().toUpperCase()));
			parameters.put("service_name", service.getServiceType().toString());

			parameters.put("pr_no", service.getTrNo() == null ? StringUtils.EMPTY : service.getTrNo().toUpperCase());

			parameters.put("pr_no", service.getPrNo() == null ? StringUtils.EMPTY : service.getPrNo().toUpperCase());

			parameters.put("chassis_no", service.getRegistrationDetails() == null
					|| service.getRegistrationDetails().getVahanDetails() == null
					|| service.getRegistrationDetails().getVahanDetails().getChassisNumber() == null ? StringUtils.EMPTY
							: service.getRegistrationDetails().getVahanDetails().getChassisNumber().toUpperCase());

			parameters.put("engine_no", service.getRegistrationDetails() == null
					|| service.getRegistrationDetails().getVahanDetails() == null
					|| service.getRegistrationDetails().getVahanDetails().getEngineNumber() == null ? StringUtils.EMPTY
							: service.getRegistrationDetails().getVahanDetails().getEngineNumber().toUpperCase());

			parameters.put("office_code",
					service.getOfficeDetails() == null || service.getOfficeDetails().getOfficeName() == null
							? StringUtils.EMPTY
							: service.getOfficeDetails().getOfficeName().toUpperCase());

			parameters.put("cov",
					service.getRegistrationDetails() == null
							|| service.getRegistrationDetails().getClassOfVehicleDesc() == null ? StringUtils.EMPTY
									: service.getRegistrationDetails().getClassOfVehicleDesc().toUpperCase());

			parameters.put("make_desc",
					service.getRegistrationDetails() == null
							|| service.getRegistrationDetails().getVahanDetails() == null
							|| service.getRegistrationDetails().getVahanDetails().getMakersDesc() == null
									? StringUtils.EMPTY
									: service.getRegistrationDetails().getVahanDetails().getMakersDesc().toUpperCase());

			parameters.put("make_model", service.getRegistrationDetails() == null
					|| service.getRegistrationDetails().getVahanDetails() == null
					|| service.getRegistrationDetails().getVahanDetails().getMakersModel() == null ? StringUtils.EMPTY
							: service.getRegistrationDetails().getVahanDetails().getMakersModel().toUpperCase());

			parameters.put("applied_date",
					service.getCreatedDate() == null ? StringUtils.EMPTY : service.getCreatedDate().format(formatter));

			parameters.put("approved_date",
					service.getlUpdate() == null ? StringUtils.EMPTY : service.getlUpdate().format(formatter));

			/// Action details
			parameters.put("cco_appdate", StringUtils.EMPTY);
			parameters.put("cco_user", StringUtils.EMPTY);
			parameters.put("mvi_appdate", StringUtils.EMPTY);
			parameters.put("mvi_user", StringUtils.EMPTY);
			parameters.put("ao_appdate", StringUtils.EMPTY);
			parameters.put("ao_user", StringUtils.EMPTY);
			parameters.put("rto_appdate", StringUtils.EMPTY);
			parameters.put("rto_user", StringUtils.EMPTY);

			if (service.getActionDetails() != null) {

				service.getActionDetails().stream().forEach(a -> {

					if (a.getRole().equalsIgnoreCase(RoleEnum.CCO.getName())) {
						if (a.getlUpdate() != null && a.getUserId() != null) {
							parameters.put("cco_appdate", a.getlUpdate() == null ? StringUtils.EMPTY
									: a.getlUpdate().toLocalDate().format(formatter));
							parameters.put("cco_user",
									a.getUserId() == null ? StringUtils.EMPTY : a.getUserId().toUpperCase());
						}
					}
					if (a.getRole().equalsIgnoreCase(RoleEnum.MVI.getName())) {
						if (a.getlUpdate() != null && a.getUserId() != null) {
							parameters.put("mvi_appdate", a.getlUpdate() == null ? StringUtils.EMPTY
									: a.getlUpdate().toLocalDate().format(formatter));
							parameters.put("mvi_user",
									a.getUserId() == null ? StringUtils.EMPTY : a.getUserId().toUpperCase());
						}
					}
					if (a.getRole().equalsIgnoreCase(RoleEnum.AO.getName())) {
						if (a.getlUpdate() != null && a.getUserId() != null) {
							parameters.put("ao_appdate", a.getlUpdate() == null ? StringUtils.EMPTY
									: a.getlUpdate().toLocalDate().format(formatter));
							parameters.put("ao_user",
									a.getUserId() == null ? StringUtils.EMPTY : a.getUserId().toUpperCase());
						}
					}
					if (a.getRole().equalsIgnoreCase(RoleEnum.RTO.getName())) {
						if (a.getlUpdate() != null && a.getUserId() != null) {
							parameters.put("rto_appdate", a.getlUpdate() == null ? StringUtils.EMPTY
									: a.getlUpdate().toLocalDate().format(formatter));
							parameters.put("rto_user",
									a.getUserId() == null ? StringUtils.EMPTY : a.getUserId().toUpperCase());
						}
					}
				});
			}

		} else {
			throw new BadRequestException("ApplicationNo. not found..");
		}

		Optional<CitizenEnclosuresDTO> enclosuresList = citizenEnclosuresDAO.findByApplicationNo(applicationNo);
		if (enclosuresList.isPresent()) {

			List<KeyValue<String, List<ImageEnclosureDTO>>> enclosures = enclosuresList.get().getEnclosures();

			for (KeyValue<String, List<ImageEnclosureDTO>> dto : enclosures) {

				List<ImageEnclosureDTO> img = dto.getValue();

				img.stream().forEach(x -> {
					CitizenEnclosersVO vo = new CitizenEnclosersVO();

					vo.setSno("" + i++);
					vo.setApplno(applicationNo);
					vo.setEnclname(x.getEnclosureName());

					list.add(vo);
				});
			}

			JRBeanCollectionDataSource enclList = new JRBeanCollectionDataSource(list);
			parameters.put("CitiEncl", enclList);

			// for Image

			Optional<GridFSDBFile> imageOptional = null;

			List<KeyValue<String, List<ImageEnclosureDTO>>> enclouserss = enclosuresList.get().getEnclosures();
			for (KeyValue<String, List<ImageEnclosureDTO>> enclousersSIngle : enclouserss) {

				SubmittedImagesVO submittedImagesVO = new SubmittedImagesVO();
				List<ImageEnclosureDTO> listaa = enclousersSIngle.getValue();
				if (!CollectionUtils.isEmpty(listaa)) {
					for (ImageEnclosureDTO imageEnclosureDTO : listaa) {

						imageOptional = gridFsClient.findFilesInGridFsById(imageEnclosureDTO.getImageId());

						if (imageOptional.isPresent()) {
							InputStream finput = imageOptional.get().getInputStream();
							try {
								final byte[] bytes64bytes = Base64.encodeBase64(IOUtils.toByteArray(finput));

								submittedImagesVO.setImageData(new String(bytes64bytes));
								submittedImagesVO
										.setImageName(applicationNo + " / " + imageEnclosureDTO.getEnclosureName());

							} catch (IOException e) {
								e.printStackTrace();
							}
						}
					}
				}

				listOfImages.add(submittedImagesVO);
			}

			JRBeanCollectionDataSource imgs = new JRBeanCollectionDataSource(listOfImages);
			parameters.put("enclosers", imgs);
		} else {
			throw new BadRequestException("ApplicationNo. not found..");
		}

		return parameters;
	}

}